// Generated by Haxe 4.0.0-rc.3+e3df7a4
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class Debug {
	static Log(val,msg,pos) {
		if(msg == null) {
			msg = "";
		}
		haxe_Log.trace("" + pos.className + " " + pos.lineNumber + " " + msg,{ fileName : "Debug.hx", lineNumber : 3, className : "Debug", methodName : "Log", customParams : [val]});
		return val;
	}
}
Debug.__name__ = "Debug";
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	matched(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	matchedRight() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	matchedPos() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	matchSub(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b1 = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b1) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b1;
		}
	}
	map(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
}
EReg.__name__ = "EReg";
Object.assign(EReg.prototype, {
	__class__: EReg
	,r: null
});
class HxOverrides {
	static cca(s,index) {
		var x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static remove(a,obj) {
		var i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static iter(a) {
		return { cur : 0, arr : a, hasNext : function() {
			return this.cur < this.arr.length;
		}, next : function() {
			return this.arr[this.cur++];
		}};
	}
}
HxOverrides.__name__ = "HxOverrides";
var InlineCSS = require("inline-css");
class Lambda {
	static array(it) {
		var a = [];
		var i = $getIterator(it);
		while(i.hasNext()) {
			var i1 = i.next();
			a.push(i1);
		}
		return a;
	}
	static has(it,elt) {
		var x = $getIterator(it);
		while(x.hasNext()) {
			var x1 = x.next();
			if(x1 == elt) {
				return true;
			}
		}
		return false;
	}
}
Lambda.__name__ = "Lambda";
class Markdown {
	static markdownToHtml(markdown) {
		var document = new Document();
		try {
			var _this_r = new RegExp("(\r\n|\r)","g".split("u").join(""));
			var lines = markdown.replace(_this_r,"\n").split("\n");
			document.parseRefLinks(lines);
			var blocks = document.parseLines(lines);
			return Markdown.renderHtml(blocks);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "<pre>" + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e) + "</pre>";
		}
	}
	static renderHtml(blocks) {
		return new markdown_HtmlRenderer().render(blocks);
	}
}
Markdown.__name__ = "Markdown";
class Document {
	constructor() {
		this.refLinks = new haxe_ds_StringMap();
		this.codeBlockSyntaxes = new haxe_ds_StringMap();
		this.inlineSyntaxes = [];
	}
	parseRefLinks(lines) {
		var indent = "^[ ]{0,3}";
		var id = "\\[([^\\]]+)\\]";
		var quote = "\"[^\"]+\"";
		var apos = "'[^']+'";
		var paren = "\\([^)]+\\)";
		var titles = new EReg("(" + quote + "|" + apos + "|" + paren + ")","");
		var link = new EReg("" + indent + id + ":\\s+(\\S+)\\s*(" + quote + "|" + apos + "|" + paren + "|)\\s*$","");
		var _g = 0;
		var _g1 = lines.length;
		while(_g < _g1) {
			var i = _g++;
			if(!link.match(lines[i])) {
				continue;
			}
			var id1 = link.matched(1);
			var url = link.matched(2);
			var title = link.matched(3);
			if(StringTools.startsWith(url,"<") && StringTools.endsWith(url,">")) {
				url = HxOverrides.substr(url,1,url.length - 2);
			}
			if(title == "" && lines[i + 1] != null && titles.match(lines[i + 1])) {
				title = titles.matched(1);
				lines[i + 1] = "";
			}
			if(title == "") {
				title = null;
			} else {
				title = title.substring(1,title.length - 1);
			}
			id1 = id1.toLowerCase();
			var this1 = this.refLinks;
			var value = new Link(id1,url,title);
			var _this = this1;
			if(__map_reserved[id1] != null) {
				_this.setReserved(id1,value);
			} else {
				_this.h[id1] = value;
			}
			lines[i] = "";
		}
	}
	parseLines(lines) {
		var parser = new markdown_BlockParser(lines,this);
		var blocks = [];
		while(parser.pos < parser.lines.length) {
			var _g = 0;
			var _g1 = markdown_BlockSyntax.get_syntaxes();
			while(_g < _g1.length) {
				var syntax = _g1[_g];
				++_g;
				if(syntax.canParse(parser)) {
					var block = syntax.parse(parser);
					if(block != null) {
						blocks.push(block);
					}
					break;
				}
			}
		}
		return blocks;
	}
	parseInline(text) {
		return new markdown_InlineParser(text,this).parse();
	}
}
Document.__name__ = "Document";
Object.assign(Document.prototype, {
	__class__: Document
	,refLinks: null
	,inlineSyntaxes: null
	,linkResolver: null
	,codeBlockSyntaxes: null
});
class Link {
	constructor(id,url,title) {
		this.id = id;
		this.url = url;
		this.title = title;
	}
}
Link.__name__ = "Link";
Object.assign(Link.prototype, {
	__class__: Link
	,id: null
	,url: null
	,title: null
});
Math.__name__ = "Math";
class Reflect {
	static field(o,field) {
		try {
			return o[field];
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return null;
		}
	}
	static getProperty(o,field) {
		var tmp;
		if(o == null) {
			return null;
		} else {
			var tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + field];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				return o[tmp]();
			} else {
				return o[field];
			}
		}
	}
	static fields(o) {
		var a = [];
		if(o != null) {
			var hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static isFunction(f) {
		if(typeof(f) == "function") {
			return !(f.__name__ || f.__ename__);
		} else {
			return false;
		}
	}
	static compare(a,b) {
		if(a == b) {
			return 0;
		} else if(a > b) {
			return 1;
		} else {
			return -1;
		}
	}
	static compareMethods(f1,f2) {
		if(f1 == f2) {
			return true;
		}
		if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
			return false;
		}
		if(f1.scope == f2.scope && f1.method == f2.method) {
			return f1.method != null;
		} else {
			return false;
		}
	}
	static isObject(v) {
		if(v == null) {
			return false;
		}
		var t = typeof(v);
		if(!(t == "string" || t == "object" && v.__enum__ == null)) {
			if(t == "function") {
				return (v.__name__ || v.__ename__) != null;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
}
Reflect.__name__ = "Reflect";
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		var v = parseInt(x, x && x[0]=="0" && (x[1]=="x" || x[1]=="X") ? 16 : 10);
		if(isNaN(v)) {
			return null;
		}
		return v;
	}
	static random(x) {
		if(x <= 0) {
			return 0;
		} else {
			return Math.floor(Math.random() * x);
		}
	}
}
Std.__name__ = "Std";
class StringBuf {
	constructor() {
		this.b = "";
	}
}
StringBuf.__name__ = "StringBuf";
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
	,b: null
});
class StringTools {
	static htmlEscape(s,quotes) {
		var buf_b = "";
		var _g_offset = 0;
		var _g_s = s;
		while(_g_offset < _g_s.length) {
			var s1 = _g_s;
			var index = _g_offset++;
			var c = s1.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
			}
			var c1 = c;
			if(c1 >= 65536) {
				++_g_offset;
			}
			var code = c1;
			switch(code) {
			case 34:
				if(quotes) {
					buf_b += "&quot;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 38:
				buf_b += "&amp;";
				break;
			case 39:
				if(quotes) {
					buf_b += "&#039;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 60:
				buf_b += "&lt;";
				break;
			case 62:
				buf_b += "&gt;";
				break;
			default:
				buf_b += String.fromCodePoint(code);
			}
		}
		return buf_b;
	}
	static startsWith(s,start) {
		if(s.length >= start.length) {
			return s.lastIndexOf(start,0) == 0;
		} else {
			return false;
		}
	}
	static endsWith(s,end) {
		var elen = end.length;
		var slen = s.length;
		if(slen >= elen) {
			return s.indexOf(end,slen - elen) == slen - elen;
		} else {
			return false;
		}
	}
	static isSpace(s,pos) {
		var c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
}
StringTools.__name__ = "StringTools";
class haxe_io_Output {
	writeByte(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	writeBytes(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	close() {
	}
}
haxe_io_Output.__name__ = "haxe.io.Output";
Object.assign(haxe_io_Output.prototype, {
	__class__: haxe_io_Output
});
class _$Sys_FileOutput extends haxe_io_Output {
	constructor(fd) {
		super();
		this.fd = fd;
	}
	writeByte(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	writeBytes(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	writeString(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	flush() {
		js_node_Fs.fsyncSync(this.fd);
	}
	close() {
		js_node_Fs.closeSync(this.fd);
	}
}
_$Sys_FileOutput.__name__ = "_Sys.FileOutput";
_$Sys_FileOutput.__super__ = haxe_io_Output;
Object.assign(_$Sys_FileOutput.prototype, {
	__class__: _$Sys_FileOutput
	,fd: null
});
class haxe_io_Input {
	readByte() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	readBytes(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			haxe_CallStack.lastException = eof;
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	close() {
	}
}
haxe_io_Input.__name__ = "haxe.io.Input";
Object.assign(haxe_io_Input.prototype, {
	__class__: haxe_io_Input
});
class _$Sys_FileInput extends haxe_io_Input {
	constructor(fd) {
		super();
		this.fd = fd;
	}
	readByte() {
		var buf = new js_node_buffer_Buffer(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
		return buf[0];
	}
	readBytes(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			if(e1.code == "EOF") {
				throw new js__$Boot_HaxeError(new haxe_io_Eof());
			} else {
				throw new js__$Boot_HaxeError(haxe_io_Error.Custom(e1));
			}
		}
	}
	close() {
		js_node_Fs.closeSync(this.fd);
	}
}
_$Sys_FileInput.__name__ = "_Sys.FileInput";
_$Sys_FileInput.__super__ = haxe_io_Input;
Object.assign(_$Sys_FileInput.prototype, {
	__class__: _$Sys_FileInput
	,fd: null
});
var ValueType = $hxEnums["ValueType"] = { __ename__ : "ValueType", __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
class Type {
	static getEnum(o) {
		if(o == null) {
			return null;
		}
		return $hxEnums[o.__enum__];
	}
	static getInstanceFields(c) {
		var result = [];
		while(c != null) {
			var _g = 0;
			var _g1 = Object.getOwnPropertyNames(c.prototype);
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				switch(name) {
				case "__class__":case "__properties__":case "constructor":
					break;
				default:
					if(result.indexOf(name) == -1) {
						result.push(name);
					}
				}
			}
			c = c.__super__;
		}
		return result;
	}
	static typeof(v) {
		switch(typeof(v)) {
		case "boolean":
			return ValueType.TBool;
		case "function":
			if(v.__name__ || v.__ename__) {
				return ValueType.TObject;
			}
			return ValueType.TFunction;
		case "number":
			if(Math.ceil(v) == v % 2147483648.0) {
				return ValueType.TInt;
			}
			return ValueType.TFloat;
		case "object":
			if(v == null) {
				return ValueType.TNull;
			}
			var e = v.__enum__;
			if(e != null) {
				return ValueType.TEnum($hxEnums[e]);
			}
			var c = js_Boot.getClass(v);
			if(c != null) {
				return ValueType.TClass(c);
			}
			return ValueType.TObject;
		case "string":
			return ValueType.TClass(String);
		case "undefined":
			return ValueType.TNull;
		default:
			return ValueType.TUnknown;
		}
	}
	static enumParameters(e) {
		var enm = $hxEnums[e.__enum__];
		var ctorName = enm.__constructs__[e._hx_index];
		var params = enm[ctorName].__params__;
		if(params != null) {
			var _g = [];
			var _g1 = 0;
			while(_g1 < params.length) {
				var p = params[_g1];
				++_g1;
				_g.push(e[p]);
			}
			return _g;
		} else {
			return [];
		}
	}
}
Type.__name__ = "Type";
class asys_io_File {
	static readStream(path,binary) {
		if(binary == null) {
			binary = true;
		}
		var r = js_node_Fs.createReadStream(path);
		var options = null;
		if(options == null) {
			options = { };
		}
		return tink_io_nodejs_NodejsSource.wrap("asys read stream",r,options.chunkSize,options.onEnd);
	}
	static writeStream(path,binary) {
		if(binary == null) {
			binary = true;
		}
		return tink_io_nodejs_NodejsSink.wrap("asys write stream",js_node_Fs.createWriteStream(path));
	}
	static getContent(path) {
		var trigger = new tink_core_FutureTrigger();
		js_node_Fs.readFile(path,"utf8",function(err,data) {
			var tmp = err == null ? tink_core_Outcome.Success(data) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 40, className : "asys.io.File", methodName : "getContent"}));
			trigger.trigger(tmp);
		});
		return trigger;
	}
	static saveContent(path,content) {
		var trigger = new tink_core_FutureTrigger();
		js_node_Fs.writeFile(path,content,"utf8",function(err) {
			var tmp = err == null ? tink_core_Outcome.Success(tink_core_Noise.Noise) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 51, className : "asys.io.File", methodName : "saveContent"}));
			trigger.trigger(tmp);
		});
		return trigger;
	}
	static getBytes(path) {
		var trigger = new tink_core_FutureTrigger();
		js_node_Fs.readFile(path,function(err,buffer) {
			var tmp = err == null ? tink_core_Outcome.Success(js_node_buffer__$Buffer_Helper.bytesOfBuffer(buffer)) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 62, className : "asys.io.File", methodName : "getBytes"}));
			trigger.trigger(tmp);
		});
		return trigger;
	}
	static saveBytes(path,bytes) {
		var trigger = new tink_core_FutureTrigger();
		var data = bytes.b;
		js_node_Fs.writeFile(path,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,bytes.length),function(err) {
			var tmp = err == null ? tink_core_Outcome.Success(tink_core_Noise.Noise) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 73, className : "asys.io.File", methodName : "saveBytes"}));
			trigger.trigger(tmp);
		});
		return trigger;
	}
	static read(path,binary) {
		if(binary == null) {
			binary = true;
		}
		var trigger = new tink_core_FutureTrigger();
		js_node_Fs.open(path,"r",function(err,fd) {
			var tmp = err == null ? tink_core_Outcome.Success(new asys_io_FileInput(fd)) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 84, className : "asys.io.File", methodName : "read"}));
			trigger.trigger(tmp);
		});
		return trigger;
	}
	static write(path,binary) {
		if(binary == null) {
			binary = true;
		}
		var trigger = new tink_core_FutureTrigger();
		js_node_Fs.open(path,"w",function(err,fd) {
			var tmp = err == null ? tink_core_Outcome.Success(new asys_io_FileOutput(fd)) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 95, className : "asys.io.File", methodName : "write"}));
			trigger.trigger(tmp);
		});
		return trigger;
	}
	static append(path,binary) {
		if(binary == null) {
			binary = true;
		}
		var trigger = new tink_core_FutureTrigger();
		js_node_Fs.open(path,"a",function(err,fd) {
			var tmp = err == null ? tink_core_Outcome.Success(new asys_io_FileOutput(fd)) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 106, className : "asys.io.File", methodName : "append"}));
			trigger.trigger(tmp);
		});
		return trigger;
	}
	static copy(srcPath,dstPath) {
		var trigger = new tink_core_FutureTrigger();
		var called = false;
		var done = function(err) {
			if(called) {
				return;
			}
			var done1 = err == null ? tink_core_Outcome.Success(tink_core_Noise.Noise) : tink_core_Outcome.Failure(tink_core_TypedError.withData(null,err.message,err,{ fileName : "asys/io/File.hx", lineNumber : 119, className : "asys.io.File", methodName : "copy"}));
			trigger.trigger(done1);
			called = true;
		};
		var rd = js_node_Fs.createReadStream(srcPath);
		rd.on("error",done);
		var wr = js_node_Fs.createWriteStream(dstPath);
		wr.on("error",done);
		wr.on("close",function(ex) {
			done();
		});
		rd.pipe(wr);
		return trigger;
	}
}
asys_io_File.__name__ = "asys.io.File";
class asys_io_FileInput extends haxe_io_Input {
	constructor(fd) {
		super();
		this.position = 0;
		this.bufferPos = 0;
		this.bufferSize = 4;
		this.fd = fd;
		this.buffer = new js_node_buffer_Buffer(this.bufferSize);
	}
	readByte() {
		if(this.bufferPos == this.bufferSize) {
			this.bufferPos = 0;
		}
		if(this.bufferPos == 0) {
			js_node_Fs.readSync(this.fd,this.buffer,0,this.bufferSize,this.position);
		}
		this.position++;
		return this.buffer[this.bufferPos++];
	}
	readBytes(s,pos,len) {
		this.bufferPos = 0;
		var b = new js_node_buffer_Buffer(len);
		var amount = js_node_Fs.readSync(this.fd,b,0,len,this.position);
		s.blit(pos,js_node_buffer__$Buffer_Helper.bytesOfBuffer(b),0,len);
		this.position += len;
		return amount;
	}
	seek(length,pos) {
		this.bufferPos = 0;
		switch(pos._hx_index) {
		case 0:
			this.position = length;
			break;
		case 1:
			this.position += length;
			break;
		case 2:
			throw new js__$Boot_HaxeError("Not implemented");
		}
	}
	tell() {
		return this.position;
	}
	eof() {
		return this.buffer.length < this.bufferSize;
	}
	close() {
		this.buffer = null;
		js_node_Fs.closeSync(this.fd);
	}
}
asys_io_FileInput.__name__ = "asys.io.FileInput";
asys_io_FileInput.__super__ = haxe_io_Input;
Object.assign(asys_io_FileInput.prototype, {
	__class__: asys_io_FileInput
	,bufferSize: null
	,bufferPos: null
	,fd: null
	,position: null
	,buffer: null
});
class asys_io_FileOutput extends haxe_io_Output {
	constructor(fd) {
		super();
		this.buffer = new js_node_buffer_Buffer(1);
		this.position = 0;
		this.fd = fd;
	}
	writeByte(c) {
		this.buffer[0] = c;
		js_node_Fs.writeSync(this.fd,this.buffer,0,1,this.position++);
	}
	writeBytes(s,pos,len) {
		var data = s.b;
		var amount = js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
		this.position += len;
		return amount;
	}
	seek(length,pos) {
		switch(pos._hx_index) {
		case 0:
			this.position = 0;
			break;
		case 1:
			this.position += length;
			break;
		case 2:
			throw new js__$Boot_HaxeError("Not implemented");
		}
	}
	tell() {
		return this.position;
	}
	close() {
		js_node_Fs.closeSync(this.fd);
	}
}
asys_io_FileOutput.__name__ = "asys.io.FileOutput";
asys_io_FileOutput.__super__ = haxe_io_Output;
Object.assign(asys_io_FileOutput.prototype, {
	__class__: asys_io_FileOutput
	,fd: null
	,position: null
	,buffer: null
});
var asys_io_FileSeek = $hxEnums["asys.io.FileSeek"] = { __ename__ : "asys.io.FileSeek", __constructs__ : ["SeekBegin","SeekCur","SeekEnd"]
	,SeekBegin: {_hx_index:0,__enum__:"asys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_index:1,__enum__:"asys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_index:2,__enum__:"asys.io.FileSeek",toString:$estr}
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : "haxe.StackItem", __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
class haxe_CallStack {
	static getStack(e) {
		if(e == null) {
			return [];
		}
		var oldValue = Error.prepareStackTrace;
		Error.prepareStackTrace = function(error,callsites) {
			var stack = [];
			var _g = 0;
			while(_g < callsites.length) {
				var site = callsites[_g];
				++_g;
				if(haxe_CallStack.wrapCallSite != null) {
					site = haxe_CallStack.wrapCallSite(site);
				}
				var method = null;
				var fullName = site.getFunctionName();
				if(fullName != null) {
					var idx = fullName.lastIndexOf(".");
					if(idx >= 0) {
						var className = HxOverrides.substr(fullName,0,idx);
						var methodName = HxOverrides.substr(fullName,idx + 1,null);
						method = haxe_StackItem.Method(className,methodName);
					}
				}
				var fileName = site.getFileName();
				var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
				if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
					fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
				}
				stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
			}
			return stack;
		};
		var a = haxe_CallStack.makeStack(e.stack);
		Error.prepareStackTrace = oldValue;
		return a;
	}
	static exceptionStack() {
		return haxe_CallStack.getStack(haxe_CallStack.lastException);
	}
	static toString(stack) {
		var b = new StringBuf();
		var _g = 0;
		while(_g < stack.length) {
			var s = stack[_g];
			++_g;
			b.b += "\nCalled from ";
			haxe_CallStack.itemToString(b,s);
		}
		return b.b;
	}
	static itemToString(b,s) {
		switch(s._hx_index) {
		case 0:
			b.b += "a C function";
			break;
		case 1:
			var m = s.m;
			b.b += "module ";
			b.b += m == null ? "null" : "" + m;
			break;
		case 2:
			var col = s.column;
			var line = s.line;
			var file = s.file;
			var s1 = s.s;
			if(s1 != null) {
				haxe_CallStack.itemToString(b,s1);
				b.b += " (";
			}
			b.b += file == null ? "null" : "" + file;
			b.b += " line ";
			b.b += line == null ? "null" : "" + line;
			if(col != null) {
				b.b += " column ";
				b.b += col == null ? "null" : "" + col;
			}
			if(s1 != null) {
				b.b += ")";
			}
			break;
		case 3:
			var meth = s.method;
			var cname = s.classname;
			b.b += cname == null ? "null" : "" + cname;
			b.b += ".";
			b.b += meth == null ? "null" : "" + meth;
			break;
		case 4:
			var n = s.v;
			b.b += "local function #";
			b.b += n == null ? "null" : "" + n;
			break;
		}
	}
	static makeStack(s) {
		if(s == null) {
			return [];
		} else if(typeof(s) == "string") {
			var stack = s.split("\n");
			if(stack[0] == "Error") {
				stack.shift();
			}
			var m = [];
			var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
			var _g = 0;
			while(_g < stack.length) {
				var line = stack[_g];
				++_g;
				if(rie10.match(line)) {
					var path = rie10.matched(1).split(".");
					var meth = path.pop();
					var file = rie10.matched(2);
					var line1 = Std.parseInt(rie10.matched(3));
					var column = Std.parseInt(rie10.matched(4));
					m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
				} else {
					m.push(haxe_StackItem.Module(StringTools.trim(line)));
				}
			}
			return m;
		} else {
			return s;
		}
	}
}
haxe_CallStack.__name__ = "haxe.CallStack";
class haxe_IMap {
}
haxe_IMap.__name__ = "haxe.IMap";
Object.assign(haxe_IMap.prototype, {
	__class__: haxe_IMap
	,get: null
	,keys: null
});
class haxe_Log {
	static formatOutput(v,infos) {
		var str = Std.string(v);
		if(infos == null) {
			return str;
		}
		var pstr = infos.fileName + ":" + infos.lineNumber;
		if(infos.customParams != null) {
			var _g = 0;
			var _g1 = infos.customParams;
			while(_g < _g1.length) {
				var v1 = _g1[_g];
				++_g;
				str += ", " + Std.string(v1);
			}
		}
		return pstr + ": " + str;
	}
	static trace(v,infos) {
		var str = haxe_Log.formatOutput(v,infos);
		if(typeof(console) != "undefined" && console.log != null) {
			console.log(str);
		}
	}
}
haxe_Log.__name__ = "haxe.Log";
var haxe__$Template_TemplateExpr = $hxEnums["haxe._Template.TemplateExpr"] = { __ename__ : "haxe._Template.TemplateExpr", __constructs__ : ["OpVar","OpExpr","OpIf","OpStr","OpBlock","OpForeach","OpMacro"]
	,OpVar: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,OpExpr: ($_=function(expr) { return {_hx_index:1,expr:expr,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr"],$_)
	,OpIf: ($_=function(expr,eif,eelse) { return {_hx_index:2,expr:expr,eif:eif,eelse:eelse,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","eif","eelse"],$_)
	,OpStr: ($_=function(str) { return {_hx_index:3,str:str,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["str"],$_)
	,OpBlock: ($_=function(l) { return {_hx_index:4,l:l,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["l"],$_)
	,OpForeach: ($_=function(expr,loop) { return {_hx_index:5,expr:expr,loop:loop,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","loop"],$_)
	,OpMacro: ($_=function(name,params) { return {_hx_index:6,name:name,params:params,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["name","params"],$_)
};
class haxe_Template {
	constructor(str) {
		var tokens = this.parseTokens(str);
		this.expr = this.parseBlock(tokens);
		if(!tokens.isEmpty()) {
			throw new js__$Boot_HaxeError("Unexpected '" + Std.string(tokens.first().s) + "'");
		}
	}
	execute(context,macros) {
		this.macros = macros == null ? { } : macros;
		this.context = context;
		this.stack = new haxe_ds_List();
		this.buf = new StringBuf();
		this.run(this.expr);
		return this.buf.b;
	}
	resolve(v) {
		if(v == "__current__") {
			return this.context;
		}
		var value = Reflect.getProperty(this.context,v);
		if(value != null || Object.prototype.hasOwnProperty.call(this.context,v)) {
			return value;
		}
		var _g_head = this.stack.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var ctx = val;
			value = Reflect.getProperty(ctx,v);
			if(value != null || Object.prototype.hasOwnProperty.call(ctx,v)) {
				return value;
			}
		}
		return Reflect.field(haxe_Template.globals,v);
	}
	parseTokens(data) {
		var tokens = new haxe_ds_List();
		while(haxe_Template.splitter.match(data)) {
			var p = haxe_Template.splitter.matchedPos();
			if(p.pos > 0) {
				tokens.add({ p : HxOverrides.substr(data,0,p.pos), s : true, l : null});
			}
			if(HxOverrides.cca(data,p.pos) == 58) {
				tokens.add({ p : HxOverrides.substr(data,p.pos + 2,p.len - 4), s : false, l : null});
				data = haxe_Template.splitter.matchedRight();
				continue;
			}
			var parp = p.pos + p.len;
			var npar = 1;
			var params = [];
			var part = "";
			while(true) {
				var c = HxOverrides.cca(data,parp);
				++parp;
				if(c == 40) {
					++npar;
				} else if(c == 41) {
					--npar;
					if(npar <= 0) {
						break;
					}
				} else if(c == null) {
					throw new js__$Boot_HaxeError("Unclosed macro parenthesis");
				}
				if(c == 44 && npar == 1) {
					params.push(part);
					part = "";
				} else {
					part += String.fromCodePoint(c);
				}
			}
			params.push(part);
			tokens.add({ p : haxe_Template.splitter.matched(2), s : false, l : params});
			data = HxOverrides.substr(data,parp,data.length - parp);
		}
		if(data.length > 0) {
			tokens.add({ p : data, s : true, l : null});
		}
		return tokens;
	}
	parseBlock(tokens) {
		var l = new haxe_ds_List();
		while(true) {
			var t = tokens.first();
			if(t == null) {
				break;
			}
			if(!t.s && (t.p == "end" || t.p == "else" || HxOverrides.substr(t.p,0,7) == "elseif ")) {
				break;
			}
			l.add(this.parse(tokens));
		}
		if(l.length == 1) {
			return l.first();
		}
		return haxe__$Template_TemplateExpr.OpBlock(l);
	}
	parse(tokens) {
		var t = tokens.pop();
		var p = t.p;
		if(t.s) {
			return haxe__$Template_TemplateExpr.OpStr(p);
		}
		if(t.l != null) {
			var pe = new haxe_ds_List();
			var _g = 0;
			var _g1 = t.l;
			while(_g < _g1.length) {
				var p1 = _g1[_g];
				++_g;
				pe.add(this.parseBlock(this.parseTokens(p1)));
			}
			return haxe__$Template_TemplateExpr.OpMacro(p,pe);
		}
		if(HxOverrides.substr(p,0,3) == "if ") {
			p = HxOverrides.substr(p,3,p.length - 3);
			var e = this.parseExpr(p);
			var eif = this.parseBlock(tokens);
			var t1 = tokens.first();
			var eelse;
			if(t1 == null) {
				throw new js__$Boot_HaxeError("Unclosed 'if'");
			}
			if(t1.p == "end") {
				tokens.pop();
				eelse = null;
			} else if(t1.p == "else") {
				tokens.pop();
				eelse = this.parseBlock(tokens);
				t1 = tokens.pop();
				if(t1 == null || t1.p != "end") {
					throw new js__$Boot_HaxeError("Unclosed 'else'");
				}
			} else {
				t1.p = HxOverrides.substr(t1.p,4,t1.p.length - 4);
				eelse = this.parse(tokens);
			}
			return haxe__$Template_TemplateExpr.OpIf(e,eif,eelse);
		}
		if(HxOverrides.substr(p,0,8) == "foreach ") {
			p = HxOverrides.substr(p,8,p.length - 8);
			var e1 = this.parseExpr(p);
			var efor = this.parseBlock(tokens);
			var t2 = tokens.pop();
			if(t2 == null || t2.p != "end") {
				throw new js__$Boot_HaxeError("Unclosed 'foreach'");
			}
			return haxe__$Template_TemplateExpr.OpForeach(e1,efor);
		}
		if(haxe_Template.expr_splitter.match(p)) {
			return haxe__$Template_TemplateExpr.OpExpr(this.parseExpr(p));
		}
		return haxe__$Template_TemplateExpr.OpVar(p);
	}
	parseExpr(data) {
		var l = new haxe_ds_List();
		var expr = data;
		while(haxe_Template.expr_splitter.match(data)) {
			var p = haxe_Template.expr_splitter.matchedPos();
			var k = p.pos + p.len;
			if(p.pos != 0) {
				l.add({ p : HxOverrides.substr(data,0,p.pos), s : true});
			}
			var p1 = haxe_Template.expr_splitter.matched(0);
			l.add({ p : p1, s : p1.indexOf("\"") >= 0});
			data = haxe_Template.expr_splitter.matchedRight();
		}
		if(data.length != 0) {
			l.add({ p : data, s : true});
		}
		var e;
		try {
			e = this.makeExpr(l);
			if(!l.isEmpty()) {
				throw new js__$Boot_HaxeError(l.first().p);
			}
		} catch( s ) {
			haxe_CallStack.lastException = s;
			var s1 = ((s) instanceof js__$Boot_HaxeError) ? s.val : s;
			if(typeof(s1) == "string") {
				throw new js__$Boot_HaxeError("Unexpected '" + s1 + "' in " + expr);
			} else {
				throw s;
			}
		}
		return function() {
			try {
				return e();
			} catch( exc ) {
				haxe_CallStack.lastException = exc;
				throw new js__$Boot_HaxeError("Error : " + Std.string(((exc) instanceof js__$Boot_HaxeError) ? exc.val : exc) + " in " + expr);
			}
		};
	}
	makeConst(v) {
		haxe_Template.expr_trim.match(v);
		v = haxe_Template.expr_trim.matched(1);
		if(HxOverrides.cca(v,0) == 34) {
			var str = HxOverrides.substr(v,1,v.length - 2);
			return function() {
				return str;
			};
		}
		if(haxe_Template.expr_int.match(v)) {
			var i = Std.parseInt(v);
			return function() {
				return i;
			};
		}
		if(haxe_Template.expr_float.match(v)) {
			var f = parseFloat(v);
			return function() {
				return f;
			};
		}
		var me = this;
		return function() {
			return me.resolve(v);
		};
	}
	makePath(e,l) {
		var p = l.first();
		if(p == null || p.p != ".") {
			return e;
		}
		l.pop();
		var field = l.pop();
		if(field == null || !field.s) {
			throw new js__$Boot_HaxeError(field.p);
		}
		var f = field.p;
		haxe_Template.expr_trim.match(f);
		f = haxe_Template.expr_trim.matched(1);
		return this.makePath(function() {
			return Reflect.field(e(),f);
		},l);
	}
	makeExpr(l) {
		return this.makePath(this.makeExpr2(l),l);
	}
	makeExpr2(l) {
		var p = l.pop();
		if(p == null) {
			throw new js__$Boot_HaxeError("<eof>");
		}
		if(p.s) {
			return this.makeConst(p.p);
		}
		switch(p.p) {
		case "!":
			var e = this.makeExpr(l);
			return function() {
				var v = e();
				if(v != null) {
					return v == false;
				} else {
					return true;
				}
			};
		case "(":
			var e1 = this.makeExpr(l);
			var p1 = l.pop();
			if(p1 == null || p1.s) {
				throw new js__$Boot_HaxeError(p1);
			}
			if(p1.p == ")") {
				return e1;
			}
			var e2 = this.makeExpr(l);
			var p2 = l.pop();
			if(p2 == null || p2.p != ")") {
				throw new js__$Boot_HaxeError(p2);
			}
			switch(p1.p) {
			case "!=":
				return function() {
					return e1() != e2();
				};
			case "&&":
				return function() {
					return e1() && e2();
				};
			case "*":
				return function() {
					return e1() * e2();
				};
			case "+":
				return function() {
					return e1() + e2();
				};
			case "-":
				return function() {
					return e1() - e2();
				};
			case "/":
				return function() {
					return e1() / e2();
				};
			case "<":
				return function() {
					return e1() < e2();
				};
			case "<=":
				return function() {
					return e1() <= e2();
				};
			case "==":
				return function() {
					return e1() == e2();
				};
			case ">":
				return function() {
					return e1() > e2();
				};
			case ">=":
				return function() {
					return e1() >= e2();
				};
			case "||":
				return function() {
					return e1() || e2();
				};
			default:
				throw new js__$Boot_HaxeError("Unknown operation " + p1.p);
			}
			break;
		case "-":
			var e3 = this.makeExpr(l);
			return function() {
				return -e3();
			};
		}
		throw new js__$Boot_HaxeError(p.p);
	}
	run(e) {
		switch(e._hx_index) {
		case 0:
			var v = e.v;
			var _this = this.buf;
			var x = Std.string(this.resolve(v));
			_this.b += Std.string(x);
			break;
		case 1:
			var e1 = e.expr;
			var _this1 = this.buf;
			var x1 = Std.string(e1());
			_this1.b += Std.string(x1);
			break;
		case 2:
			var eelse = e.eelse;
			var eif = e.eif;
			var e2 = e.expr;
			var v1 = e2();
			if(v1 == null || v1 == false) {
				if(eelse != null) {
					this.run(eelse);
				}
			} else {
				this.run(eif);
			}
			break;
		case 3:
			var str = e.str;
			this.buf.b += str == null ? "null" : "" + str;
			break;
		case 4:
			var l = e.l;
			var _g_head = l.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var e3 = val;
				this.run(e3);
			}
			break;
		case 5:
			var loop = e.loop;
			var e4 = e.expr;
			var v2 = e4();
			try {
				var x2 = $getIterator(v2);
				if(x2.hasNext == null) {
					throw new js__$Boot_HaxeError(null);
				}
				v2 = x2;
			} catch( e5 ) {
				haxe_CallStack.lastException = e5;
				var e6 = ((e5) instanceof js__$Boot_HaxeError) ? e5.val : e5;
				try {
					if(v2.hasNext == null) {
						throw new js__$Boot_HaxeError(null);
					}
				} catch( e7 ) {
					haxe_CallStack.lastException = e7;
					var e8 = ((e7) instanceof js__$Boot_HaxeError) ? e7.val : e7;
					throw new js__$Boot_HaxeError("Cannot iter on " + Std.string(v2));
				}
			}
			this.stack.push(this.context);
			var v3 = v2;
			var ctx = v3;
			while(ctx.hasNext()) {
				var ctx1 = ctx.next();
				this.context = ctx1;
				this.run(loop);
			}
			this.context = this.stack.pop();
			break;
		case 6:
			var params = e.params;
			var m = e.name;
			var v4 = Reflect.field(this.macros,m);
			var pl = [];
			var old = this.buf;
			pl.push($bind(this,this.resolve));
			var _g_head1 = params.h;
			while(_g_head1 != null) {
				var val1 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var p = val1;
				if(p._hx_index == 0) {
					var v5 = p.v;
					pl.push(this.resolve(v5));
				} else {
					this.buf = new StringBuf();
					this.run(p);
					pl.push(this.buf.b);
				}
			}
			this.buf = old;
			try {
				var _this2 = this.buf;
				var x3 = Std.string(v4.apply(this.macros,pl));
				_this2.b += Std.string(x3);
			} catch( e9 ) {
				haxe_CallStack.lastException = e9;
				var e10 = ((e9) instanceof js__$Boot_HaxeError) ? e9.val : e9;
				var plstr;
				try {
					plstr = pl.join(",");
				} catch( e11 ) {
					haxe_CallStack.lastException = e11;
					var e12 = ((e11) instanceof js__$Boot_HaxeError) ? e11.val : e11;
					plstr = "???";
				}
				var msg = "Macro call " + m + "(" + plstr + ") failed (" + Std.string(e10) + ")";
				throw new js__$Boot_HaxeError(msg);
			}
			break;
		}
	}
}
haxe_Template.__name__ = "haxe.Template";
Object.assign(haxe_Template.prototype, {
	__class__: haxe_Template
	,expr: null
	,context: null
	,macros: null
	,stack: null
	,buf: null
});
class haxe_Timer {
	constructor(time_ms) {
		var me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
	static delay(f,time_ms) {
		var t = new haxe_Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}
}
haxe_Timer.__name__ = "haxe.Timer";
Object.assign(haxe_Timer.prototype, {
	__class__: haxe_Timer
	,id: null
});
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : "haxe.ds.Either", __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
class haxe_ds_List {
	constructor() {
		this.length = 0;
	}
	add(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	push(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	first() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	pop() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	isEmpty() {
		return this.h == null;
	}
	remove(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	iterator() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	toString() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b += "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
}
haxe_ds_List.__name__ = "haxe.ds.List";
Object.assign(haxe_ds_List.prototype, {
	__class__: haxe_ds_List
	,h: null
	,q: null
	,length: null
});
class haxe_ds__$List_ListNode {
	constructor(item,next) {
		this.item = item;
		this.next = next;
	}
}
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
Object.assign(haxe_ds__$List_ListNode.prototype, {
	__class__: haxe_ds__$List_ListNode
	,item: null
	,next: null
});
class haxe_ds__$List_ListIterator {
	constructor(head) {
		this.head = head;
	}
	hasNext() {
		return this.head != null;
	}
	next() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
}
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
Object.assign(haxe_ds__$List_ListIterator.prototype, {
	__class__: haxe_ds__$List_ListIterator
	,head: null
});
class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
	set(key,value) {
		var id = key.__id__ || (key.__id__ = $global.$haxeUID++);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	get(key) {
		return this.h[key.__id__];
	}
	keys() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
}
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_ObjectMap.prototype, {
	__class__: haxe_ds_ObjectMap
	,h: null
});
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : "haxe.ds.Option", __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
class haxe_ds_StringMap {
	constructor() {
		this.h = { };
	}
	get(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	setReserved(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	getReserved(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	existsReserved(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	keys() {
		return HxOverrides.iter(this.arrayKeys());
	}
	arrayKeys() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
}
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
	,h: null
	,rh: null
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	blit(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	sub(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	toString() {
		return this.getString(0,this.length);
	}
	toHex() {
		var s_b = "";
		var chars = [];
		var str = "0123456789abcdef";
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var i = _g++;
			chars.push(HxOverrides.cca(str,i));
		}
		var _g2 = 0;
		var _g3 = this.length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var c = this.b[i1];
			s_b += String.fromCodePoint(chars[c >> 4]);
			s_b += String.fromCodePoint(chars[c & 15]);
		}
		return s_b;
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			var buf = new Uint8Array(s.length << 1);
			var _g = 0;
			var _g1 = s.length;
			while(_g < _g1) {
				var i = _g++;
				var c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		var a = [];
		var i1 = 0;
		while(i1 < s.length) {
			var c1 = s.charCodeAt(i1++);
			if(55296 <= c1 && c1 <= 56319) {
				c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
			}
			if(c1 <= 127) {
				a.push(c1);
			} else if(c1 <= 2047) {
				a.push(192 | c1 >> 6);
				a.push(128 | c1 & 63);
			} else if(c1 <= 65535) {
				a.push(224 | c1 >> 12);
				a.push(128 | c1 >> 6 & 63);
				a.push(128 | c1 & 63);
			} else {
				a.push(240 | c1 >> 18);
				a.push(128 | c1 >> 12 & 63);
				a.push(128 | c1 >> 6 & 63);
				a.push(128 | c1 & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
	static ofData(b) {
		var hb = b.hxBytes;
		if(hb != null) {
			return hb;
		}
		return new haxe_io_Bytes(b);
	}
}
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
	,length: null
	,b: null
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : "haxe.io.Encoding", __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
class haxe_io_Eof {
	constructor() {
	}
	toString() {
		return "Eof";
	}
}
haxe_io_Eof.__name__ = "haxe.io.Eof";
Object.assign(haxe_io_Eof.prototype, {
	__class__: haxe_io_Eof
});
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : "haxe.io.Error", __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class haxe_io_Path {
	static normalize(path) {
		var slash = "/";
		path = path.split("\\").join(slash);
		if(path == slash) {
			return slash;
		}
		var target = [];
		var _g = 0;
		var _g1 = path.split(slash);
		while(_g < _g1.length) {
			var token = _g1[_g];
			++_g;
			if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
				target.pop();
			} else if(token == "") {
				if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
					target.push(token);
				}
			} else if(token != ".") {
				target.push(token);
			}
		}
		var tmp = target.join(slash);
		var acc_b = "";
		var colon = false;
		var slashes = false;
		var _g2_offset = 0;
		var _g2_s = tmp;
		while(_g2_offset < _g2_s.length) {
			var s = _g2_s;
			var index = _g2_offset++;
			var c = s.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
			}
			var c1 = c;
			if(c1 >= 65536) {
				++_g2_offset;
			}
			var c2 = c1;
			switch(c2) {
			case 47:
				if(!colon) {
					slashes = true;
				} else {
					var i = c2;
					colon = false;
					if(slashes) {
						acc_b += "/";
						slashes = false;
					}
					acc_b += String.fromCodePoint(i);
				}
				break;
			case 58:
				acc_b += ":";
				colon = true;
				break;
			default:
				var i1 = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i1);
			}
		}
		return acc_b;
	}
	static removeTrailingSlashes(path) {
		_hx_loop1: while(true) {
			var _g = HxOverrides.cca(path,path.length - 1);
			if(_g == null) {
				break;
			} else {
				switch(_g) {
				case 47:case 92:
					path = HxOverrides.substr(path,0,-1);
					break;
				default:
					break _hx_loop1;
				}
			}
		}
		return path;
	}
}
haxe_io_Path.__name__ = "haxe.io.Path";
class haxe_rtti_Meta {
	static getMeta(t) {
		return t.__meta__;
	}
	static getFields(t) {
		var meta = haxe_rtti_Meta.getMeta(t);
		if(meta == null || meta.fields == null) {
			return { };
		} else {
			return meta.fields;
		}
	}
}
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
class js__$Boot_HaxeError extends Error {
	constructor(val) {
		super();
		this.val = val;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,js__$Boot_HaxeError);
		}
	}
	static wrap(val) {
		if(((val) instanceof Error)) {
			return val;
		} else {
			return new js__$Boot_HaxeError(val);
		}
	}
}
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.__super__ = Error;
Object.assign(js__$Boot_HaxeError.prototype, {
	__class__: js__$Boot_HaxeError
	,val: null
});
class js_Boot {
	static getClass(o) {
		if(((o) instanceof Array) && o.__enum__ == null) {
			return Array;
		} else {
			var cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			var name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		var t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				var e = $hxEnums[o.__enum__];
				var n = e.__constructs__[o._hx_index];
				var con = e[n];
				if(con.__params__) {
					s += "\t";
					var tmp = n + "(";
					var _g = [];
					var _g1 = 0;
					var _g2 = con.__params__;
					while(_g1 < _g2.length) {
						var p = _g2[_g1];
						++_g1;
						_g.push(js_Boot.__string_rec(o[p],s));
					}
					return tmp + _g.join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				var str = "[";
				s += "\t";
				var _g3 = 0;
				var _g11 = o.length;
				while(_g3 < _g11) {
					var i = _g3++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			var tostr;
			try {
				tostr = o.toString;
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
				var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				var s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			var str1 = "{\n";
			s += "\t";
			var hasp = o.hasOwnProperty != null;
			var k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str1.length != 2) {
				str1 += ", \n";
			}
			str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str1 += "\n" + s + "}";
			return str1;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
			var intf = cc.__interfaces__;
			var _g = 0;
			var _g1 = intf.length;
			while(_g < _g1) {
				var i = _g++;
				var i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(((o) instanceof cl)) {
						return true;
					}
					if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			if(o.__enum__ != null) {
				return $hxEnums[o.__enum__] == cl;
			} else {
				return false;
			}
		}
	}
	static __cast(o,t) {
		if(o == null || js_Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		var name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = "js.Boot";
var js_node_Fs = require("fs");
var js_node_buffer_Buffer = require("buffer").Buffer;
class js_node_buffer__$Buffer_Helper {
	static bytesOfBuffer(b) {
		var o = Object.create(haxe_io_Bytes.prototype);
		o.length = b.byteLength;
		o.b = b;
		b.bufferValue = b;
		b.hxBytes = o;
		b.bytes = b;
		return o;
	}
}
js_node_buffer__$Buffer_Helper.__name__ = "js.node.buffer._Buffer.Helper";
var js_node_stream_PassThrough = require("stream").PassThrough;
class marc_SimpleMd {
	constructor() {
		this.data = { assetsPath : ""};
	}
	setMd(md) {
		this.md = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(md)));
		return this;
	}
	setMdFile(path) {
		this.md = asys_io_File.getContent(path);
		return this;
	}
	withData(obj) {
		this.data = obj;
		return this;
	}
	withLayoutVar(f) {
		this.layout = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f)));
		return this;
	}
	withLayoutFile(path) {
		this.layout = asys_io_File.getContent(path);
		return this;
	}
	withAssets(path) {
		this.assetsPath = haxe_io_Path.removeTrailingSlashes(haxe_io_Path.normalize(path));
		return this;
	}
	render() {
		var _gthis = this;
		return tink_core__$Promise_Promise_$Impl_$.next(tink_core__$Promise_Promise_$Impl_$.next(tink_core__$Promise_Promise_$Impl_$.next(Debug.Log(this.md,null,{ fileName : "src/marc/SimpleMd.hx", lineNumber : 42, className : "marc.SimpleMd", methodName : "render"}),function(_md) {
			var template = new haxe_Template(_md);
			var ex = template.execute(Debug.Log(_gthis.data,null,{ fileName : "src/marc/SimpleMd.hx", lineNumber : 44, className : "marc.SimpleMd", methodName : "render"}));
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(ex)));
		}),function(ex1) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(Markdown.markdownToHtml(ex1))));
		}),function(ex2) {
			if(_gthis.layout != null) {
				return tink_core__$Promise_Promise_$Impl_$.next(_gthis.layout,function(lay) {
					var template2 = new haxe_Template(lay);
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(template2.execute({ content : ex2, assetsPath : _gthis.assetsPath}))));
				});
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(ex2)));
			}
		});
	}
}
marc_SimpleMd.__name__ = "marc.SimpleMd";
Object.assign(marc_SimpleMd.prototype, {
	__class__: marc_SimpleMd
	,md: null
	,layout: null
	,data: null
	,assetsPath: null
});
class markdown_Node {
}
markdown_Node.__name__ = "markdown.Node";
Object.assign(markdown_Node.prototype, {
	__class__: markdown_Node
	,accept: null
});
class markdown_NodeVisitor {
}
markdown_NodeVisitor.__name__ = "markdown.NodeVisitor";
Object.assign(markdown_NodeVisitor.prototype, {
	__class__: markdown_NodeVisitor
	,visitText: null
	,visitElementBefore: null
	,visitElementAfter: null
});
class markdown_ElementNode {
	constructor(tag,children) {
		this.tag = tag;
		this.children = children;
		this.attributes = new haxe_ds_StringMap();
	}
	isEmpty() {
		return this.children == null;
	}
	accept(visitor) {
		if(visitor.visitElementBefore(this)) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.accept(visitor);
			}
			visitor.visitElementAfter(this);
		}
	}
	static empty(tag) {
		return new markdown_ElementNode(tag,null);
	}
	static withTag(tag) {
		return new markdown_ElementNode(tag,[]);
	}
	static text(tag,text) {
		return new markdown_ElementNode(tag,[new markdown_TextNode(text)]);
	}
}
markdown_ElementNode.__name__ = "markdown.ElementNode";
markdown_ElementNode.__interfaces__ = [markdown_Node];
Object.assign(markdown_ElementNode.prototype, {
	__class__: markdown_ElementNode
	,tag: null
	,children: null
	,attributes: null
});
class markdown_TextNode {
	constructor(text) {
		this.text = text;
	}
	accept(visitor) {
		visitor.visitText(this);
	}
}
markdown_TextNode.__name__ = "markdown.TextNode";
markdown_TextNode.__interfaces__ = [markdown_Node];
Object.assign(markdown_TextNode.prototype, {
	__class__: markdown_TextNode
	,text: null
});
class markdown_BlockParser {
	constructor(lines,document) {
		this.lines = lines;
		this.document = document;
		this.pos = 0;
	}
	get_current() {
		return this.lines[this.pos];
	}
	get_next() {
		if(this.pos >= this.lines.length - 1) {
			return null;
		}
		return this.lines[this.pos + 1];
	}
	advance() {
		this.pos++;
	}
	get_isDone() {
		return this.pos >= this.lines.length;
	}
	matches(ereg) {
		if(this.pos >= this.lines.length) {
			return false;
		}
		return ereg.match(this.lines[this.pos]);
	}
	matchesNext(ereg) {
		if(this.get_next() == null) {
			return false;
		}
		return ereg.match(this.get_next());
	}
}
markdown_BlockParser.__name__ = "markdown.BlockParser";
Object.assign(markdown_BlockParser.prototype, {
	__class__: markdown_BlockParser
	,lines: null
	,document: null
	,pos: null
	,__properties__: {get_isDone: "get_isDone",get_next: "get_next",get_current: "get_current"}
});
class markdown_BlockSyntax {
	constructor() {
	}
	get_pattern() {
		return null;
	}
	get_canEndBlock() {
		return true;
	}
	canParse(parser) {
		return this.get_pattern().match(parser.lines[parser.pos]);
	}
	parse(parser) {
		return null;
	}
	parseChildLines(parser) {
		var childLines = [];
		while(parser.pos < parser.lines.length) {
			if(!this.get_pattern().match(parser.lines[parser.pos])) {
				break;
			}
			childLines.push(this.get_pattern().matched(1));
			parser.advance();
		}
		return childLines;
	}
	static get_syntaxes() {
		if(markdown_BlockSyntax.syntaxes == null) {
			markdown_BlockSyntax.syntaxes = [new markdown_EmptyBlockSyntax(),new markdown_BlockHtmlSyntax(),new markdown_SetextHeaderSyntax(),new markdown_HeaderSyntax(),new markdown_CodeBlockSyntax(),new markdown_GitHubCodeBlockSyntax(),new markdown_BlockquoteSyntax(),new markdown_HorizontalRuleSyntax(),new markdown_UnorderedListSyntax(),new markdown_OrderedListSyntax(),new markdown_TaskSyntax(),new markdown_TableSyntax(),new markdown_ParagraphSyntax()];
		}
		return markdown_BlockSyntax.syntaxes;
	}
	static isAtBlockEnd(parser) {
		if(parser.pos >= parser.lines.length) {
			return true;
		}
		var _g = 0;
		var _g1 = markdown_BlockSyntax.get_syntaxes();
		while(_g < _g1.length) {
			var syntax = _g1[_g];
			++_g;
			if(syntax.canParse(parser) && syntax.get_canEndBlock()) {
				return true;
			}
		}
		return false;
	}
}
markdown_BlockSyntax.__name__ = "markdown.BlockSyntax";
markdown_BlockSyntax.__properties__ = {get_syntaxes: "get_syntaxes"};
Object.assign(markdown_BlockSyntax.prototype, {
	__class__: markdown_BlockSyntax
	,__properties__: {get_canEndBlock: "get_canEndBlock",get_pattern: "get_pattern"}
});
class markdown_EmptyBlockSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_EMPTY;
	}
	parse(parser) {
		parser.advance();
		return null;
	}
}
markdown_EmptyBlockSyntax.__name__ = "markdown.EmptyBlockSyntax";
markdown_EmptyBlockSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_EmptyBlockSyntax.prototype, {
	__class__: markdown_EmptyBlockSyntax
});
class markdown_SetextHeaderSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	canParse(parser) {
		return parser.matchesNext(markdown_BlockSyntax.RE_SETEXT);
	}
	parse(parser) {
		var re = markdown_BlockSyntax.RE_SETEXT;
		re.match(parser.get_next());
		var tag = re.matched(1).charAt(0) == "=" ? "h1" : "h2";
		var contents = parser.document.parseInline(parser.lines[parser.pos]);
		parser.advance();
		parser.advance();
		return new markdown_ElementNode(tag,contents);
	}
}
markdown_SetextHeaderSyntax.__name__ = "markdown.SetextHeaderSyntax";
markdown_SetextHeaderSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_SetextHeaderSyntax.prototype, {
	__class__: markdown_SetextHeaderSyntax
});
class markdown_HeaderSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_HEADER;
	}
	parse(parser) {
		this.get_pattern().match(parser.lines[parser.pos]);
		parser.advance();
		var level = this.get_pattern().matched(1).length;
		var contents = parser.document.parseInline(StringTools.trim(this.get_pattern().matched(2)));
		return new markdown_ElementNode("h" + level,contents);
	}
}
markdown_HeaderSyntax.__name__ = "markdown.HeaderSyntax";
markdown_HeaderSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_HeaderSyntax.prototype, {
	__class__: markdown_HeaderSyntax
});
class markdown_TaskSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_TASK;
	}
	parse(parser) {
		var contents = StringTools.ltrim(parser.lines[parser.pos]);
		var checktype = "<input type='checkbox'/>";
		if(this.get_pattern().match(contents)) {
			if(new EReg("(\\[[x]\\])","g").match(this.get_pattern().matched(0))) {
				checktype = "<input type='checkbox' checked/>";
			}
			contents = this.get_pattern().matchedRight();
		}
		parser.advance();
		return new markdown_TextNode("" + checktype + contents);
	}
}
markdown_TaskSyntax.__name__ = "markdown.TaskSyntax";
markdown_TaskSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_TaskSyntax.prototype, {
	__class__: markdown_TaskSyntax
});
class markdown_BlockquoteSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_BLOCKQUOTE;
	}
	parseChildLines(parser) {
		var childLines = [];
		while(parser.pos < parser.lines.length) if(this.get_pattern().match(parser.lines[parser.pos])) {
			childLines.push(this.get_pattern().matched(1));
			parser.advance();
		} else {
			var nextMatch = parser.get_next() != null && this.get_pattern().match(parser.get_next());
			if(StringTools.trim(parser.lines[parser.pos]) == "" && nextMatch) {
				childLines.push("");
				childLines.push(this.get_pattern().matched(1));
				parser.advance();
				parser.advance();
			} else {
				break;
			}
		}
		return childLines;
	}
	parse(parser) {
		var childLines = this.parseChildLines(parser);
		var children = parser.document.parseLines(childLines);
		return new markdown_ElementNode("blockquote",children);
	}
}
markdown_BlockquoteSyntax.__name__ = "markdown.BlockquoteSyntax";
markdown_BlockquoteSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_BlockquoteSyntax.prototype, {
	__class__: markdown_BlockquoteSyntax
});
class markdown_CodeBlockSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_INDENT;
	}
	parseChildLines(parser) {
		var childLines = [];
		while(parser.pos < parser.lines.length) if(this.get_pattern().match(parser.lines[parser.pos])) {
			childLines.push(this.get_pattern().matched(1));
			parser.advance();
		} else {
			var nextMatch = parser.get_next() != null && this.get_pattern().match(parser.get_next());
			if(StringTools.trim(parser.lines[parser.pos]) == "" && nextMatch) {
				childLines.push("");
				childLines.push(this.get_pattern().matched(1));
				parser.advance();
				parser.advance();
			} else {
				break;
			}
		}
		return childLines;
	}
	parse(parser) {
		var childLines = this.parseChildLines(parser);
		childLines.push("");
		var escaped = StringTools.htmlEscape(childLines.join("\n"));
		return new markdown_ElementNode("pre",[markdown_ElementNode.text("code",escaped)]);
	}
}
markdown_CodeBlockSyntax.__name__ = "markdown.CodeBlockSyntax";
markdown_CodeBlockSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_CodeBlockSyntax.prototype, {
	__class__: markdown_CodeBlockSyntax
});
class markdown_GitHubCodeBlockSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_CODE;
	}
	parseChildLines(parser) {
		var childLines = [];
		parser.advance();
		while(parser.pos < parser.lines.length) if(!this.get_pattern().match(parser.lines[parser.pos])) {
			childLines.push(parser.lines[parser.pos]);
			parser.advance();
		} else {
			parser.advance();
			break;
		}
		return childLines;
	}
	parse(parser) {
		var syntax = this.get_pattern().matched(1);
		var childLines = this.parseChildLines(parser);
		var code = null;
		var source = childLines.join("\n");
		var _this = parser.document.codeBlockSyntaxes;
		if(__map_reserved[syntax] != null ? _this.existsReserved(syntax) : _this.h.hasOwnProperty(syntax)) {
			var _this1 = parser.document.codeBlockSyntaxes;
			var format = __map_reserved[syntax] != null ? _this1.getReserved(syntax) : _this1.h[syntax];
			code = markdown_ElementNode.text("code",format(source));
		} else {
			code = markdown_ElementNode.text("code",StringTools.htmlEscape(source));
			if(syntax != null && syntax.length > 0) {
				var _this2 = code.attributes;
				var value = "prettyprint " + syntax;
				if(__map_reserved["class"] != null) {
					_this2.setReserved("class",value);
				} else {
					_this2.h["class"] = value;
				}
			}
		}
		return new markdown_ElementNode("pre",[code]);
	}
}
markdown_GitHubCodeBlockSyntax.__name__ = "markdown.GitHubCodeBlockSyntax";
markdown_GitHubCodeBlockSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_GitHubCodeBlockSyntax.prototype, {
	__class__: markdown_GitHubCodeBlockSyntax
});
class markdown_HorizontalRuleSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_HR;
	}
	parse(parser) {
		parser.advance();
		return markdown_ElementNode.empty("hr");
	}
}
markdown_HorizontalRuleSyntax.__name__ = "markdown.HorizontalRuleSyntax";
markdown_HorizontalRuleSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_HorizontalRuleSyntax.prototype, {
	__class__: markdown_HorizontalRuleSyntax
});
class markdown_BlockHtmlSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_HTML;
	}
	get_canEndBlock() {
		return false;
	}
	parse(parser) {
		var childLines = [];
		while(parser.pos < parser.lines.length && !parser.matches(markdown_BlockSyntax.RE_EMPTY)) {
			childLines.push(parser.lines[parser.pos]);
			parser.advance();
		}
		return new markdown_TextNode(childLines.join("\n"));
	}
}
markdown_BlockHtmlSyntax.__name__ = "markdown.BlockHtmlSyntax";
markdown_BlockHtmlSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_BlockHtmlSyntax.prototype, {
	__class__: markdown_BlockHtmlSyntax
});
class markdown_ListItem {
	constructor(lines) {
		this.forceBlock = false;
		this.lines = lines;
	}
}
markdown_ListItem.__name__ = "markdown.ListItem";
Object.assign(markdown_ListItem.prototype, {
	__class__: markdown_ListItem
	,forceBlock: null
	,lines: null
});
class markdown_ParagraphSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_canEndBlock() {
		return false;
	}
	canParse(parser) {
		return true;
	}
	parse(parser) {
		var childLines = [];
		while(!markdown_BlockSyntax.isAtBlockEnd(parser)) {
			childLines.push(StringTools.ltrim(parser.lines[parser.pos]));
			parser.advance();
		}
		var contents = parser.document.parseInline(childLines.join("\n"));
		return new markdown_ElementNode("p",contents);
	}
}
markdown_ParagraphSyntax.__name__ = "markdown.ParagraphSyntax";
markdown_ParagraphSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_ParagraphSyntax.prototype, {
	__class__: markdown_ParagraphSyntax
});
class markdown_ListSyntax extends markdown_BlockSyntax {
	constructor(listTag) {
		super();
		this.listTag = listTag;
	}
	get_canEndBlock() {
		return false;
	}
	parse(parser) {
		var items = [];
		var childLines = [];
		var endItem = function() {
			if(childLines.length > 0) {
				items.push(new markdown_ListItem(childLines));
				childLines = [];
			}
		};
		var match;
		var tryMatch = function(pattern) {
			match = pattern;
			return pattern.match(parser.lines[parser.pos]);
		};
		while(parser.pos < parser.lines.length) {
			if(tryMatch(markdown_BlockSyntax.RE_EMPTY)) {
				childLines.push("");
			} else if(tryMatch(markdown_BlockSyntax.RE_UL) || tryMatch(markdown_BlockSyntax.RE_OL)) {
				endItem();
				var tmp = match.matched(1);
				childLines.push(tmp);
			} else if(tryMatch(markdown_BlockSyntax.RE_INDENT)) {
				var tmp1 = match.matched(1);
				childLines.push(tmp1);
			} else if(markdown_BlockSyntax.isAtBlockEnd(parser)) {
				break;
			} else {
				if(childLines.length > 0 && childLines[childLines.length - 1] == "") {
					break;
				}
				childLines.push(parser.lines[parser.pos]);
			}
			parser.advance();
		}
		endItem();
		var _g = 0;
		var _g1 = items.length;
		while(_g < _g1) {
			var i = _g++;
			var len = items[i].lines.length;
			var _g2 = 1;
			var _g11 = len + 1;
			while(_g2 < _g11) {
				var jj = _g2++;
				var j = len - jj;
				if(markdown_BlockSyntax.RE_EMPTY.match(items[i].lines[j])) {
					if(i < items.length - 1) {
						items[i].forceBlock = true;
						items[i + 1].forceBlock = true;
					}
					items[i].lines.pop();
				} else {
					break;
				}
			}
		}
		var itemNodes = [];
		var _g21 = 0;
		while(_g21 < items.length) {
			var item = items[_g21];
			++_g21;
			var blockItem = item.forceBlock || item.lines.length > 1;
			var blocksInList = [markdown_BlockSyntax.RE_BLOCKQUOTE,markdown_BlockSyntax.RE_HEADER,markdown_BlockSyntax.RE_HR,markdown_BlockSyntax.RE_INDENT,markdown_BlockSyntax.RE_UL,markdown_BlockSyntax.RE_OL,markdown_BlockSyntax.RE_TASK];
			if(!blockItem) {
				var _g22 = 0;
				while(_g22 < blocksInList.length) {
					var pattern1 = blocksInList[_g22];
					++_g22;
					if(pattern1.match(item.lines[0])) {
						blockItem = true;
						break;
					}
				}
			}
			if(blockItem) {
				var children = parser.document.parseLines(item.lines);
				if(!item.forceBlock && children.length == 1) {
					if(((children[0]) instanceof markdown_ElementNode)) {
						var node = children[0];
						if(node.tag == "p") {
							children = node.children;
						}
					}
				}
				itemNodes.push(new markdown_ElementNode("li",children));
			} else {
				var contents = parser.document.parseInline(item.lines[0]);
				itemNodes.push(new markdown_ElementNode("li",contents));
			}
		}
		return new markdown_ElementNode(this.listTag,itemNodes);
	}
}
markdown_ListSyntax.__name__ = "markdown.ListSyntax";
markdown_ListSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_ListSyntax.prototype, {
	__class__: markdown_ListSyntax
	,listTag: null
});
class markdown_UnorderedListSyntax extends markdown_ListSyntax {
	constructor() {
		super("ul");
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_UL;
	}
}
markdown_UnorderedListSyntax.__name__ = "markdown.UnorderedListSyntax";
markdown_UnorderedListSyntax.__super__ = markdown_ListSyntax;
Object.assign(markdown_UnorderedListSyntax.prototype, {
	__class__: markdown_UnorderedListSyntax
});
class markdown_OrderedListSyntax extends markdown_ListSyntax {
	constructor() {
		super("ol");
	}
	get_pattern() {
		return markdown_BlockSyntax.RE_OL;
	}
}
markdown_OrderedListSyntax.__name__ = "markdown.OrderedListSyntax";
markdown_OrderedListSyntax.__super__ = markdown_ListSyntax;
Object.assign(markdown_OrderedListSyntax.prototype, {
	__class__: markdown_OrderedListSyntax
});
class markdown_TableSyntax extends markdown_BlockSyntax {
	constructor() {
		super();
	}
	get_pattern() {
		return markdown_TableSyntax.TABLE_PATTERN;
	}
	get_canEndBlock() {
		return false;
	}
	parse(parser) {
		var lines = [];
		while(parser.pos < parser.lines.length && parser.matches(markdown_TableSyntax.TABLE_PATTERN)) {
			lines.push(parser.lines[parser.pos]);
			parser.advance();
		}
		var heads = [];
		var rows = [];
		var headLine = lines.shift();
		var alignLine = lines.shift();
		var aligns = [];
		if(alignLine != null) {
			markdown_TableSyntax.CELL_PATTERN.map(alignLine,function(e) {
				var text = e.matched(2);
				var align = text.charAt(0) == ":" ? text.charAt(text.length - 1) == ":" ? "center" : "left" : text.charAt(text.length - 1) == ":" ? "right" : "left";
				aligns.push(align);
				return "";
			});
		}
		var index = 0;
		markdown_TableSyntax.CELL_PATTERN.map(headLine,function(e1) {
			var text1 = StringTools.trim(e1.matched(2));
			var cell = new markdown_ElementNode("th",parser.document.parseInline(text1));
			if(aligns[index] != "left") {
				var _this = cell.attributes;
				var value = aligns[index];
				if(__map_reserved["align"] != null) {
					_this.setReserved("align",value);
				} else {
					_this.h["align"] = value;
				}
			}
			heads.push(cell);
			index += 1;
			return "";
		});
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			var cols = [[]];
			rows.push(new markdown_ElementNode("tr",cols[0]));
			var index1 = [0];
			markdown_TableSyntax.CELL_PATTERN.map(line,(function(index2,cols1) {
				return function(e2) {
					var text2 = StringTools.trim(e2.matched(2));
					var cell1 = new markdown_ElementNode("td",parser.document.parseInline(text2));
					if(aligns[index2[0]] != "left") {
						var _this1 = cell1.attributes;
						var value1 = aligns[index2[0]];
						if(__map_reserved["align"] != null) {
							_this1.setReserved("align",value1);
						} else {
							_this1.h["align"] = value1;
						}
					}
					cols1[0].push(cell1);
					index2[0] += 1;
					return "";
				};
			})(index1,cols));
		}
		return new markdown_ElementNode("table",[new markdown_ElementNode("thead",heads),new markdown_ElementNode("tbody",rows)]);
	}
}
markdown_TableSyntax.__name__ = "markdown.TableSyntax";
markdown_TableSyntax.__super__ = markdown_BlockSyntax;
Object.assign(markdown_TableSyntax.prototype, {
	__class__: markdown_TableSyntax
});
class markdown_HtmlRenderer {
	constructor() {
	}
	render(nodes) {
		this.buffer = new StringBuf();
		var _g = 0;
		while(_g < nodes.length) {
			var node = nodes[_g];
			++_g;
			node.accept(this);
		}
		return this.buffer.b;
	}
	visitText(text) {
		this.buffer.b += Std.string(text.text);
	}
	visitElementBefore(element) {
		if(this.buffer.b != "" && markdown_HtmlRenderer.BLOCK_TAGS.match(element.tag)) {
			this.buffer.b += "\n";
		}
		this.buffer.b += Std.string("<" + element.tag);
		var _g = [];
		var k = element.attributes.keys();
		while(k.hasNext()) {
			var k1 = k.next();
			_g.push(k1);
		}
		var attributeNames = _g;
		attributeNames.sort(markdown_HtmlRenderer.sortAttributes);
		var _g1 = 0;
		while(_g1 < attributeNames.length) {
			var name = attributeNames[_g1];
			++_g1;
			var _this = this.buffer;
			var _this1 = element.attributes;
			var x = __map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name];
			_this.b += Std.string(" " + name + "=\"" + x + "\"");
		}
		if(element.children == null) {
			this.buffer.b += " />";
			return false;
		} else {
			this.buffer.b += ">";
			return true;
		}
	}
	visitElementAfter(element) {
		this.buffer.b += Std.string("</" + element.tag + ">");
	}
	static sortAttributes(a,b) {
		var ia = markdown_HtmlRenderer.attributeOrder.indexOf(a);
		var ib = markdown_HtmlRenderer.attributeOrder.indexOf(a);
		if(ia > -1 && ib > -1) {
			return ia - ib;
		}
		return Reflect.compare(a,b);
	}
}
markdown_HtmlRenderer.__name__ = "markdown.HtmlRenderer";
markdown_HtmlRenderer.__interfaces__ = [markdown_NodeVisitor];
Object.assign(markdown_HtmlRenderer.prototype, {
	__class__: markdown_HtmlRenderer
	,buffer: null
});
class markdown_InlineSyntax {
	constructor(pattern) {
		this.pattern = new EReg(pattern,"m");
	}
	tryMatch(parser) {
		if(this.pattern.match(parser.get_currentSource()) && this.pattern.matchedPos().pos == 0) {
			parser.writeText();
			if(this.onMatch(parser)) {
				parser.consume(this.pattern.matched(0).length);
			}
			return true;
		}
		return false;
	}
	onMatch(parser) {
		return false;
	}
}
markdown_InlineSyntax.__name__ = "markdown.InlineSyntax";
Object.assign(markdown_InlineSyntax.prototype, {
	__class__: markdown_InlineSyntax
	,pattern: null
});
class markdown_AutolinkSyntaxWithoutBrackets extends markdown_InlineSyntax {
	constructor() {
		super("\\b((http|https|ftp)://[^\\s]*)\\b");
	}
	tryMatch(parser) {
		return super.tryMatch(parser);
	}
	onMatch(parser) {
		var url = this.pattern.matched(1);
		var anchor = markdown_ElementNode.text("a",StringTools.htmlEscape(url));
		var _this = anchor.attributes;
		if(__map_reserved["href"] != null) {
			_this.setReserved("href",url);
		} else {
			_this.h["href"] = url;
		}
		parser.addNode(anchor);
		return true;
	}
}
markdown_AutolinkSyntaxWithoutBrackets.__name__ = "markdown.AutolinkSyntaxWithoutBrackets";
markdown_AutolinkSyntaxWithoutBrackets.__super__ = markdown_InlineSyntax;
Object.assign(markdown_AutolinkSyntaxWithoutBrackets.prototype, {
	__class__: markdown_AutolinkSyntaxWithoutBrackets
});
class markdown_TextSyntax extends markdown_InlineSyntax {
	constructor(pattern,substitute) {
		super(pattern);
		this.substitute = substitute;
	}
	onMatch(parser) {
		if(this.substitute == null) {
			parser.advanceBy(this.pattern.matched(0).length);
			return false;
		}
		parser.addNode(parser.createText(this.substitute));
		return true;
	}
}
markdown_TextSyntax.__name__ = "markdown.TextSyntax";
markdown_TextSyntax.__super__ = markdown_InlineSyntax;
Object.assign(markdown_TextSyntax.prototype, {
	__class__: markdown_TextSyntax
	,substitute: null
});
class markdown_AutolinkSyntax extends markdown_InlineSyntax {
	constructor() {
		super("<((http|https|ftp)://[^>]*)>");
	}
	onMatch(parser) {
		var url = this.pattern.matched(1);
		var anchor = markdown_ElementNode.text("a",StringTools.htmlEscape(url));
		var _this = anchor.attributes;
		if(__map_reserved["href"] != null) {
			_this.setReserved("href",url);
		} else {
			_this.h["href"] = url;
		}
		parser.addNode(anchor);
		return true;
	}
}
markdown_AutolinkSyntax.__name__ = "markdown.AutolinkSyntax";
markdown_AutolinkSyntax.__super__ = markdown_InlineSyntax;
Object.assign(markdown_AutolinkSyntax.prototype, {
	__class__: markdown_AutolinkSyntax
});
class markdown_TagSyntax extends markdown_InlineSyntax {
	constructor(pattern,tag,end) {
		super(pattern);
		this.tag = tag;
		this.endPattern = new EReg(end == null ? pattern : end,"m");
	}
	onMatch(parser) {
		parser.stack.push(new markdown_TagState(parser.pos,parser.pos + this.pattern.matched(0).length,this));
		return true;
	}
	onMatchEnd(parser,state) {
		parser.addNode(new markdown_ElementNode(this.tag,state.children));
		return true;
	}
}
markdown_TagSyntax.__name__ = "markdown.TagSyntax";
markdown_TagSyntax.__super__ = markdown_InlineSyntax;
Object.assign(markdown_TagSyntax.prototype, {
	__class__: markdown_TagSyntax
	,endPattern: null
	,tag: null
});
class markdown_LinkSyntax extends markdown_TagSyntax {
	constructor(linkResolver) {
		super("\\[",null,markdown_LinkSyntax.linkPattern);
		this.linkResolver = linkResolver;
	}
	onMatchEnd(parser,state) {
		var url;
		var title;
		if(this.endPattern.matched(1) == null || this.endPattern.matched(1) == "") {
			if(this.linkResolver == null) {
				return false;
			}
			if(state.children.length != 1) {
				return false;
			}
			if(!((state.children[0]) instanceof markdown_TextNode)) {
				return false;
			}
			var link = state.children[0];
			var node = this.linkResolver(link.text);
			if(node == null) {
				return false;
			}
			parser.addNode(node);
			return true;
		}
		if(this.endPattern.matched(3) != null && this.endPattern.matched(3) != "") {
			url = this.endPattern.matched(3);
			title = this.endPattern.matched(4);
			if(StringTools.startsWith(url,"<") && StringTools.endsWith(url,">")) {
				url = url.substring(1,url.length - 1);
			}
		} else {
			var id = this.endPattern.matched(2);
			if(id == "") {
				id = parser.source.substring(state.startPos + 1,parser.pos);
			}
			id = id.toLowerCase();
			var _this = parser.document.refLinks;
			var link1 = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			if(link1 == null) {
				return false;
			}
			url = link1.url;
			title = link1.title;
		}
		var anchor = new markdown_ElementNode("a",state.children);
		var this1 = anchor.attributes;
		var value = StringTools.htmlEscape(url);
		var _this1 = this1;
		if(__map_reserved["href"] != null) {
			_this1.setReserved("href",value);
		} else {
			_this1.h["href"] = value;
		}
		if(title != null && title != "") {
			var this2 = anchor.attributes;
			var value1 = StringTools.htmlEscape(title);
			var _this2 = this2;
			if(__map_reserved["title"] != null) {
				_this2.setReserved("title",value1);
			} else {
				_this2.h["title"] = value1;
			}
		}
		parser.addNode(anchor);
		return true;
	}
}
markdown_LinkSyntax.__name__ = "markdown.LinkSyntax";
markdown_LinkSyntax.__super__ = markdown_TagSyntax;
Object.assign(markdown_LinkSyntax.prototype, {
	__class__: markdown_LinkSyntax
	,linkResolver: null
});
class markdown_ImgSyntax extends markdown_TagSyntax {
	constructor(linkResolver) {
		super("!\\[",null,markdown_ImgSyntax.linkPattern);
		this.linkResolver = linkResolver;
	}
	onMatchEnd(parser,state) {
		var url;
		var title;
		if(this.endPattern.matched(1) == null || this.endPattern.matched(1) == "") {
			if(this.linkResolver == null) {
				return false;
			}
			if(state.children.length != 1) {
				return false;
			}
			if(!((state.children[0]) instanceof markdown_TextNode)) {
				return false;
			}
			var link = state.children[0];
			var node = this.linkResolver(link.text);
			if(node == null) {
				return false;
			}
			parser.addNode(node);
			return true;
		}
		if(this.endPattern.matched(3) != null && this.endPattern.matched(3) != "") {
			url = this.endPattern.matched(3);
			title = this.endPattern.matched(4);
			if(StringTools.startsWith(url,"<") && StringTools.endsWith(url,">")) {
				url = url.substring(1,url.length - 1);
			}
		} else {
			var id = this.endPattern.matched(2);
			if(id == "") {
				id = parser.source.substring(state.startPos + 1,parser.pos);
			}
			id = id.toLowerCase();
			var _this = parser.document.refLinks;
			var link1 = __map_reserved[id] != null ? _this.getReserved(id) : _this.h[id];
			if(link1 == null) {
				return false;
			}
			url = link1.url;
			title = link1.title;
		}
		var img = new markdown_ElementNode("img",null);
		var this1 = img.attributes;
		var value = StringTools.htmlEscape(url);
		var _this1 = this1;
		if(__map_reserved["src"] != null) {
			_this1.setReserved("src",value);
		} else {
			_this1.h["src"] = value;
		}
		if(state.children.length == 1 && ((state.children[0]) instanceof markdown_TextNode)) {
			var alt = state.children[0];
			var value1 = alt.text;
			var _this2 = img.attributes;
			if(__map_reserved["alt"] != null) {
				_this2.setReserved("alt",value1);
			} else {
				_this2.h["alt"] = value1;
			}
		}
		if(title != null && title != "") {
			var this2 = img.attributes;
			var value2 = StringTools.htmlEscape(title);
			var _this3 = this2;
			if(__map_reserved["title"] != null) {
				_this3.setReserved("title",value2);
			} else {
				_this3.h["title"] = value2;
			}
		}
		parser.addNode(img);
		return true;
	}
}
markdown_ImgSyntax.__name__ = "markdown.ImgSyntax";
markdown_ImgSyntax.__super__ = markdown_TagSyntax;
Object.assign(markdown_ImgSyntax.prototype, {
	__class__: markdown_ImgSyntax
	,linkResolver: null
});
class markdown_CodeSyntax extends markdown_InlineSyntax {
	constructor(pattern) {
		super(pattern);
	}
	onMatch(parser) {
		parser.addNode(markdown_ElementNode.text("code",StringTools.htmlEscape(this.pattern.matched(1))));
		return true;
	}
}
markdown_CodeSyntax.__name__ = "markdown.CodeSyntax";
markdown_CodeSyntax.__super__ = markdown_InlineSyntax;
Object.assign(markdown_CodeSyntax.prototype, {
	__class__: markdown_CodeSyntax
});
class markdown_InlineParser {
	constructor(source,document) {
		this.start = 0;
		this.pos = 0;
		this.source = source;
		this.document = document;
		this.stack = [];
		if(document.inlineSyntaxes != null) {
			this.syntaxes = [];
			var _g = 0;
			var _g1 = document.inlineSyntaxes;
			while(_g < _g1.length) {
				var syntax = _g1[_g];
				++_g;
				this.syntaxes.push(syntax);
			}
			var _g2 = 0;
			var _g3 = markdown_InlineParser.defaultSyntaxes;
			while(_g2 < _g3.length) {
				var syntax1 = _g3[_g2];
				++_g2;
				this.syntaxes.push(syntax1);
			}
		} else {
			this.syntaxes = markdown_InlineParser.defaultSyntaxes;
		}
		var _this = this.syntaxes;
		var x = new markdown_LinkSyntax(document.linkResolver);
		_this.splice(1,0,x);
	}
	parse() {
		this.stack.push(new markdown_TagState(0,0,null));
		while(!this.get_isDone()) {
			var matched = false;
			var _g = 1;
			var _g1 = this.stack.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.stack[this.stack.length - i].tryMatch(this)) {
					matched = true;
					break;
				}
			}
			if(matched) {
				continue;
			}
			var _g2 = 0;
			var _g3 = this.syntaxes;
			while(_g2 < _g3.length) {
				var syntax = _g3[_g2];
				++_g2;
				if(syntax.tryMatch(this)) {
					matched = true;
					break;
				}
			}
			if(matched) {
				continue;
			}
			this.advanceBy(1);
		}
		return this.stack[0].close(this);
	}
	writeText() {
		this.writeTextRange(this.start,this.pos);
		this.start = this.pos;
	}
	writeTextRange(start,end) {
		if(end > start) {
			var text = this.source.substring(start,end);
			var nodes = this.stack[this.stack.length - 1].children;
			if(nodes.length > 0 && ((nodes[nodes.length - 1]) instanceof markdown_TextNode)) {
				var lastNode = nodes[nodes.length - 1];
				var newNode = this.createText("" + lastNode.text + text);
				nodes[nodes.length - 1] = newNode;
			} else {
				nodes.push(this.createText(text));
			}
		}
	}
	createText(text) {
		return new markdown_TextNode(this.unescape(text));
	}
	addNode(node) {
		this.stack[this.stack.length - 1].children.push(node);
	}
	get_currentSource() {
		return this.source.substring(this.pos,this.source.length);
	}
	get_isDone() {
		return this.pos == this.source.length;
	}
	advanceBy(length) {
		this.pos += length;
	}
	consume(length) {
		this.pos += length;
		this.start = this.pos;
	}
	unescape(text) {
		var _this_r = new RegExp("\\\\([\\\\`*_{}\\[\\]()#+-.!])","g".split("u").join(""));
		text = text.replace(_this_r,"$1");
		text = StringTools.replace(text,"\t","    ");
		return text;
	}
}
markdown_InlineParser.__name__ = "markdown.InlineParser";
Object.assign(markdown_InlineParser.prototype, {
	__class__: markdown_InlineParser
	,source: null
	,document: null
	,syntaxes: null
	,pos: null
	,start: null
	,stack: null
	,__properties__: {get_isDone: "get_isDone",get_currentSource: "get_currentSource"}
});
class markdown_TagState {
	constructor(startPos,endPos,syntax) {
		this.startPos = startPos;
		this.endPos = endPos;
		this.syntax = syntax;
		this.children = [];
	}
	tryMatch(parser) {
		if(this.syntax.endPattern.match(parser.get_currentSource()) && this.syntax.endPattern.matchedPos().pos == 0) {
			this.close(parser);
			return true;
		}
		return false;
	}
	close(parser) {
		var index = parser.stack.indexOf(this);
		var unmatchedTags = parser.stack.splice(index + 1,parser.stack.length - index);
		var _g = 0;
		while(_g < unmatchedTags.length) {
			var unmatched = unmatchedTags[_g];
			++_g;
			parser.writeTextRange(unmatched.startPos,unmatched.endPos);
			var _g1 = 0;
			var _g11 = unmatched.children;
			while(_g1 < _g11.length) {
				var child = _g11[_g1];
				++_g1;
				this.children.push(child);
			}
		}
		parser.writeText();
		parser.stack.pop();
		if(parser.stack.length == 0) {
			return this.children;
		}
		if(this.syntax.onMatchEnd(parser,this)) {
			parser.consume(this.syntax.endPattern.matched(0).length);
		} else {
			parser.start = this.startPos;
			parser.advanceBy(this.syntax.endPattern.matched(0).length);
		}
		return null;
	}
}
markdown_TagState.__name__ = "markdown.TagState";
Object.assign(markdown_TagState.prototype, {
	__class__: markdown_TagState
	,startPos: null
	,endPos: null
	,syntax: null
	,children: null
});
class tests_RunAll {
	constructor() {
	}
	static main() {
		var run = new utest_Runner();
		run.addCase(new tests_TestHost());
		run.addCase(new tests_TestTemplate());
		utest_ui_Report.create(run);
		run.run();
	}
}
tests_RunAll.__name__ = "tests.RunAll";
Object.assign(tests_RunAll.prototype, {
	__class__: tests_RunAll
});
class utest_ITest {
}
utest_ITest.__name__ = "utest.ITest";
class utest_Test {
	constructor() {
	}
	__initializeUtest__() {
		var init = { tests : [], accessories : { }};
		return init;
	}
}
utest_Test.__name__ = "utest.Test";
utest_Test.__interfaces__ = [utest_ITest];
Object.assign(utest_Test.prototype, {
	__class__: utest_Test
});
class tests_TestHost extends utest_Test {
	constructor() {
		super();
	}
	testhost() {
		var p = process.cwd();
		utest_Assert.equals("e",p,null,{ fileName : "tests/TestHost.hx", lineNumber : 8, className : "tests.TestHost", methodName : "testhost"});
	}
	__initializeUtest__() {
		var init = super.__initializeUtest__();
		var _gthis = this;
		init.tests.push({ name : "testhost", execute : function() {
			_gthis.testhost();
			return utest_Async.getResolved();
		}});
		return init;
	}
}
tests_TestHost.__name__ = "tests.TestHost";
tests_TestHost.__super__ = utest_Test;
Object.assign(tests_TestHost.prototype, {
	__class__: tests_TestHost
});
class tests_TestTemplate extends utest_Test {
	constructor() {
		super();
	}
	setup() {
		this.done = new marc_SimpleMd().setMdFile("./sources/magRoundUp.md").withLayoutFile("./postite/template.html").withAssets("./assets").render();
	}
	teardown() {
		this.done = null;
	}
	testTemplate(async) {
		var f = function(f1) {
			haxe_Log.trace("errr" + Std.string(f1),{ fileName : "tests/TestTemplate.hx", lineNumber : 53, className : "tests.TestTemplate", methodName : "testTemplate"});
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f1.Log()));
		};
		var ret = tink_core__$Promise_Promise_$Impl_$.next(tink_core__$Promise_Promise_$Impl_$.next(tink_core__$Promise_Promise_$Impl_$.next(this.done,function(res) {
			var out = "./postite/done.html";
			asys_io_File.saveContent(out,res);
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(out)));
		}),function(res1) {
			return asys_io_File.getContent(res1);
		}),function(r) {
			haxe_Log.trace("yo",{ fileName : "tests/TestTemplate.hx", lineNumber : 46, className : "tests.TestTemplate", methodName : "testTemplate"});
			utest_Assert.stringContains("<li>",r,null,{ fileName : "tests/TestTemplate.hx", lineNumber : 47, className : "tests.TestTemplate", methodName : "testTemplate"});
			async.done({ fileName : "tests/TestTemplate.hx", lineNumber : 48, className : "tests.TestTemplate", methodName : "testTemplate"});
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(r)));
		}).flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		ret.gather().handle(function(m) {
			return m;
		});
	}
	testInline(async) {
		var f = function(f1) {
			haxe_Log.trace("errr" + Std.string(f1),{ fileName : "tests/TestTemplate.hx", lineNumber : 72, className : "tests.TestTemplate", methodName : "testInline"});
			throw js__$Boot_HaxeError.wrap(f1);
		};
		var ret = tink_core__$Promise_Promise_$Impl_$.next(tink_core__$Promise_Promise_$Impl_$.next(this.done,function(html) {
			return tink_core__$Future_Future_$Impl_$.ofJsPromise(new InlineCSS(html,{ url : "" + process.cwd() + "/postite/"}));
		}),function(inlinehtml) {
			utest_Assert.stringContains("background-color",inlinehtml,null,{ fileName : "tests/TestTemplate.hx", lineNumber : 66, className : "tests.TestTemplate", methodName : "testInline"});
			async.done({ fileName : "tests/TestTemplate.hx", lineNumber : 67, className : "tests.TestTemplate", methodName : "testInline"});
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(inlinehtml)));
		}).flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		ret.gather().handle(function(m) {
			return m;
		});
	}
	__initializeUtest__() {
		var init = super.__initializeUtest__();
		var _gthis = this;
		init.accessories.setup = function() {
			_gthis.setup();
			return utest_Async.getResolved();
		};
		init.accessories.teardown = function() {
			_gthis.teardown();
			return utest_Async.getResolved();
		};
		init.tests.push({ name : "testTemplate", execute : function() {
			var async = new utest_Async(1000);
			_gthis.testTemplate(async);
			return async;
		}});
		init.tests.push({ name : "testInline", execute : function() {
			var async1 = new utest_Async(2000);
			_gthis.testInline(async1);
			return async1;
		}});
		return init;
	}
}
tests_TestTemplate.__name__ = "tests.TestTemplate";
tests_TestTemplate.__super__ = utest_Test;
Object.assign(tests_TestTemplate.prototype, {
	__class__: tests_TestTemplate
	,done: null
});
class tink_chunk_ChunkBase {
	getCursor() {
		if(this.flattened == null) {
			this.flatten(this.flattened = []);
		}
		return tink_chunk_ChunkCursor.create(this.flattened.slice());
	}
	flatten(into) {
	}
}
tink_chunk_ChunkBase.__name__ = "tink.chunk.ChunkBase";
Object.assign(tink_chunk_ChunkBase.prototype, {
	__class__: tink_chunk_ChunkBase
	,flattened: null
});
class tink_chunk_ChunkObject {
}
tink_chunk_ChunkObject.__name__ = "tink.chunk.ChunkObject";
Object.assign(tink_chunk_ChunkObject.prototype, {
	__class__: tink_chunk_ChunkObject
	,getByte: null
	,getCursor: null
	,flatten: null
	,getLength: null
	,slice: null
	,toString: null
	,toBytes: null
	,blitTo: null
});
class tink__$Chunk_EmptyChunk extends tink_chunk_ChunkBase {
	constructor() {
		super();
	}
	getByte(i) {
		return 0;
	}
	getLength() {
		return 0;
	}
	slice(from,to) {
		return this;
	}
	blitTo(target,offset) {
	}
	toString() {
		return "";
	}
	toBytes() {
		return tink__$Chunk_EmptyChunk.EMPTY;
	}
}
tink__$Chunk_EmptyChunk.__name__ = "tink._Chunk.EmptyChunk";
tink__$Chunk_EmptyChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink__$Chunk_EmptyChunk.__super__ = tink_chunk_ChunkBase;
Object.assign(tink__$Chunk_EmptyChunk.prototype, {
	__class__: tink__$Chunk_EmptyChunk
});
class tink__$Chunk_CompoundChunk extends tink_chunk_ChunkBase {
	constructor(left,right) {
		super();
		this.left = left;
		this.right = right;
		this.split = left.getLength();
		this.length = this.split + right.getLength();
	}
	getByte(i) {
		if(i < this.split) {
			return this.left.getByte(i);
		} else {
			return this.right.getByte(i - this.split);
		}
	}
	getLength() {
		return this.length;
	}
	flatten(into) {
		this.left.flatten(into);
		this.right.flatten(into);
	}
	slice(from,to) {
		return tink__$Chunk_Chunk_$Impl_$.concat(this.left.slice(from,to),this.right.slice(from - this.split,to - this.split));
	}
	blitTo(target,offset) {
		this.left.blitTo(target,offset);
		this.right.blitTo(target,offset + this.split);
	}
	toString() {
		return this.toBytes().toString();
	}
	toBytes() {
		var ret = new haxe_io_Bytes(new ArrayBuffer(this.length));
		this.blitTo(ret,0);
		return ret;
	}
}
tink__$Chunk_CompoundChunk.__name__ = "tink._Chunk.CompoundChunk";
tink__$Chunk_CompoundChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink__$Chunk_CompoundChunk.__super__ = tink_chunk_ChunkBase;
Object.assign(tink__$Chunk_CompoundChunk.prototype, {
	__class__: tink__$Chunk_CompoundChunk
	,left: null
	,right: null
	,split: null
	,length: null
});
class tink__$Chunk_Chunk_$Impl_$ {
	static get_length(this1) {
		return this1.getLength();
	}
	static getByte(this1,i) {
		return this1.getByte(i);
	}
	static concat(this1,that) {
		var _g = that.getLength();
		if(this1.getLength() == 0) {
			if(_g == 0) {
				return tink__$Chunk_Chunk_$Impl_$.EMPTY;
			} else {
				return that;
			}
		} else if(_g == 0) {
			return this1;
		} else {
			return new tink__$Chunk_CompoundChunk(this1,that);
		}
	}
	static cursor(this1) {
		return this1.getCursor();
	}
	static iterator(this1) {
		return new tink_chunk_ChunkIterator(this1.getCursor());
	}
	static slice(this1,from,to) {
		return this1.slice(from,to);
	}
	static blitTo(this1,target,offset) {
		this1.blitTo(target,offset);
		return;
	}
	static toHex(this1) {
		return this1.toBytes().toHex();
	}
	static toString(this1) {
		return this1.toString();
	}
	static toBytes(this1) {
		return this1.toBytes();
	}
	static toBuffer(this1) {
		var b = this1.toBytes();
		var data = b.b;
		return js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length);
	}
	static join(chunks) {
		if(chunks == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		} else {
			switch(chunks.length) {
			case 0:
				return tink__$Chunk_Chunk_$Impl_$.EMPTY;
			case 1:
				var v = chunks[0];
				return v;
			default:
				var v1 = chunks;
				var ret = tink__$Chunk_Chunk_$Impl_$.catChunk(v1[0],v1[1]);
				var _g = 2;
				var _g1 = v1.length;
				while(_g < _g1) {
					var i = _g++;
					ret = tink__$Chunk_Chunk_$Impl_$.catChunk(ret,v1[i]);
				}
				return ret;
			}
		}
	}
	static ofBytes(b) {
		return tink_chunk_ByteChunk.of(b);
	}
	static ofString(s) {
		return tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s));
	}
	static ofBuffer(s) {
		return new tink_chunk_nodejs_BufferChunk(s);
	}
	static ofHex(s) {
		var length = s.length >> 1;
		var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = Std.parseInt("0x" + HxOverrides.substr(s,i * 2,2));
		}
		return tink_chunk_ByteChunk.of(bytes);
	}
	static catChunk(a,b) {
		return tink__$Chunk_Chunk_$Impl_$.concat(a,b);
	}
	static rcatString(a,b) {
		return tink__$Chunk_Chunk_$Impl_$.catChunk(a,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(b)));
	}
	static lcatString(a,b) {
		return tink__$Chunk_Chunk_$Impl_$.catChunk(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(a)),b);
	}
	static lcatBytes(a,b) {
		return tink__$Chunk_Chunk_$Impl_$.catChunk(tink_chunk_ByteChunk.of(a),b);
	}
	static rcatBytes(a,b) {
		return tink__$Chunk_Chunk_$Impl_$.catChunk(a,tink_chunk_ByteChunk.of(b));
	}
}
tink__$Chunk_Chunk_$Impl_$.__name__ = "tink._Chunk.Chunk_Impl_";
tink__$Chunk_Chunk_$Impl_$.__properties__ = {get_length: "get_length"};
class tink_chunk_ByteChunk extends tink_chunk_ChunkBase {
	constructor(data,from,to) {
		super();
		this.data = data;
		this.from = from;
		this.to = to;
	}
	get_wrapped() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped;
	}
	getByte(index) {
		return this.data.bytes[this.from + index];
	}
	flatten(into) {
		into.push(this);
	}
	getLength() {
		return this.to - this.from;
	}
	getSlice(from,to) {
		if(to > this.to - this.from) {
			to = this.to - this.from;
		}
		if(from < 0) {
			from = 0;
		}
		if(to <= from) {
			return null;
		} else if(to == this.to - this.from && from == 0) {
			return this;
		} else {
			return new tink_chunk_ByteChunk(this.data,this.from + from,to + this.from);
		}
	}
	slice(from,to) {
		var _g = this.getSlice(from,to);
		if(_g == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		} else {
			var v = _g;
			return v;
		}
	}
	blitTo(target,offset) {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		target.blit(offset,this.wrapped,this.from,this.to - this.from);
	}
	toBytes() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.sub(this.from,this.to - this.from);
	}
	toString() {
		if(this.wrapped == null) {
			this.wrapped = haxe_io_Bytes.ofData(this.data);
		}
		return this.wrapped.getString(this.from,this.to - this.from);
	}
	static of(b) {
		if(b.length == 0) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		}
		var ret = new tink_chunk_ByteChunk(b.b.bufferValue,0,b.length);
		ret.wrapped = b;
		return ret;
	}
}
tink_chunk_ByteChunk.__name__ = "tink.chunk.ByteChunk";
tink_chunk_ByteChunk.__interfaces__ = [tink_chunk_ChunkObject];
tink_chunk_ByteChunk.__super__ = tink_chunk_ChunkBase;
Object.assign(tink_chunk_ByteChunk.prototype, {
	__class__: tink_chunk_ByteChunk
	,data: null
	,from: null
	,to: null
	,wrapped: null
	,__properties__: {get_wrapped: "get_wrapped"}
});
class tink_chunk_ChunkCursor {
	constructor() {
		this.currentByte = -1;
		this.currentPos = 0;
		this.length = 0;
		this.curLength = 0;
		this.curOffset = 0;
		this.curPartIndex = 0;
	}
	clone() {
		var ret = new tink_chunk_ChunkCursor();
		ret.parts = this.parts.slice();
		ret.curPart = this.curPart;
		ret.curPartIndex = this.curPartIndex;
		ret.curOffset = this.curOffset;
		ret.curLength = this.curLength;
		ret.length = this.length;
		ret.currentPos = this.currentPos;
		ret.currentByte = this.currentByte;
		return ret;
	}
	reset() {
		this.length = 0;
		this.currentPos = 0;
		this.currentByte = -1;
		this.curOffset = 0;
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			this.length += p.to - p.from;
		}
		this.curPart = this.parts[this.curPartIndex = 0];
		if(this.curPart != null) {
			var _this = this.curPart;
			this.curLength = _this.to - _this.from;
			var _this1 = this.curPart;
			this.currentByte = _this1.data.bytes[_this1.from];
		}
	}
	flush() {
		var ret = this.left();
		this.shift();
		return ret;
	}
	prune() {
		this.shift();
	}
	add(chunk) {
		chunk.flatten(this.parts);
		this.reset();
	}
	shift(chunk) {
		this.parts.splice(0,this.curPartIndex);
		var _g = this.parts[0];
		if(_g != null) {
			var chunk1 = _g;
			var _g1 = chunk1.getSlice(this.curOffset,this.curLength);
			if(_g1 == null) {
				this.parts.shift();
			} else {
				var rest = _g1;
				this.parts[0] = rest;
			}
		}
		if(chunk != null) {
			this.add(chunk);
		} else {
			this.reset();
		}
	}
	clear() {
		this.parts = [];
		this.reset();
	}
	left() {
		if(this.curPart == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.curPartIndex;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.parts[i]);
		}
		var left = _g;
		left.push(this.curPart.slice(0,this.curOffset));
		return tink__$Chunk_Chunk_$Impl_$.join(left);
	}
	right() {
		if(this.curPart == null) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		}
		var _g = [];
		var _g1 = this.curPartIndex;
		var _g2 = this.parts.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(this.parts[i]);
		}
		var right = _g;
		if(right.length > 0) {
			right[0] = this.curPart.slice(this.curOffset,this.curLength);
		}
		return tink__$Chunk_Chunk_$Impl_$.join(right);
	}
	seek(seekable,options) {
		var _gthis = this;
		if(this.curPart == null || seekable == null || seekable.length == 0) {
			return haxe_ds_Option.None;
		}
		var max = seekable.length - 1;
		var first = seekable[0];
		var candidates = [];
		var count = 0;
		var copy = this.clone();
		copy.shift();
		var part = function(b,offset) {
			var data = b.data;
			var _g = b.from + offset;
			var _g1 = b.to;
			while(_g < _g1) {
				var i = _g++;
				var byte = data.bytes[i];
				if(candidates.length > 0) {
					var c = 0;
					while(c < count) {
						var pos = candidates[c];
						if(seekable[pos] == byte) {
							if(pos == max) {
								copy.moveTo(copy.currentPos + (i - (b.from + offset) - seekable.length + 1));
								var before = copy.left();
								var delta = before.getLength() + seekable.length;
								_gthis.moveTo(_gthis.currentPos + delta);
								if(options == null) {
									_gthis.shift();
								} else {
									var _g2 = options.withoutPruning;
									if(_g2 == null) {
										_gthis.shift();
									} else if(_g2 == false) {
										_gthis.shift();
									}
								}
								return haxe_ds_Option.Some(before);
							} else {
								candidates[c++] = pos + 1;
							}
						} else {
							count -= 1;
							var last = candidates.pop();
							if(count > c) {
								candidates[c] = last;
							}
						}
					}
				}
				if(byte == first) {
					count = candidates.push(1);
				}
			}
			copy.moveTo(copy.currentPos + (b.to - (b.from + offset)));
			return haxe_ds_Option.None;
		};
		var _g3 = part(this.curPart,this.curOffset);
		if(_g3._hx_index == 1) {
			var _g4 = this.curPartIndex + 1;
			var _g11 = this.parts.length;
			while(_g4 < _g11) {
				var i1 = _g4++;
				var _g5 = part(this.parts[i1],0);
				switch(_g5._hx_index) {
				case 0:
					var v = _g5.v;
					return haxe_ds_Option.Some(v);
				case 1:
					break;
				}
			}
			return haxe_ds_Option.None;
		} else {
			var v1 = _g3;
			return v1;
		}
	}
	sweep(len) {
		var data = this.right().slice(0,len);
		this.moveTo(this.currentPos + len);
		return data;
	}
	sweepTo(pos) {
		return this.sweep(pos - this.currentPos);
	}
	moveBy(delta) {
		return this.moveTo(this.currentPos + delta);
	}
	moveTo(position) {
		if(this.length == 0) {
			return 0;
		}
		if(position > this.length) {
			position = this.length - 1;
		}
		if(position < 0) {
			position = 0;
		}
		this.currentPos = position;
		if(position == this.length) {
			this.ffwd();
		} else {
			var _g = 0;
			var _g1 = this.parts.length;
			while(_g < _g1) {
				var i = _g++;
				var c = this.parts[i];
				var _g2 = c.to - c.from;
				var enough = _g2;
				if(enough > position) {
					this.curPart = c;
					this.curPartIndex = i;
					this.curOffset = position;
					this.curLength = c.to - c.from;
					this.currentByte = c.data.bytes[c.from + position];
					break;
				} else {
					var v = _g2;
					position -= v;
				}
			}
		}
		return this.currentPos;
	}
	ffwd() {
		this.currentByte = -1;
		this.curLength = 0;
		this.curOffset = 0;
		this.curPart = null;
		this.curPartIndex = this.parts.length;
	}
	next() {
		if(this.currentPos == this.length) {
			return false;
		}
		this.currentPos++;
		if(this.currentPos == this.length) {
			this.ffwd();
			return false;
		}
		if(this.curOffset == this.curLength - 1) {
			this.curOffset = 0;
			this.curPart = this.parts[++this.curPartIndex];
			var _this = this.curPart;
			this.curLength = _this.to - _this.from;
			var _this1 = this.curPart;
			this.currentByte = _this1.data.bytes[_this1.from];
		} else {
			var _this2 = this.curPart;
			this.currentByte = _this2.data.bytes[_this2.from + ++this.curOffset];
		}
		return true;
	}
	static create(parts) {
		var ret = new tink_chunk_ChunkCursor();
		ret.parts = parts;
		ret.reset();
		return ret;
	}
}
tink_chunk_ChunkCursor.__name__ = "tink.chunk.ChunkCursor";
Object.assign(tink_chunk_ChunkCursor.prototype, {
	__class__: tink_chunk_ChunkCursor
	,parts: null
	,curPart: null
	,curPartIndex: null
	,curOffset: null
	,curLength: null
	,length: null
	,currentPos: null
	,currentByte: null
});
class tink_chunk_ChunkIterator {
	constructor(target) {
		this.target = target;
		this._hasNext = target.length > target.currentPos;
	}
	hasNext() {
		return this._hasNext;
	}
	next() {
		var ret = this.target.currentByte;
		this._hasNext = this.target.next();
		return ret;
	}
}
tink_chunk_ChunkIterator.__name__ = "tink.chunk.ChunkIterator";
Object.assign(tink_chunk_ChunkIterator.prototype, {
	__class__: tink_chunk_ChunkIterator
	,target: null
	,_hasNext: null
});
class tink_chunk__$Seekable_Seekable_$Impl_$ {
	static _new(a) {
		var this1 = a;
		return this1;
	}
	static get_length(this1) {
		return this1.length;
	}
	static get(this1,index) {
		return this1[index];
	}
	static ofChunk(c) {
		return tink_chunk__$Seekable_Seekable_$Impl_$.ofBytes(c.toBytes());
	}
	static ofBytes(b) {
		var _g = [];
		var _g1 = 0;
		var _g2 = b.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(b.b[i]);
		}
		var this1 = _g;
		return this1;
	}
	static ofString(s) {
		return tink_chunk__$Seekable_Seekable_$Impl_$.ofBytes(haxe_io_Bytes.ofString(s));
	}
}
tink_chunk__$Seekable_Seekable_$Impl_$.__name__ = "tink.chunk._Seekable.Seekable_Impl_";
tink_chunk__$Seekable_Seekable_$Impl_$.__properties__ = {get_length: "get_length"};
class tink_chunk_nodejs_BufferChunk {
	constructor(buffer) {
		this.buffer = buffer;
	}
	getByte(i) {
		return this.buffer[i];
	}
	getCursor() {
		return tink_chunk_ByteChunk.of(this.toBytes()).getCursor();
	}
	flatten(into) {
		tink_chunk_ByteChunk.of(this.toBytes()).flatten(into);
	}
	getLength() {
		return this.buffer.length;
	}
	slice(from,to) {
		if(to > this.getLength()) {
			to = this.getLength();
		}
		if(from < 0) {
			from = 0;
		}
		if(to <= from) {
			return tink__$Chunk_Chunk_$Impl_$.EMPTY;
		} else if(to == this.getLength() && from == 0) {
			return this;
		} else {
			return new tink_chunk_nodejs_BufferChunk(this.buffer.slice(from,to));
		}
	}
	toString() {
		return this.buffer.toString();
	}
	toBytes() {
		var copy = tink_chunk_nodejs_BufferChunk.alloc(this.buffer.length);
		this.buffer.copy(copy);
		return js_node_buffer__$Buffer_Helper.bytesOfBuffer(copy);
	}
	blitTo(target,offset) {
		var data = target.b;
		this.buffer.copy(js_node_buffer_Buffer.from(data.buffer,data.byteOffset,target.length),offset);
		return;
	}
}
tink_chunk_nodejs_BufferChunk.__name__ = "tink.chunk.nodejs.BufferChunk";
tink_chunk_nodejs_BufferChunk.__interfaces__ = [tink_chunk_ChunkObject];
Object.assign(tink_chunk_nodejs_BufferChunk.prototype, {
	__class__: tink_chunk_nodejs_BufferChunk
	,buffer: null
});
class tink_core_Annex {
	constructor(target) {
		this.target = target;
		this.registry = new haxe_ds_ObjectMap();
	}
}
tink_core_Annex.__name__ = "tink.core.Annex";
Object.assign(tink_core_Annex.prototype, {
	__class__: tink_core_Annex
	,target: null
	,registry: null
});
class tink_core__$Callback_Callback_$Impl_$ {
	static _new(f) {
		var this1 = f;
		return this1;
	}
	static toFunction(this1) {
		return this1;
	}
	static invoke(this1,data) {
		if(tink_core__$Callback_Callback_$Impl_$.depth < 500) {
			tink_core__$Callback_Callback_$Impl_$.depth++;
			this1(data);
			tink_core__$Callback_Callback_$Impl_$.depth--;
		} else {
			var _e = this1;
			var f = function(data1) {
				tink_core__$Callback_Callback_$Impl_$.invoke(_e,data1);
			};
			var data2 = data;
			tink_core__$Callback_Callback_$Impl_$.defer(function() {
				f(data2);
			});
		}
	}
	static ignore(cb) {
		return function(_) {
			tink_core__$Callback_Callback_$Impl_$.invoke(cb,tink_core_Noise.Noise);
		};
	}
	static fromNiladic(f) {
		return f;
	}
	static fromMany(callbacks) {
		return function(v) {
			var _g = 0;
			while(_g < callbacks.length) {
				var callback = callbacks[_g];
				++_g;
				tink_core__$Callback_Callback_$Impl_$.invoke(callback,v);
			}
		};
	}
	static defer(f) {
		process.nextTick(f);
	}
}
tink_core__$Callback_Callback_$Impl_$.__name__ = "tink.core._Callback.Callback_Impl_";
class tink_core_LinkObject {
}
tink_core_LinkObject.__name__ = "tink.core.LinkObject";
Object.assign(tink_core_LinkObject.prototype, {
	__class__: tink_core_LinkObject
	,cancel: null
});
class tink_core__$Callback_CallbackLink_$Impl_$ {
	static _new(link) {
		var this1 = new tink_core_SimpleLink(link);
		return this1;
	}
	static cancel(this1) {
		if(this1 != null) {
			this1.cancel();
		}
	}
	static dissolve(this1) {
		if(this1 != null) {
			this1.cancel();
		}
	}
	static noop() {
	}
	static toFunction(this1) {
		if(this1 == null) {
			return tink_core__$Callback_CallbackLink_$Impl_$.noop;
		} else {
			return $bind(this1,this1.cancel);
		}
	}
	static toCallback(this1) {
		return function(_) {
			this1.cancel();
		};
	}
	static fromFunction(f) {
		var this1 = new tink_core_SimpleLink(f);
		return this1;
	}
	static join(a,b) {
		return new tink_core__$Callback_LinkPair(a,b);
	}
	static fromMany(callbacks) {
		var this1 = new tink_core_SimpleLink(function() {
			var _g = 0;
			while(_g < callbacks.length) {
				var cb = callbacks[_g];
				++_g;
				if(cb != null) {
					cb.cancel();
				}
			}
		});
		return this1;
	}
}
tink_core__$Callback_CallbackLink_$Impl_$.__name__ = "tink.core._Callback.CallbackLink_Impl_";
class tink_core_SimpleLink {
	constructor(f) {
		this.f = f;
	}
	cancel() {
		if(this.f != null) {
			this.f();
			this.f = null;
		}
	}
}
tink_core_SimpleLink.__name__ = "tink.core.SimpleLink";
tink_core_SimpleLink.__interfaces__ = [tink_core_LinkObject];
Object.assign(tink_core_SimpleLink.prototype, {
	__class__: tink_core_SimpleLink
	,f: null
});
class tink_core__$Callback_LinkPair {
	constructor(a,b) {
		this.dissolved = false;
		this.a = a;
		this.b = b;
	}
	cancel() {
		if(!this.dissolved) {
			this.dissolved = true;
			var this1 = this.a;
			if(this1 != null) {
				this1.cancel();
			}
			var this2 = this.b;
			if(this2 != null) {
				this2.cancel();
			}
			this.a = null;
			this.b = null;
		}
	}
}
tink_core__$Callback_LinkPair.__name__ = "tink.core._Callback.LinkPair";
tink_core__$Callback_LinkPair.__interfaces__ = [tink_core_LinkObject];
Object.assign(tink_core__$Callback_LinkPair.prototype, {
	__class__: tink_core__$Callback_LinkPair
	,a: null
	,b: null
	,dissolved: null
});
class tink_core__$Callback_ListCell {
	constructor(cb,list) {
		if(cb == null) {
			throw new js__$Boot_HaxeError("callback expected but null received");
		}
		this.cb = cb;
		this.list = list;
	}
	invoke(data) {
		if(this.cb != null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(this.cb,data);
		}
	}
	clear() {
		this.list = null;
		this.cb = null;
	}
	cancel() {
		var _g = this.list;
		if(_g != null) {
			var v = _g;
			this.clear();
			HxOverrides.remove(v,this);
		}
	}
}
tink_core__$Callback_ListCell.__name__ = "tink.core._Callback.ListCell";
tink_core__$Callback_ListCell.__interfaces__ = [tink_core_LinkObject];
Object.assign(tink_core__$Callback_ListCell.prototype, {
	__class__: tink_core__$Callback_ListCell
	,list: null
	,cb: null
});
class tink_core__$Callback_CallbackList_$Impl_$ {
	static _new() {
		var this1 = [];
		return this1;
	}
	static get_length(this1) {
		return this1.length;
	}
	static add(this1,cb) {
		var node = new tink_core__$Callback_ListCell(cb,this1);
		this1.push(node);
		return node;
	}
	static invoke(this1,data) {
		var _g = 0;
		var _g1 = this1.slice();
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			if(cell.cb != null) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cell.cb,data);
			}
		}
	}
	static clear(this1) {
		var _g = 0;
		var _g1 = this1.splice(0,this1.length);
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			cell.clear();
		}
	}
	static invokeAndClear(this1,data) {
		var _g = 0;
		var _g1 = this1.splice(0,this1.length);
		while(_g < _g1.length) {
			var cell = _g1[_g];
			++_g;
			if(cell.cb != null) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cell.cb,data);
			}
		}
	}
}
tink_core__$Callback_CallbackList_$Impl_$.__name__ = "tink.core._Callback.CallbackList_Impl_";
tink_core__$Callback_CallbackList_$Impl_$.__properties__ = {get_length: "get_length"};
class tink_core_TypedError {
	constructor(code,message,pos) {
		if(code == null) {
			code = 500;
		}
		this.isTinkError = true;
		this.code = code;
		this.message = message;
		this.pos = pos;
		this.exceptionStack = [];
		this.callStack = [];
	}
	printPos() {
		return this.pos.className + "." + this.pos.methodName + ":" + this.pos.lineNumber;
	}
	toString() {
		var ret = "Error#" + this.code + ": " + this.message;
		if(this.pos != null) {
			ret += " @ " + this.printPos();
		}
		return ret;
	}
	throwSelf() {
		var any = this;
		throw js__$Boot_HaxeError.wrap(any);
	}
	static withData(code,message,data,pos) {
		return tink_core_TypedError.typed(code,message,data,pos);
	}
	static typed(code,message,data,pos) {
		var ret = new tink_core_TypedError(code,message,pos);
		ret.data = data;
		return ret;
	}
	static ofJsError(e,pos) {
		return tink_core_TypedError.withData(500,e.message,e,pos);
	}
	static asError(v) {
		if(v != null && v.isTinkError) {
			return v;
		} else {
			return null;
		}
	}
	static catchExceptions(f,report,pos) {
		try {
			return tink_core_Outcome.Success(f());
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			var _g = tink_core_TypedError.asError(e1);
			var tmp;
			if(_g == null) {
				tmp = report == null ? tink_core_TypedError.withData(null,"Unexpected Error",e1,pos) : report(e1);
			} else {
				var e2 = _g;
				tmp = e2;
			}
			return tink_core_Outcome.Failure(tmp);
		}
	}
	static reporter(code,message,pos) {
		return function(e) {
			return tink_core_TypedError.withData(code,message,e,pos);
		};
	}
	static rethrow(any) {
		throw js__$Boot_HaxeError.wrap(any);
	}
	static tryFinally(f,cleanup) {
		try { return f(); } finally { cleanup(); }
		return null;
	}
}
tink_core_TypedError.__name__ = "tink.core.TypedError";
Object.assign(tink_core_TypedError.prototype, {
	__class__: tink_core_TypedError
	,message: null
	,code: null
	,data: null
	,pos: null
	,callStack: null
	,exceptionStack: null
	,isTinkError: null
});
class tink_core__$Error_Stack_$Impl_$ {
	static toString(this1) {
		return "Error stack not available. Compile with -D error_stack.";
	}
}
tink_core__$Error_Stack_$Impl_$.__name__ = "tink.core._Error.Stack_Impl_";
class tink_core__$Future_FutureObject {
}
tink_core__$Future_FutureObject.__name__ = "tink.core._Future.FutureObject";
Object.assign(tink_core__$Future_FutureObject.prototype, {
	__class__: tink_core__$Future_FutureObject
	,map: null
	,flatMap: null
	,handle: null
	,gather: null
	,eager: null
});
class tink_core__$Future_NeverFuture {
	constructor() {
	}
	map(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	flatMap(f) {
		return tink_core__$Future_NeverFuture.inst;
	}
	handle(callback) {
		return null;
	}
	gather() {
		return tink_core__$Future_NeverFuture.inst;
	}
	eager() {
		return tink_core__$Future_NeverFuture.inst;
	}
}
tink_core__$Future_NeverFuture.__name__ = "tink.core._Future.NeverFuture";
tink_core__$Future_NeverFuture.__interfaces__ = [tink_core__$Future_FutureObject];
Object.assign(tink_core__$Future_NeverFuture.prototype, {
	__class__: tink_core__$Future_NeverFuture
});
var tink_core_Noise = $hxEnums["tink.core.Noise"] = { __ename__ : "tink.core.Noise", __constructs__ : ["Noise"]
	,Noise: {_hx_index:0,__enum__:"tink.core.Noise",toString:$estr}
};
class tink_core__$Lazy_LazyObject {
}
tink_core__$Lazy_LazyObject.__name__ = "tink.core._Lazy.LazyObject";
Object.assign(tink_core__$Lazy_LazyObject.prototype, {
	__class__: tink_core__$Lazy_LazyObject
	,get: null
	,map: null
	,flatMap: null
});
class tink_core__$Lazy_LazyConst {
	constructor(value) {
		this.value = value;
	}
	get() {
		return this.value;
	}
	map(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value);
		});
	}
	flatMap(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			return f(_gthis.value).get();
		});
	}
}
tink_core__$Lazy_LazyConst.__name__ = "tink.core._Lazy.LazyConst";
tink_core__$Lazy_LazyConst.__interfaces__ = [tink_core__$Lazy_LazyObject];
Object.assign(tink_core__$Lazy_LazyConst.prototype, {
	__class__: tink_core__$Lazy_LazyConst
	,value: null
});
class tink_core__$Future_SyncFuture {
	constructor(value) {
		this.value = value;
	}
	map(f) {
		return new tink_core__$Future_SyncFuture(this.value.map(f));
	}
	flatMap(f) {
		var l = this.value.map(f);
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return l.get().handle(cb);
		});
	}
	handle(cb) {
		tink_core__$Callback_Callback_$Impl_$.invoke(cb,this.value.get());
		return null;
	}
	eager() {
		return this;
	}
	gather() {
		return this;
	}
}
tink_core__$Future_SyncFuture.__name__ = "tink.core._Future.SyncFuture";
tink_core__$Future_SyncFuture.__interfaces__ = [tink_core__$Future_FutureObject];
Object.assign(tink_core__$Future_SyncFuture.prototype, {
	__class__: tink_core__$Future_SyncFuture
	,value: null
});
class tink_core__$Future_Future_$Impl_$ {
	static _new(f) {
		var this1 = new tink_core__$Future_SimpleFuture(f);
		return this1;
	}
	static first(this1,other) {
		var ret = new tink_core_FutureTrigger();
		var l1 = this1.handle($bind(ret,ret.trigger));
		var l2 = other.handle($bind(ret,ret.trigger));
		var ret1 = ret;
		if(l1 != null) {
			var this2 = l1;
			ret1.handle(function(_) {
				this2.cancel();
			});
		}
		if(l2 != null) {
			var this3 = l2;
			ret1.handle(function(_1) {
				this3.cancel();
			});
		}
		return ret1;
	}
	static map(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		var ret = this1.map(f);
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static flatMap(this1,next,gather) {
		if(gather == null) {
			gather = true;
		}
		var ret = this1.flatMap(next);
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static next(this1,n) {
		return this1.flatMap(function(v) {
			return n(v);
		});
	}
	static merge(this1,other,merger,gather) {
		if(gather == null) {
			gather = true;
		}
		var ret = this1.flatMap(function(t) {
			var ret1 = other.map(function(a) {
				return merger(t,a);
			});
			return ret1;
		});
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static flatten(f) {
		return new tink_core__$Future_NestedFuture(f);
	}
	static ofJsPromise(promise) {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			promise.then(function(a) {
				cb(tink_core_Outcome.Success(a));
			}).catch(function(e) {
				var tmp = tink_core_Outcome.Failure(tink_core_TypedError.withData(null,e.message,e,{ fileName : "tink/core/Future.hx", lineNumber : 83, className : "tink.core._Future.Future_Impl_", methodName : "ofJsPromise"}));
				cb(tmp);
			});
		});
	}
	static ofAny(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}
	static asPromise(s) {
		return s;
	}
	static ofMany(futures,gather) {
		if(gather == null) {
			gather = true;
		}
		var ret = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst([]));
		var _g = 0;
		while(_g < futures.length) {
			var f = [futures[_g]];
			++_g;
			var ret1 = ret.flatMap((function(f1) {
				return function(results) {
					var ret2 = (function() {
						return function(result) {
							return results.concat([result]);
						};
					})();
					var ret3 = f1[0].map(ret2);
					return ret3;
				};
			})(f));
			ret = ret1;
		}
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static fromMany(futures) {
		return tink_core__$Future_Future_$Impl_$.ofMany(futures);
	}
	static lazy(l) {
		return new tink_core__$Future_SyncFuture(l);
	}
	static sync(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
	}
	static async(f,lazy) {
		if(lazy == null) {
			lazy = false;
		}
		if(lazy) {
			return new tink_core__$Future_LazyTrigger(f);
		} else {
			var op = new tink_core_FutureTrigger();
			var wrapped = f;
			tink_core__$Callback_Callback_$Impl_$.invoke(wrapped,$bind(op,op.trigger));
			return op;
		}
	}
	static or(a,b) {
		return tink_core__$Future_Future_$Impl_$.first(a,b);
	}
	static either(a,b) {
		var ret = a.map(haxe_ds_Either.Left);
		var ret1 = b.map(haxe_ds_Either.Right);
		return tink_core__$Future_Future_$Impl_$.first(ret,ret1);
	}
	static and(a,b) {
		return tink_core__$Future_Future_$Impl_$.merge(a,b,function(a1,b1) {
			var this1 = new tink_core_MPair(a1,b1);
			return this1;
		});
	}
	static _tryFailingFlatMap(f,map) {
		var ret = f.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return map(d);
			case 1:
				var f1 = o.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
			}
		});
		return ret.gather();
	}
	static _tryFlatMap(f,map) {
		var ret = f.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				var ret1 = map(d).map(tink_core_Outcome.Success);
				return ret1.gather();
			case 1:
				var f1 = o.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
			}
		});
		return ret.gather();
	}
	static _tryFailingMap(f,map) {
		var ret = f.map(function(o) {
			return tink_core_OutcomeTools.flatMap(o,tink_core__$Outcome_OutcomeMapper_$Impl_$.withSameError(map));
		});
		return ret.gather();
	}
	static _tryMap(f,map) {
		var ret = f.map(function(o) {
			return tink_core_OutcomeTools.map(o,map);
		});
		return ret.gather();
	}
	static _flatMap(f,map) {
		var ret = f.flatMap(map);
		return ret.gather();
	}
	static _map(f,map) {
		var ret = f.map(map);
		return ret.gather();
	}
	static trigger() {
		return new tink_core_FutureTrigger();
	}
	static delay(ms,value) {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			haxe_Timer.delay(function() {
				cb(value.get());
			},ms);
		});
	}
}
tink_core__$Future_Future_$Impl_$.__name__ = "tink.core._Future.Future_Impl_";
class tink_core__$Future_SimpleFuture {
	constructor(f) {
		this.f = f;
	}
	handle(callback) {
		return this.f(callback);
	}
	map(f) {
		var _gthis = this;
		return new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var tmp = f(v);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,tmp);
			});
		});
	}
	flatMap(f) {
		var f1 = f;
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.flatten(new tink_core__$Future_SimpleFuture(function(cb) {
			return _gthis.f(function(v) {
				var tmp = f1(v);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,tmp);
			});
		}));
	}
	gather() {
		if(this.gathered != null) {
			return this.gathered;
		} else {
			return this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		}
	}
	eager() {
		var ret = this.gathered != null ? this.gathered : this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		ret.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return ret;
	}
}
tink_core__$Future_SimpleFuture.__name__ = "tink.core._Future.SimpleFuture";
tink_core__$Future_SimpleFuture.__interfaces__ = [tink_core__$Future_FutureObject];
Object.assign(tink_core__$Future_SimpleFuture.prototype, {
	__class__: tink_core__$Future_SimpleFuture
	,f: null
	,gathered: null
});
class tink_core__$Future_NestedFuture {
	constructor(outer) {
		this.outer = outer;
	}
	map(f) {
		var ret = this.outer.flatMap(function(inner) {
			var ret1 = inner.map(f);
			return ret1.gather();
		});
		return ret.gather();
	}
	flatMap(f) {
		var ret = this.outer.flatMap(function(inner) {
			var ret1 = inner.flatMap(f);
			return ret1.gather();
		});
		return ret.gather();
	}
	gather() {
		if(this.gathered != null) {
			return this.gathered;
		} else {
			return this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		}
	}
	eager() {
		var ret = this.gathered != null ? this.gathered : this.gathered = tink_core_FutureTrigger.gatherFuture(this);
		ret.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
		}));
		return ret;
	}
	handle(cb) {
		var ret = null;
		ret = this.outer.handle(function(inner) {
			ret = inner.handle(function(result) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,result);
			});
		});
		return ret;
	}
}
tink_core__$Future_NestedFuture.__name__ = "tink.core._Future.NestedFuture";
tink_core__$Future_NestedFuture.__interfaces__ = [tink_core__$Future_FutureObject];
Object.assign(tink_core__$Future_NestedFuture.prototype, {
	__class__: tink_core__$Future_NestedFuture
	,outer: null
	,gathered: null
});
class tink_core_FutureTrigger {
	constructor() {
		if(tink_core_FutureTrigger._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		var this1 = [];
		this.list = this1;
	}
	handle(callback) {
		var _g = this.list;
		if(_g == null) {
			tink_core__$Callback_Callback_$Impl_$.invoke(callback,this.result);
			return null;
		} else {
			var v = _g;
			return tink_core__$Callback_CallbackList_$Impl_$.add(v,callback);
		}
	}
	map(f) {
		var _g = this.list;
		if(_g == null) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(this.result)));
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v1) {
				var tmp = f(v1);
				ret.trigger(tmp);
			});
			return ret;
		}
	}
	flatMap(f) {
		var _g = this.list;
		if(_g == null) {
			return f(this.result);
		} else {
			var v = _g;
			var ret = new tink_core_FutureTrigger();
			tink_core__$Callback_CallbackList_$Impl_$.add(this.list,function(v1) {
				f(v1).handle($bind(ret,ret.trigger));
			});
			return ret;
		}
	}
	gather() {
		return this;
	}
	eager() {
		return this;
	}
	asFuture() {
		return this;
	}
	trigger(result) {
		if(this.list == null) {
			return false;
		} else {
			var list = this.list;
			this.list = null;
			this.result = result;
			tink_core__$Callback_CallbackList_$Impl_$.invoke(list,result);
			tink_core__$Callback_CallbackList_$Impl_$.clear(list);
			return true;
		}
	}
	static gatherFuture(f) {
		var op = null;
		var this1 = new tink_core__$Future_SimpleFuture(function(cb) {
			if(op == null) {
				op = new tink_core_FutureTrigger();
				f.handle($bind(op,op.trigger));
				f = null;
			}
			return op.handle(cb);
		});
		return this1;
	}
}
tink_core_FutureTrigger.__name__ = "tink.core.FutureTrigger";
tink_core_FutureTrigger.__interfaces__ = [tink_core__$Future_FutureObject];
Object.assign(tink_core_FutureTrigger.prototype, {
	__class__: tink_core_FutureTrigger
	,result: null
	,list: null
});
class tink_core__$Future_LazyTrigger extends tink_core_FutureTrigger {
	constructor(op) {
		tink_core_FutureTrigger._hx_skip_constructor = true;
		super();
		tink_core_FutureTrigger._hx_skip_constructor = false;
		this._hx_constructor(op);
	}
	_hx_constructor(op) {
		if(op == null) {
			throw new js__$Boot_HaxeError("invalid argument");
		}
		this.op = op;
		super._hx_constructor();
	}
	eager() {
		if(this.op != null) {
			var op = this.op;
			this.op = null;
			tink_core__$Callback_Callback_$Impl_$.invoke(op,$bind(this,this.trigger));
		}
		return this;
	}
	map(f) {
		var _gthis = this;
		if(this.op == null) {
			return super.map(f);
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				_gthis.handle(function(v) {
					var tmp = f(v);
					cb(tmp);
				});
			},true);
		}
	}
	flatMap(f) {
		var _gthis = this;
		if(this.op == null) {
			return super.flatMap(f);
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				_gthis.handle(function(v) {
					f(v).handle(cb);
				});
			},true);
		}
	}
	handle(cb) {
		this.eager();
		return super.handle(cb);
	}
}
tink_core__$Future_LazyTrigger.__name__ = "tink.core._Future.LazyTrigger";
tink_core__$Future_LazyTrigger.__super__ = tink_core_FutureTrigger;
Object.assign(tink_core__$Future_LazyTrigger.prototype, {
	__class__: tink_core__$Future_LazyTrigger
	,op: null
});
class tink_core_JsPromiseTools {
	static toSurprise(promise) {
		return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
	}
	static toPromise(promise) {
		return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
	}
}
tink_core_JsPromiseTools.__name__ = "tink.core.JsPromiseTools";
class tink_core__$Lazy_Lazy_$Impl_$ {
	static get(this1) {
		return this1.get();
	}
	static ofFunc(f) {
		return new tink_core__$Lazy_LazyFunc(f);
	}
	static map(this1,f) {
		return this1.map(f);
	}
	static flatMap(this1,f) {
		return this1.flatMap(f);
	}
	static ofConst(c) {
		return new tink_core__$Lazy_LazyConst(c);
	}
}
tink_core__$Lazy_Lazy_$Impl_$.__name__ = "tink.core._Lazy.Lazy_Impl_";
class tink_core__$Lazy_LazyFunc {
	constructor(f) {
		this.busy = false;
		this.f = f;
	}
	get() {
		if(this.busy) {
			throw new js__$Boot_HaxeError(new tink_core_TypedError(null,"circular lazyness",{ fileName : "tink/core/Lazy.hx", lineNumber : 54, className : "tink.core._Lazy.LazyFunc", methodName : "get"}));
		}
		if(this.f != null) {
			this.busy = true;
			this.result = this.f();
			this.f = null;
			this.busy = false;
		}
		return this.result;
	}
	map(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var tmp = _gthis.get();
			return f(tmp);
		});
	}
	flatMap(f) {
		var _gthis = this;
		return new tink_core__$Lazy_LazyFunc(function() {
			var this1 = _gthis.get();
			return f(this1).get();
		});
	}
}
tink_core__$Lazy_LazyFunc.__name__ = "tink.core._Lazy.LazyFunc";
tink_core__$Lazy_LazyFunc.__interfaces__ = [tink_core__$Lazy_LazyObject];
Object.assign(tink_core__$Lazy_LazyFunc.prototype, {
	__class__: tink_core__$Lazy_LazyFunc
	,f: null
	,result: null
	,busy: null
});
class tink_core_NamedWith {
	constructor(name,value) {
		this.name = name;
		this.value = value;
	}
}
tink_core_NamedWith.__name__ = "tink.core.NamedWith";
Object.assign(tink_core_NamedWith.prototype, {
	__class__: tink_core_NamedWith
	,name: null
	,value: null
});
class tink_core_OptionTools {
	static force(o,pos) {
		if(o._hx_index == 0) {
			var v = o.v;
			return v;
		} else {
			throw new js__$Boot_HaxeError(new tink_core_TypedError(404,"Some value expected but none found",pos));
		}
	}
	static or(o,l) {
		if(o._hx_index == 0) {
			var v = o.v;
			return v;
		} else {
			return l.get();
		}
	}
	static orNull(o) {
		if(o._hx_index == 0) {
			var v = o.v;
			return v;
		} else {
			return null;
		}
	}
	static filter(o,f) {
		if(o._hx_index == 0) {
			if(f(o.v) == false) {
				return haxe_ds_Option.None;
			} else {
				return o;
			}
		} else {
			return o;
		}
	}
	static satisfies(o,f) {
		if(o._hx_index == 0) {
			var v = o.v;
			return f(v);
		} else {
			return false;
		}
	}
	static equals(o,v) {
		if(o._hx_index == 0) {
			var v1 = o.v;
			return v1 == v;
		} else {
			return false;
		}
	}
	static map(o,f) {
		if(o._hx_index == 0) {
			var v = o.v;
			return haxe_ds_Option.Some(f(v));
		} else {
			return haxe_ds_Option.None;
		}
	}
	static flatMap(o,f) {
		if(o._hx_index == 0) {
			var v = o.v;
			return f(v);
		} else {
			return haxe_ds_Option.None;
		}
	}
	static iterator(o) {
		return new tink_core_OptionIter(o);
	}
	static toArray(o) {
		if(o._hx_index == 0) {
			var v = o.v;
			return [v];
		} else {
			return [];
		}
	}
}
tink_core_OptionTools.__name__ = "tink.core.OptionTools";
class tink_core_OptionIter {
	constructor(o) {
		this.alive = true;
		if(o._hx_index == 0) {
			var v = o.v;
			this.value = v;
		} else {
			this.alive = false;
		}
	}
	hasNext() {
		return this.alive;
	}
	next() {
		this.alive = false;
		return this.value;
	}
}
tink_core_OptionIter.__name__ = "tink.core.OptionIter";
Object.assign(tink_core_OptionIter.prototype, {
	__class__: tink_core_OptionIter
	,value: null
	,alive: null
});
var tink_core_Outcome = $hxEnums["tink.core.Outcome"] = { __ename__ : "tink.core.Outcome", __constructs__ : ["Success","Failure"]
	,Success: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Failure: ($_=function(failure) { return {_hx_index:1,failure:failure,__enum__:"tink.core.Outcome",toString:$estr}; },$_.__params__ = ["failure"],$_)
};
class tink_core_OutcomeTools {
	static sure(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var data = outcome.data;
			return data;
		case 1:
			var failure = outcome.failure;
			var _g = tink_core_TypedError.asError(failure);
			if(_g == null) {
				throw new js__$Boot_HaxeError(failure);
			} else {
				var e = _g;
				return e.throwSelf();
			}
			break;
		}
	}
	static toOption(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var data = outcome.data;
			return haxe_ds_Option.Some(data);
		case 1:
			var _g1 = outcome.failure;
			return haxe_ds_Option.None;
		}
	}
	static toOutcome(option,pos) {
		switch(option._hx_index) {
		case 0:
			var value = option.v;
			return tink_core_Outcome.Success(value);
		case 1:
			return tink_core_Outcome.Failure(new tink_core_TypedError(404,"Some value expected but none found in " + pos.fileName + "@line " + pos.lineNumber,{ fileName : "tink/core/Outcome.hx", lineNumber : 47, className : "tink.core.OutcomeTools", methodName : "toOutcome"}));
		}
	}
	static orNull(outcome) {
		switch(outcome._hx_index) {
		case 0:
			var data = outcome.data;
			return data;
		case 1:
			var _g1 = outcome.failure;
			return null;
		}
	}
	static orUse(outcome,fallback) {
		switch(outcome._hx_index) {
		case 0:
			var data = outcome.data;
			return data;
		case 1:
			var _g1 = outcome.failure;
			return fallback.get();
		}
	}
	static orTry(outcome,fallback) {
		switch(outcome._hx_index) {
		case 0:
			var _g = outcome.data;
			return outcome;
		case 1:
			var _g1 = outcome.failure;
			return fallback.get();
		}
	}
	static equals(outcome,to) {
		switch(outcome._hx_index) {
		case 0:
			var data = outcome.data;
			return data == to;
		case 1:
			var _g1 = outcome.failure;
			return false;
		}
	}
	static map(outcome,transform) {
		switch(outcome._hx_index) {
		case 0:
			var a = outcome.data;
			return tink_core_Outcome.Success(transform(a));
		case 1:
			var f = outcome.failure;
			return tink_core_Outcome.Failure(f);
		}
	}
	static isSuccess(outcome) {
		if(outcome._hx_index == 0) {
			var _g = outcome.data;
			return true;
		} else {
			return false;
		}
	}
	static flatMap(o,mapper) {
		return tink_core__$Outcome_OutcomeMapper_$Impl_$.apply(mapper,o);
	}
	static swap(outcome,v) {
		switch(outcome._hx_index) {
		case 0:
			var a = outcome.data;
			return tink_core_Outcome.Success(v);
		case 1:
			var f = outcome.failure;
			return tink_core_Outcome.Failure(f);
		}
	}
	static attempt(f,report) {
		try {
			return tink_core_Outcome.Success(f());
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return tink_core_Outcome.Failure(report(((e) instanceof js__$Boot_HaxeError) ? e.val : e));
		}
	}
	static flatten(o) {
		switch(o._hx_index) {
		case 0:
			var _g = o.data;
			switch(_g._hx_index) {
			case 0:
				var d = _g.data;
				return tink_core_Outcome.Success(d);
			case 1:
				var f = _g.failure;
				return tink_core_Outcome.Failure(f);
			}
			break;
		case 1:
			var f1 = o.failure;
			return tink_core_Outcome.Failure(f1);
		}
	}
}
tink_core_OutcomeTools.__name__ = "tink.core.OutcomeTools";
class tink_core__$Outcome_OutcomeMapper_$Impl_$ {
	static _new(f) {
		var this1 = { f : f};
		return this1;
	}
	static apply(this1,o) {
		return this1.f(o);
	}
	static withSameError(f) {
		return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return f(d);
			case 1:
				var f1 = o.failure;
				return tink_core_Outcome.Failure(f1);
			}
		});
	}
	static withEitherError(f) {
		return tink_core__$Outcome_OutcomeMapper_$Impl_$._new(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				var _g = f(d);
				switch(_g._hx_index) {
				case 0:
					var d1 = _g.data;
					return tink_core_Outcome.Success(d1);
				case 1:
					var f1 = _g.failure;
					return tink_core_Outcome.Failure(haxe_ds_Either.Right(f1));
				}
				break;
			case 1:
				var f2 = o.failure;
				return tink_core_Outcome.Failure(haxe_ds_Either.Left(f2));
			}
		});
	}
}
tink_core__$Outcome_OutcomeMapper_$Impl_$.__name__ = "tink.core._Outcome.OutcomeMapper_Impl_";
class tink_core__$Pair_Pair_$Impl_$ {
	static _new(a,b) {
		var this1 = new tink_core_MPair(a,b);
		return this1;
	}
	static get_a(this1) {
		return this1.a;
	}
	static get_b(this1) {
		return this1.b;
	}
	static toBool(this1) {
		return this1 != null;
	}
	static isNil(this1) {
		return this1 == null;
	}
	static nil() {
		return null;
	}
}
tink_core__$Pair_Pair_$Impl_$.__name__ = "tink.core._Pair.Pair_Impl_";
tink_core__$Pair_Pair_$Impl_$.__properties__ = {get_b: "get_b",get_a: "get_a"};
class tink_core_MPair {
	constructor(a,b) {
		this.a = a;
		this.b = b;
	}
}
tink_core_MPair.__name__ = "tink.core.MPair";
Object.assign(tink_core_MPair.prototype, {
	__class__: tink_core_MPair
	,a: null
	,b: null
});
class tink_core__$Promise_Promise_$Impl_$ {
	static _new(f,lazy) {
		if(lazy == null) {
			lazy = false;
		}
		var this1 = tink_core__$Future_Future_$Impl_$.async(function(cb) {
			f(function(v) {
				cb(tink_core_Outcome.Success(v));
			},function(e) {
				cb(tink_core_Outcome.Failure(e));
			});
		},lazy);
		return this1;
	}
	static eager(this1) {
		return this1.eager();
	}
	static map(this1,f) {
		var ret = this1.map(f);
		return ret.gather();
	}
	static flatMap(this1,f) {
		var ret = this1.flatMap(f);
		return ret.gather();
	}
	static tryRecover(this1,f) {
		var ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	}
	static recover(this1,f) {
		var ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
			case 1:
				var e = o.failure;
				return f(e);
			}
		});
		return ret.gather();
	}
	static mapError(this1,f) {
		var ret = this1.map(function(o) {
			switch(o._hx_index) {
			case 0:
				var _g = o.data;
				return o;
			case 1:
				var e = o.failure;
				return tink_core_Outcome.Failure(f(e));
			}
		});
		return ret.gather();
	}
	static handle(this1,cb) {
		return this1.handle(cb);
	}
	static noise(this1) {
		return tink_core__$Promise_Promise_$Impl_$.next(this1,function(v) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
		});
	}
	static isSuccess(this1) {
		var ret = this1.map(function(o) {
			return tink_core_OutcomeTools.isSuccess(o);
		});
		return ret.gather();
	}
	static next(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		var ret = this1.flatMap(function(o) {
			switch(o._hx_index) {
			case 0:
				var d = o.data;
				return f(d);
			case 1:
				var f1 = o.failure;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(f1)));
			}
		});
		if(gather) {
			return ret.gather();
		} else {
			return ret;
		}
	}
	static swap(this1,v) {
		return tink_core__$Future_Future_$Impl_$._tryMap(this1,function(_) {
			return v;
		});
	}
	static swapError(this1,e) {
		return tink_core__$Promise_Promise_$Impl_$.mapError(this1,function(_) {
			return e;
		});
	}
	static merge(this1,other,merger,gather) {
		if(gather == null) {
			gather = true;
		}
		return tink_core__$Promise_Promise_$Impl_$.next(this1,function(t) {
			return tink_core__$Promise_Promise_$Impl_$.next(other,function(a) {
				return merger(t,a);
			},false);
		},gather);
	}
	static and(a,b) {
		return tink_core__$Promise_Promise_$Impl_$.merge(a,b,function(a1,b1) {
			var this1 = new tink_core_MPair(a1,b1);
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(this1)));
		});
	}
	static iterate(promises,$yield,fallback,lazy) {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var iter = $getIterator(promises);
			var next = null;
			next = function() {
				if(iter.hasNext()) {
					iter.next().handle(function(o) {
						switch(o._hx_index) {
						case 0:
							var v = o.data;
							$yield(v).handle(function(o1) {
								switch(o1._hx_index) {
								case 0:
									var _g = o1.data;
									switch(_g._hx_index) {
									case 0:
										var ret = _g.v;
										cb(tink_core_Outcome.Success(ret));
										break;
									case 1:
										next();
										break;
									}
									break;
								case 1:
									var e = o1.failure;
									cb(tink_core_Outcome.Failure(e));
									break;
								}
							});
							break;
						case 1:
							var e1 = o.failure;
							cb(tink_core_Outcome.Failure(e1));
							break;
						}
					});
				} else {
					fallback.handle(cb);
				}
			};
			next();
		},lazy);
	}
	static retry(gen,next) {
		var stamp = function() {
			return Date.now() / 1000 * 1000;
		};
		var start = stamp();
		var attempt = null;
		attempt = function(count) {
			var f = function(error) {
				var f1 = stamp() - start;
				return tink_core__$Promise_Promise_$Impl_$.next(next({ attempt : count, error : error, elapsed : f1}),function(_) {
					return attempt(count + 1);
				});
			};
			var ret = gen().flatMap(function(o) {
				switch(o._hx_index) {
				case 0:
					var d = o.data;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
				case 1:
					var e = o.failure;
					return f(e);
				}
			});
			return ret.gather();
		};
		return attempt(1);
	}
	static ofJsPromise(promise) {
		return tink_core__$Future_Future_$Impl_$.ofJsPromise(promise);
	}
	static toJsPromise(this1) {
		return new Promise(function(resolve,reject) {
			this1.handle(function(o) {
				switch(o._hx_index) {
				case 0:
					var v = o.data;
					resolve(v);
					break;
				case 1:
					var e = o.failure;
					reject(new tink_core__$Promise_TinkError(e));
					break;
				}
			});
		});
	}
	static ofSpecific(s) {
		return s;
	}
	static ofFuture(f) {
		var ret = f.map(tink_core_Outcome.Success);
		return ret.gather();
	}
	static ofOutcome(o) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(o));
	}
	static ofError(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
	static ofData(d) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(d)));
	}
	static lazy(p) {
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			p.get().handle(cb);
		},true);
	}
	static inParallel(a,concurrency,lazy) {
		if(a.length == 0) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
		} else {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				var result = [];
				var pending = a.length;
				var links = null;
				var linkArray = [];
				var sync = false;
				var i = 0;
				var iter = HxOverrides.iter(a);
				var next = null;
				var done = function(o) {
					if(links == null) {
						sync = true;
					} else if(links != null) {
						links.cancel();
					}
					cb(o);
				};
				var fail = function(e) {
					pending = 0;
					done(tink_core_Outcome.Failure(e));
				};
				var set = function(index,value) {
					result[index] = value;
					if((pending -= 1) == 0) {
						done(tink_core_Outcome.Success(result));
					} else if(iter.hasNext() && pending > 0) {
						next();
					}
				};
				next = function() {
					i += 1;
					var index1 = i - 1;
					var next1 = iter.next().handle(function(o1) {
						switch(o1._hx_index) {
						case 0:
							var v = o1.data;
							set(index1,v);
							break;
						case 1:
							var e1 = o1.failure;
							fail(e1);
							break;
						}
					});
					linkArray.push(next1);
				};
				while(true) {
					var tmp;
					if(iter.hasNext() && pending > 0) {
						if(concurrency != null) {
							concurrency -= 1;
							tmp = concurrency + 1 > 0;
						} else {
							tmp = true;
						}
					} else {
						tmp = false;
					}
					if(!tmp) {
						break;
					}
					next();
				}
				links = tink_core__$Callback_CallbackLink_$Impl_$.fromMany(linkArray);
				if(sync) {
					if(links != null) {
						links.cancel();
					}
				}
			},lazy);
		}
	}
	static inSequence(a) {
		var loop = null;
		loop = function(index) {
			if(index == a.length) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([])));
			} else {
				return tink_core__$Promise_Promise_$Impl_$.next(a[index],function(head) {
					return tink_core__$Promise_Promise_$Impl_$.next(loop(index + 1),function(tail) {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success([head].concat(tail))));
					});
				});
			}
		};
		return loop(0);
	}
	static cache(gen) {
		var p = null;
		return function() {
			var ret = p;
			if(ret == null) {
				var sync = false;
				ret = tink_core__$Promise_Promise_$Impl_$.next(gen(),function(o) {
					o.b.handle(function(_) {
						sync = true;
						p = null;
					});
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(o.a)));
				});
				if(!sync) {
					p = ret;
				}
			}
			var ret1 = ret.map(function(o1) {
				if(!tink_core_OutcomeTools.isSuccess(o1)) {
					p = null;
				}
				return o1;
			});
			return ret1.gather();
		};
	}
	static lift(p) {
		return p;
	}
	static trigger() {
		var this1 = new tink_core_FutureTrigger();
		return this1;
	}
	static resolve(v) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(v)));
	}
	static reject(e) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(e)));
	}
}
tink_core__$Promise_Promise_$Impl_$.__name__ = "tink.core._Promise.Promise_Impl_";
class tink_core__$Promise_Next_$Impl_$ {
	static ofSafe(f) {
		return function(x) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x)));
		};
	}
	static ofSync(f) {
		return function(x) {
			var ret = f(x).map(tink_core_Outcome.Success);
			return ret.gather();
		};
	}
	static ofSafeSync(f) {
		return function(x) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x))));
		};
	}
	static _chain(a,b) {
		return function(v) {
			return tink_core__$Promise_Promise_$Impl_$.next(a(v),b);
		};
	}
}
tink_core__$Promise_Next_$Impl_$.__name__ = "tink.core._Promise.Next_Impl_";
class tink_core__$Promise_Recover_$Impl_$ {
	static ofSync(f) {
		return function(e) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(e)));
		};
	}
}
tink_core__$Promise_Recover_$Impl_$.__name__ = "tink.core._Promise.Recover_Impl_";
class tink_core__$Promise_Combiner_$Impl_$ {
	static ofSafe(f) {
		return function(x1,x2) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(x1,x2)));
		};
	}
	static ofSync(f) {
		return function(x1,x2) {
			var ret = f(x1,x2).map(tink_core_Outcome.Success);
			return ret.gather();
		};
	}
	static ofSafeSync(f) {
		return function(x1,x2) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(f(x1,x2))));
		};
	}
}
tink_core__$Promise_Combiner_$Impl_$.__name__ = "tink.core._Promise.Combiner_Impl_";
class tink_core__$Promise_PromiseTrigger_$Impl_$ {
	static _new() {
		var this1 = new tink_core_FutureTrigger();
		return this1;
	}
	static resolve(this1,v) {
		return this1.trigger(tink_core_Outcome.Success(v));
	}
	static reject(this1,e) {
		return this1.trigger(tink_core_Outcome.Failure(e));
	}
	static asPromise(this1) {
		return this1;
	}
}
tink_core__$Promise_PromiseTrigger_$Impl_$.__name__ = "tink.core._Promise.PromiseTrigger_Impl_";
class tink_core__$Promise_TinkError extends Error {
	constructor(e) {
		super(e.message);
		this.data = e;
	}
}
tink_core__$Promise_TinkError.__name__ = "tink.core._Promise.TinkError";
tink_core__$Promise_TinkError.__super__ = Error;
Object.assign(tink_core__$Promise_TinkError.prototype, {
	__class__: tink_core__$Promise_TinkError
	,data: null
});
class tink_core__$Ref_Ref_$Impl_$ {
	static _new() {
		var this1 = new Array(1);
		var this2 = this1;
		return this2;
	}
	static get_value(this1) {
		return this1[0];
	}
	static set_value(this1,param) {
		return this1[0] = param;
	}
	static toString(this1) {
		return "@[" + Std.string(this1[0]) + "]";
	}
	static to(v) {
		var this1 = new Array(1);
		var this2 = this1;
		var ret = this2;
		ret[0] = v;
		return ret;
	}
}
tink_core__$Ref_Ref_$Impl_$.__name__ = "tink.core._Ref.Ref_Impl_";
tink_core__$Ref_Ref_$Impl_$.__properties__ = {set_value: "set_value",get_value: "get_value"};
class tink_core__$Signal_Signal_$Impl_$ {
	static _new(f) {
		var this1 = new tink_core__$Signal_SimpleSignal(f);
		return this1;
	}
	static map(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.handle(function(result) {
				var this3 = f(result);
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,this3);
			});
		});
		var ret = this2;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
	static flatMap(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.handle(function(result) {
				f(result).handle(cb);
			});
		});
		var ret = this2;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
	static filter(this1,f,gather) {
		if(gather == null) {
			gather = true;
		}
		var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.handle(function(result) {
				if(f(result)) {
					tink_core__$Callback_Callback_$Impl_$.invoke(cb,result);
				}
			});
		});
		var ret = this2;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
	static select(this1,selector,gather) {
		if(gather == null) {
			gather = true;
		}
		var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return this1.handle(function(result) {
				var _g = selector(result);
				switch(_g._hx_index) {
				case 0:
					var v = _g.v;
					tink_core__$Callback_Callback_$Impl_$.invoke(cb,v);
					break;
				case 1:
					break;
				}
			});
		});
		var ret = this2;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
	static join(this1,other,gather) {
		if(gather == null) {
			gather = true;
		}
		var this2 = new tink_core__$Signal_SimpleSignal(function(cb) {
			return new tink_core__$Callback_LinkPair(this1.handle(cb),other.handle(cb));
		});
		var ret = this2;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
	static nextTime(this1,condition) {
		var ret = new tink_core_FutureTrigger();
		var link = null;
		var immediate = false;
		link = this1.handle(function(v) {
			if(condition == null || condition(v)) {
				ret.trigger(v);
				if(link == null) {
					immediate = true;
				} else if(link != null) {
					link.cancel();
				}
			}
		});
		if(immediate) {
			if(link != null) {
				link.cancel();
			}
		}
		return ret;
	}
	static until(this1,end) {
		var ret = new tink_core__$Signal_Suspendable(function($yield) {
			var this2 = this1.handle($yield);
			if(this2 == null) {
				return tink_core__$Callback_CallbackLink_$Impl_$.noop;
			} else {
				return ($_=this2,$bind($_,$_.cancel));
			}
		});
		end.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic($bind(ret,ret.kill)));
		return ret;
	}
	static next(this1,condition) {
		return tink_core__$Signal_Signal_$Impl_$.nextTime(this1,condition);
	}
	static noise(this1) {
		return tink_core__$Signal_Signal_$Impl_$.map(this1,function(_) {
			return tink_core_Noise.Noise;
		});
	}
	static gather(this1) {
		var ret = tink_core__$Signal_Signal_$Impl_$.trigger();
		this1.handle(function(x) {
			tink_core__$Callback_CallbackList_$Impl_$.invoke(ret.handlers,x);
		});
		return ret;
	}
	static generate(generator) {
		var ret = tink_core__$Signal_Signal_$Impl_$.trigger();
		generator($bind(ret,ret.trigger));
		return ret;
	}
	static trigger() {
		return new tink_core_SignalTrigger();
	}
	static create(create) {
		return new tink_core__$Signal_Suspendable(create);
	}
	static ofClassical(add,remove,gather) {
		if(gather == null) {
			gather = true;
		}
		var this1 = new tink_core__$Signal_SimpleSignal(function(cb) {
			var f = function(a) {
				tink_core__$Callback_Callback_$Impl_$.invoke(cb,a);
			};
			add(f);
			var f1 = remove;
			var a1 = f;
			var this2 = new tink_core_SimpleLink(function() {
				f1(a1);
			});
			return this2;
		});
		var ret = this1;
		if(gather) {
			return tink_core__$Signal_Signal_$Impl_$.gather(ret);
		} else {
			return ret;
		}
	}
}
tink_core__$Signal_Signal_$Impl_$.__name__ = "tink.core._Signal.Signal_Impl_";
class tink_core_SignalObject {
}
tink_core_SignalObject.__name__ = "tink.core.SignalObject";
Object.assign(tink_core_SignalObject.prototype, {
	__class__: tink_core_SignalObject
	,handle: null
});
class tink_core__$Signal_SimpleSignal {
	constructor(f) {
		this.f = f;
	}
	handle(cb) {
		return this.f(cb);
	}
}
tink_core__$Signal_SimpleSignal.__name__ = "tink.core._Signal.SimpleSignal";
tink_core__$Signal_SimpleSignal.__interfaces__ = [tink_core_SignalObject];
Object.assign(tink_core__$Signal_SimpleSignal.prototype, {
	__class__: tink_core__$Signal_SimpleSignal
	,f: null
});
class tink_core__$Signal_Suspendable {
	constructor(activate) {
		this.killed = false;
		this.trigger = new tink_core_SignalTrigger();
		this.activate = activate;
	}
	kill() {
		if(!this.killed) {
			this.killed = true;
			this.trigger = null;
		}
	}
	handle(cb) {
		if(this.killed) {
			return null;
		}
		if(this.trigger.handlers.length == 0) {
			this.suspend = this.activate(($_=this.trigger,$bind($_,$_.trigger)));
		}
		var _gthis = this;
		var a = tink_core__$Callback_CallbackList_$Impl_$.add(this.trigger.handlers,cb);
		var this1 = new tink_core_SimpleLink(function() {
			if(_gthis.trigger.handlers.length == 0) {
				_gthis.suspend();
				_gthis.suspend = null;
			}
		});
		return new tink_core__$Callback_LinkPair(a,this1);
	}
}
tink_core__$Signal_Suspendable.__name__ = "tink.core._Signal.Suspendable";
tink_core__$Signal_Suspendable.__interfaces__ = [tink_core_SignalObject];
Object.assign(tink_core__$Signal_Suspendable.prototype, {
	__class__: tink_core__$Signal_Suspendable
	,trigger: null
	,activate: null
	,suspend: null
	,check: null
	,killed: null
});
class tink_core_SignalTrigger {
	constructor() {
		var this1 = [];
		this.handlers = this1;
	}
	trigger(event) {
		tink_core__$Callback_CallbackList_$Impl_$.invoke(this.handlers,event);
	}
	getLength() {
		return this.handlers.length;
	}
	handle(cb) {
		return tink_core__$Callback_CallbackList_$Impl_$.add(this.handlers,cb);
	}
	clear() {
		tink_core__$Callback_CallbackList_$Impl_$.clear(this.handlers);
	}
	asSignal() {
		return this;
	}
}
tink_core_SignalTrigger.__name__ = "tink.core.SignalTrigger";
tink_core_SignalTrigger.__interfaces__ = [tink_core_SignalObject];
Object.assign(tink_core_SignalTrigger.prototype, {
	__class__: tink_core_SignalTrigger
	,handlers: null
});
class tink_io__$PipeOptions_PipeOptions_$Impl_$ {
	static get_end(this1) {
		if(this1 != null) {
			return this1.end;
		} else {
			return false;
		}
	}
	static get_destructive(this1) {
		if(this1 != null) {
			return this1.destructive;
		} else {
			return false;
		}
	}
}
tink_io__$PipeOptions_PipeOptions_$Impl_$.__name__ = "tink.io._PipeOptions.PipeOptions_Impl_";
tink_io__$PipeOptions_PipeOptions_$Impl_$.__properties__ = {get_destructive: "get_destructive",get_end: "get_end"};
var tink_io_PipeResult = $hxEnums["tink.io.PipeResult"] = { __ename__ : "tink.io.PipeResult", __constructs__ : ["AllWritten","SinkEnded","SinkFailed","SourceFailed"]
	,AllWritten: {_hx_index:0,__enum__:"tink.io.PipeResult",toString:$estr}
	,SinkEnded: ($_=function(result,rest) { return {_hx_index:1,result:result,rest:rest,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["result","rest"],$_)
	,SinkFailed: ($_=function(e,rest) { return {_hx_index:2,e:e,rest:rest,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["e","rest"],$_)
	,SourceFailed: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.io.PipeResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class tink_io_PipeResultTools {
	static toOutcome(result) {
		switch(result._hx_index) {
		case 0:
			return tink_core_Outcome.Success(haxe_ds_Option.None);
		case 1:
			var _g4 = result.rest;
			var result1 = result.result;
			return tink_core_Outcome.Success(haxe_ds_Option.Some(result1));
		case 2:
			var _g1 = result.rest;
			var e = result.e;
			return tink_core_Outcome.Failure(e);
		case 3:
			var e1 = result.e;
			return tink_core_Outcome.Failure(e1);
		}
	}
	static toResult(c,result,buffered) {
		var mk = function(s) {
			if(buffered == null) {
				return s;
			} else {
				var v = buffered;
				return s.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(v)));
			}
		};
		switch(c._hx_index) {
		case 0:
			var rest = c.rest;
			return tink_io_PipeResult.SinkEnded(result,mk(rest));
		case 1:
			var rest1 = c.at;
			var e = c.error;
			return tink_io_PipeResult.SinkFailed(e,mk(rest1));
		case 2:
			var e1 = c.error;
			return tink_io_PipeResult.SourceFailed(e1);
		case 3:
			return tink_io_PipeResult.AllWritten;
		}
	}
}
tink_io_PipeResultTools.__name__ = "tink.io.PipeResultTools";
class tink_io_SinkObject {
}
tink_io_SinkObject.__name__ = "tink.io.SinkObject";
Object.assign(tink_io_SinkObject.prototype, {
	__class__: tink_io_SinkObject
	,get_sealed: null
	,consume: null
	,__properties__: {get_sealed: "get_sealed"}
});
class tink_io_SinkBase {
	get_sealed() {
		return true;
	}
	consume(source,options) {
		throw new js__$Boot_HaxeError("not implemented");
	}
}
tink_io_SinkBase.__name__ = "tink.io.SinkBase";
tink_io_SinkBase.__interfaces__ = [tink_io_SinkObject];
Object.assign(tink_io_SinkBase.prototype, {
	__class__: tink_io_SinkBase
	,__properties__: {get_sealed: "get_sealed"}
});
class tink_io__$Sink_Blackhole extends tink_io_SinkBase {
	constructor() {
		super();
	}
	consume(source,options) {
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		})).map(function(o) {
			switch(o._hx_index) {
			case 0:
				var _g1 = o.rest;
				throw new js__$Boot_HaxeError("unreachable");
			case 2:
				var e = o.error;
				return tink_io_PipeResult.SourceFailed(e);
			case 3:
				return tink_io_PipeResult.AllWritten;
			}
		});
		return ret.gather();
	}
}
tink_io__$Sink_Blackhole.__name__ = "tink.io._Sink.Blackhole";
tink_io__$Sink_Blackhole.__super__ = tink_io_SinkBase;
Object.assign(tink_io__$Sink_Blackhole.prototype, {
	__class__: tink_io__$Sink_Blackhole
});
class tink_io__$Sink_SinkYielding_$Impl_$ {
	static end(this1) {
		if(this1.get_sealed()) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(false)));
		} else {
			var ret = this1.consume(tink_io__$Source_Source_$Impl_$.EMPTY,{ end : true}).map(function(r) {
				switch(r._hx_index) {
				case 0:
					return tink_core_Outcome.Success(true);
				case 1:
					var _g3 = r.rest;
					var _g2 = r.result;
					return tink_core_Outcome.Success(true);
				case 2:
					var _g1 = r.rest;
					var e = r.e;
					return tink_core_Outcome.Failure(e);
				}
			});
			return ret.gather();
		}
	}
	static dirty(this1) {
		return this1;
	}
	static ofError(e) {
		return new tink_io__$Sink_ErrorSink(e);
	}
	static ofPromised(p) {
		var ret = p.map(function(o) {
			switch(o._hx_index) {
			case 0:
				var v = o.data;
				return v;
			case 1:
				var e = o.failure;
				return tink_io__$Sink_SinkYielding_$Impl_$.ofError(e);
			}
		});
		return new tink_io__$Sink_FutureSink(ret.gather());
	}
	static ofNodeStream(name,r) {
		return tink_io_nodejs_NodejsSink.wrap(name,r);
	}
	static ofOutput(name,target,options) {
		var tmp;
		if(options == null) {
			tmp = tink_io__$Worker_Worker_$Impl_$.get();
		} else {
			var _g = options.worker;
			if(_g == null) {
				tmp = tink_io__$Worker_Worker_$Impl_$.get();
			} else {
				var w = _g;
				tmp = w;
			}
		}
		return new tink_io_std_OutputSink(name,target,tmp);
	}
}
tink_io__$Sink_SinkYielding_$Impl_$.__name__ = "tink.io._Sink.SinkYielding_Impl_";
class tink_io__$Sink_FutureSink extends tink_io_SinkBase {
	constructor(f) {
		super();
		this.f = f;
	}
	consume(source,options) {
		var ret = this.f.flatMap(function(sink) {
			return sink.consume(source,options);
		});
		return ret.gather();
	}
}
tink_io__$Sink_FutureSink.__name__ = "tink.io._Sink.FutureSink";
tink_io__$Sink_FutureSink.__super__ = tink_io_SinkBase;
Object.assign(tink_io__$Sink_FutureSink.prototype, {
	__class__: tink_io__$Sink_FutureSink
	,f: null
});
class tink_io__$Sink_ErrorSink extends tink_io_SinkBase {
	constructor(error) {
		super();
		this.error = error;
	}
	get_sealed() {
		return false;
	}
	consume(source,options) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_PipeResult.SinkFailed(this.error,source)));
	}
}
tink_io__$Sink_ErrorSink.__name__ = "tink.io._Sink.ErrorSink";
tink_io__$Sink_ErrorSink.__super__ = tink_io_SinkBase;
Object.assign(tink_io__$Sink_ErrorSink.prototype, {
	__class__: tink_io__$Sink_ErrorSink
	,error: null
});
class tink_streams_StreamObject {
}
tink_streams_StreamObject.__name__ = "tink.streams.StreamObject";
Object.assign(tink_streams_StreamObject.prototype, {
	__class__: tink_streams_StreamObject
	,get_depleted: null
	,next: null
	,regroup: null
	,map: null
	,filter: null
	,retain: null
	,idealize: null
	,append: null
	,prepend: null
	,blend: null
	,decompose: null
	,forEach: null
	,reduce: null
	,__properties__: {get_depleted: "get_depleted"}
});
class tink_streams_StreamBase {
	constructor() {
		if(tink_streams_StreamBase._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.retainCount = 0;
	}
	get_depleted() {
		return false;
	}
	retain() {
		this.retainCount++;
		var retained = true;
		var _gthis = this;
		return function() {
			if(retained) {
				retained = false;
				if(--_gthis.retainCount == 0) {
					_gthis.destroy();
				}
			}
		};
	}
	next() {
		throw new js__$Boot_HaxeError("not implemented");
	}
	regroup(f) {
		return new tink_streams__$Stream_RegroupStream(this,f);
	}
	map(f) {
		return this.regroup(f);
	}
	filter(f) {
		return this.regroup(f);
	}
	destroy() {
	}
	append(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([this,other]);
		}
	}
	prepend(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return tink_streams__$Stream_CompoundStream.of([other,this]);
		}
	}
	blend(other) {
		if(this.get_depleted()) {
			return other;
		} else {
			return new tink_streams_BlendStream(this,other);
		}
	}
	decompose(into) {
		if(!this.get_depleted()) {
			into.push(this);
		}
	}
	idealize(rescue) {
		if(this.get_depleted()) {
			return tink_streams_Empty.inst;
		} else {
			return new tink_streams_IdealizeStream(this,rescue);
		}
	}
	reduce(initial,reducer) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(item) {
				var ret = reducer(initial,item).map(function(o) {
					switch(o._hx_index) {
					case 0:
						var v = o.result;
						initial = v;
						return tink_streams_Handled.Resume;
					case 1:
						var e = o.e;
						return tink_streams_Handled.Clog(e);
					}
				});
				return ret.gather();
			})).handle(function(c) {
				switch(c._hx_index) {
				case 0:
					var _g3 = c.rest;
					throw new js__$Boot_HaxeError("assert");
				case 1:
					var rest = c.at;
					var e1 = c.error;
					cb(tink_streams_Reduction.Crashed(e1,rest));
					break;
				case 2:
					var e2 = c.error;
					cb(tink_streams_Reduction.Failed(e2));
					break;
				case 3:
					cb(tink_streams_Reduction.Reduced(initial));
					break;
				}
			});
		},true);
	}
	forEach(handler) {
		throw new js__$Boot_HaxeError("not implemented");
	}
}
tink_streams_StreamBase.__name__ = "tink.streams.StreamBase";
tink_streams_StreamBase.__interfaces__ = [tink_streams_StreamObject];
Object.assign(tink_streams_StreamBase.prototype, {
	__class__: tink_streams_StreamBase
	,retainCount: null
	,__properties__: {get_depleted: "get_depleted"}
});
class tink_streams_Empty extends tink_streams_StreamBase {
	constructor() {
		super();
	}
	get_depleted() {
		return true;
	}
	next() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.End));
	}
	forEach(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Depleted));
	}
	static make() {
		return tink_streams_Empty.inst;
	}
}
tink_streams_Empty.__name__ = "tink.streams.Empty";
tink_streams_Empty.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_Empty.prototype, {
	__class__: tink_streams_Empty
});
class tink_io__$Source_Source_$Impl_$ {
	static dirty(this1) {
		return this1;
	}
	static get_depleted(this1) {
		return this1.get_depleted();
	}
	static ofNodeStream(name,r,options) {
		if(options == null) {
			options = { };
		}
		return tink_io_nodejs_NodejsSource.wrap(name,r,options.chunkSize,options.onEnd);
	}
	static toNodeStream(this1) {
		var native = new js_node_stream_PassThrough();
		var source = tink_io__$Source_Source_$Impl_$.chunked(this1);
		var write = null;
		write = function() {
			source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(chunk) {
				var b = chunk.toBytes();
				var data = b.b;
				var ok = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length);
				var ok1 = native.write(ok);
				if(ok1) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
				} else {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Finish));
				}
			})).handle(function(o) {
				switch(o._hx_index) {
				case 0:
					var rest = o.rest;
					source = rest;
					native.once("drain",write);
					break;
				case 2:
					var e = o.error;
					native.emit("error",new Error(e.message));
					break;
				case 3:
					native.end();
					break;
				}
			});
		};
		write();
		return native;
	}
	static ofJsFile(name,file,options) {
		var chunkSize = options == null || options.chunkSize == null ? 4096 : options.chunkSize;
		return new tink_io_js_BlobSource(name,file,0,chunkSize);
	}
	static ofJsBlob(name,blob,options) {
		var chunkSize = options == null || options.chunkSize == null ? 4096 : options.chunkSize;
		return new tink_io_js_BlobSource(name,blob,0,chunkSize);
	}
	static ofInput(name,input,options) {
		if(options == null) {
			options = { };
		}
		var tmp = tink_io__$Worker_Worker_$Impl_$.ensure(options.worker);
		var length;
		var _g = options.chunkSize;
		if(_g == null) {
			length = 65536;
		} else {
			var v = _g;
			length = v;
		}
		return new tink_io_std_InputSource(name,input,tmp,new haxe_io_Bytes(new ArrayBuffer(length)),0);
	}
	static chunked(this1) {
		return this1;
	}
	static ofError(e) {
		return tink_streams__$Stream_Stream_$Impl_$.ofError(e);
	}
	static ofFuture(f) {
		return tink_streams__$Stream_Stream_$Impl_$.flatten(f);
	}
	static ofPromised(p) {
		var ret = p.map(function(o) {
			switch(o._hx_index) {
			case 0:
				var s = o.data;
				return s;
			case 1:
				var e = o.failure;
				return tink_io__$Source_Source_$Impl_$.ofError(e);
			}
		});
		return tink_streams__$Stream_Stream_$Impl_$.flatten(ret.gather());
	}
	static concatAll(s) {
		return s.reduce(tink__$Chunk_Chunk_$Impl_$.EMPTY,tink_streams__$Stream_Reducer_$Impl_$.ofSafe(function(res,cur) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(tink__$Chunk_Chunk_$Impl_$.catChunk(res,cur))));
		}));
	}
	static pipeTo(this1,target,options) {
		return target.consume(this1,options);
	}
	static append(this1,that) {
		return this1.append(that);
	}
	static prepend(this1,that) {
		return this1.prepend(that);
	}
	static transform(this1,transformer) {
		return transformer.transform(this1);
	}
	static skip(this1,len) {
		return this1.regroup(tink_streams__$Stream_Regrouper_$Impl_$.ofIgnoranceSync(function(chunks) {
			var chunk = chunks[0];
			if(len <= 0) {
				return tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(chunk));
			}
			var length = chunk.getLength();
			var out = tink_streams_RegroupResult.Converted(len < length ? tink_streams__$Stream_Stream_$Impl_$.single(chunk.slice(len,length)) : tink_streams_Empty.inst);
			len -= length;
			return out;
		}));
	}
	static limit(this1,len) {
		if(len == 0) {
			return tink_io__$Source_Source_$Impl_$.EMPTY;
		}
		return this1.regroup(tink_streams__$Stream_Regrouper_$Impl_$.ofIgnoranceSync(function(chunks) {
			if(len <= 0) {
				return tink_streams_RegroupResult.Terminated(haxe_ds_Option.None);
			}
			var chunk = chunks[0];
			var length = chunk.getLength();
			var out = len == length ? tink_streams_RegroupResult.Terminated(haxe_ds_Option.Some(tink_streams__$Stream_Stream_$Impl_$.single(chunk))) : tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(len < length ? chunk.slice(0,len) : chunk));
			len -= length;
			return out;
		}));
	}
	static ofChunk(chunk) {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk));
	}
	static ofString(s) {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(s))));
	}
	static ofBytes(b) {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink_chunk_ByteChunk.of(b)));
	}
}
tink_io__$Source_Source_$Impl_$.__name__ = "tink.io._Source.Source_Impl_";
tink_io__$Source_Source_$Impl_$.__properties__ = {get_depleted: "get_depleted"};
class tink_io_RealSourceTools {
	static all(s) {
		var ret = tink_io__$Source_Source_$Impl_$.concatAll(s).map(function(o) {
			switch(o._hx_index) {
			case 1:
				var e = o.error;
				return tink_core_Outcome.Failure(e);
			case 2:
				var c = o.result;
				return tink_core_Outcome.Success(c);
			}
		});
		return ret.gather();
	}
	static parse(s,p) {
		var ret = tink_io__$StreamParser_StreamParser_$Impl_$.parse(s,p).map(function(r) {
			switch(r._hx_index) {
			case 0:
				var rest = r.rest;
				var data = r.data;
				var this1 = new tink_core_MPair(data,rest);
				return tink_core_Outcome.Success(this1);
			case 1:
				var _g1 = r.rest;
				var e = r.e;
				return tink_core_Outcome.Failure(e);
			case 2:
				var e1 = r.e;
				return tink_core_Outcome.Failure(e1);
			}
		});
		return ret.gather();
	}
	static split(src,delim) {
		var s = tink_io_RealSourceTools.parse(src,new tink_io_Splitter(delim));
		return { before : tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(tink_core__$Promise_Promise_$Impl_$.next(s,tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(p) {
			var _g = p.a;
			switch(_g._hx_index) {
			case 0:
				var chunk = _g.v;
				return new tink_streams_Single(new tink_core__$Lazy_LazyConst(chunk));
			case 1:
				return src;
			}
		})))), delimiter : tink_core__$Promise_Promise_$Impl_$.next(s,function(p1) {
			var _g1 = p1.a;
			switch(_g1._hx_index) {
			case 0:
				var _g11 = _g1.v;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(delim)));
			case 1:
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Failure(new tink_core_TypedError(404,"Delimiter not found",{ fileName : "tink/io/Source.hx", lineNumber : 177, className : "tink.io.RealSourceTools", methodName : "split"}))));
			}
		}), after : tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(tink_core__$Promise_Promise_$Impl_$.next(s,tink_core__$Promise_Next_$Impl_$.ofSafeSync(function(p2) {
			return p2.b;
		}))))};
	}
	static parseStream(s,p) {
		return tink_io__$StreamParser_StreamParser_$Impl_$.parseStream(s,p);
	}
	static idealize(s,rescue) {
		return tink_io__$Source_Source_$Impl_$.chunked(s).idealize(rescue);
	}
}
tink_io_RealSourceTools.__name__ = "tink.io.RealSourceTools";
class tink_io_IdealSourceTools {
	static all(s) {
		var ret = tink_io__$Source_Source_$Impl_$.concatAll(s).map(function(o) {
			var c = o.result;
			return c;
		});
		return ret.gather();
	}
	static parse(s,p) {
		var ret = tink_io__$StreamParser_StreamParser_$Impl_$.parse(s,p).map(function(r) {
			switch(r._hx_index) {
			case 0:
				var rest = r.rest;
				var data = r.data;
				var this1 = new tink_core_MPair(data,rest);
				return tink_core_Outcome.Success(this1);
			case 1:
				var _g1 = r.rest;
				var e = r.e;
				return tink_core_Outcome.Failure(e);
			}
		});
		return ret.gather();
	}
	static parseStream(s,p) {
		return tink_io__$StreamParser_StreamParser_$Impl_$.parseStream(s,p);
	}
	static split(s,delim) {
		var s1 = tink_io_RealSourceTools.split(s,delim);
		return { before : tink_io_RealSourceTools.idealize(s1.before,function(e) {
			return tink_io__$Source_Source_$Impl_$.EMPTY;
		}), delimiter : s1.delimiter, after : tink_io_RealSourceTools.idealize(s1.after,function(e1) {
			return tink_io__$Source_Source_$Impl_$.EMPTY;
		})};
	}
}
tink_io_IdealSourceTools.__name__ = "tink.io.IdealSourceTools";
var tink_io_ParseStep = $hxEnums["tink.io.ParseStep"] = { __ename__ : "tink.io.ParseStep", __constructs__ : ["Progressed","Done","Failed"]
	,Progressed: {_hx_index:0,__enum__:"tink.io.ParseStep",toString:$estr}
	,Done: ($_=function(r) { return {_hx_index:1,r:r,__enum__:"tink.io.ParseStep",toString:$estr}; },$_.__params__ = ["r"],$_)
	,Failed: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"tink.io.ParseStep",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_io_ParseResult = $hxEnums["tink.io.ParseResult"] = { __ename__ : "tink.io.ParseResult", __constructs__ : ["Parsed","Invalid","Broke"]
	,Parsed: ($_=function(data,rest) { return {_hx_index:0,data:data,rest:rest,__enum__:"tink.io.ParseResult",toString:$estr}; },$_.__params__ = ["data","rest"],$_)
	,Invalid: ($_=function(e,rest) { return {_hx_index:1,e:e,rest:rest,__enum__:"tink.io.ParseResult",toString:$estr}; },$_.__params__ = ["e","rest"],$_)
	,Broke: ($_=function(e) { return {_hx_index:2,e:e,__enum__:"tink.io.ParseResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class tink_io__$StreamParser_StreamParser_$Impl_$ {
	static doParse(source,p,consume,finish) {
		var cursor = tink__$Chunk_Chunk_$Impl_$.EMPTY.getCursor();
		var resume = true;
		var mk = function(source1) {
			if(cursor.currentPos < cursor.length) {
				return source1.prepend(new tink_streams_Single(new tink_core__$Lazy_LazyConst(cursor.right())));
			} else {
				return source1;
			}
		};
		var flush = function() {
			var _g = cursor.flush();
			var c = _g;
			if(c.getLength() == 0) {
				return tink_io__$Source_Source_$Impl_$.EMPTY;
			} else {
				var c1 = _g;
				return new tink_streams_Single(new tink_core__$Lazy_LazyConst(c1));
			}
		};
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(chunk) {
			if(chunk.getLength() == 0) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
			}
			cursor.shift(chunk);
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				var next = null;
				next = function() {
					cursor.shift();
					var lastPos = cursor.currentPos;
					var _g1 = p.progress(cursor);
					switch(_g1._hx_index) {
					case 0:
						if(lastPos != cursor.currentPos && cursor.currentPos < cursor.length) {
							next();
						} else {
							cb(tink_streams_Handled.Resume);
						}
						break;
					case 1:
						var v = _g1.r;
						consume(v).handle(function(o) {
							resume = o.resume;
							if(resume) {
								if(lastPos != cursor.currentPos && cursor.currentPos < cursor.length) {
									next();
								} else {
									cb(tink_streams_Handled.Resume);
								}
							} else {
								cb(tink_streams_Handled.Finish);
							}
						});
						break;
					case 2:
						var e = _g1.e;
						cb(tink_streams_Handled.Clog(e));
						break;
					}
				};
				next();
			});
		})).flatMap(function(c2) {
			switch(c2._hx_index) {
			case 0:
				var rest = c2.rest;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(finish(),mk(rest))));
			case 1:
				var rest1 = c2.at;
				var e1 = c2.error;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Invalid(e1,mk(rest1))));
			case 2:
				var e2 = c2.error;
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Broke(e2)));
			case 3:
				if(cursor.currentPos < cursor.length) {
					var v1 = finish();
					var v2 = new tink_streams_Single(new tink_core__$Lazy_LazyConst(tink__$Chunk_Chunk_$Impl_$.EMPTY));
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(v1,mk(v2))));
				} else if(!resume) {
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Parsed(finish(),flush())));
				} else {
					var _g2 = p.eof(cursor);
					switch(_g2._hx_index) {
					case 0:
						var result = _g2.data;
						var ret1 = consume(result).map(function(_) {
							return tink_io_ParseResult.Parsed(finish(),flush());
						});
						return ret1.gather();
					case 1:
						var e3 = _g2.failure;
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_io_ParseResult.Invalid(e3,flush())));
					}
				}
				break;
			}
		});
		return ret.gather();
	}
	static parse(s,p) {
		var res = null;
		var onResult = function(r) {
			res = r;
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst({ resume : false}));
		};
		return tink_io__$StreamParser_StreamParser_$Impl_$.doParse(s,p,onResult,function() {
			return res;
		});
	}
	static parseStream(s,p) {
		var next = null;
		next = function(step) {
			if(s.get_depleted()) {
				step(tink_streams_Step.End);
			} else {
				tink_io__$StreamParser_StreamParser_$Impl_$.parse(s,p).handle(function(o) {
					switch(o._hx_index) {
					case 0:
						var rest = o.rest;
						var result = o.data;
						s = rest;
						var next1 = tink_streams_Step.Link(result,tink_streams_Generator.stream(next));
						step(next1);
						break;
					case 1:
						var _g1 = o.rest;
						var e = o.e;
						step(tink_streams_Step.Fail(e));
						break;
					case 2:
						var e1 = o.e;
						step(tink_streams_Step.Fail(e1));
						break;
					}
				});
			}
		};
		return tink_streams_Generator.stream(next);
	}
}
tink_io__$StreamParser_StreamParser_$Impl_$.__name__ = "tink.io._StreamParser.StreamParser_Impl_";
class tink_io_StreamParserObject {
}
tink_io_StreamParserObject.__name__ = "tink.io.StreamParserObject";
Object.assign(tink_io_StreamParserObject.prototype, {
	__class__: tink_io_StreamParserObject
	,progress: null
	,eof: null
});
class tink_io_BytewiseParser {
	read(char) {
		throw new js__$Boot_HaxeError("abstract");
	}
	progress(cursor) {
		while(true) {
			var _g = this.read(cursor.currentByte);
			switch(_g._hx_index) {
			case 0:
				break;
			case 1:
				var r = _g.r;
				cursor.next();
				return tink_io_ParseStep.Done(r);
			case 2:
				var e = _g.e;
				return tink_io_ParseStep.Failed(e);
			}
			if(!cursor.next()) {
				break;
			}
		}
		return tink_io_ParseStep.Progressed;
	}
	eof(rest) {
		var _g = this.read(-1);
		switch(_g._hx_index) {
		case 0:
			return tink_core_Outcome.Failure(new tink_core_TypedError(422,"Unexpected end of input",{ fileName : "tink/io/StreamParser.hx", lineNumber : 180, className : "tink.io.BytewiseParser", methodName : "eof"}));
		case 1:
			var r = _g.r;
			return tink_core_Outcome.Success(r);
		case 2:
			var e = _g.e;
			return tink_core_Outcome.Failure(e);
		}
	}
}
tink_io_BytewiseParser.__name__ = "tink.io.BytewiseParser";
tink_io_BytewiseParser.__interfaces__ = [tink_io_StreamParserObject];
Object.assign(tink_io_BytewiseParser.prototype, {
	__class__: tink_io_BytewiseParser
});
class tink_io_Splitter extends tink_io_BytewiseParser {
	constructor(delim) {
		super();
		this.buf = tink__$Chunk_Chunk_$Impl_$.EMPTY;
		this.delim = delim;
	}
	read(char) {
		if(char == -1) {
			return tink_io_ParseStep.Done(haxe_ds_Option.None);
		}
		this.buf = tink__$Chunk_Chunk_$Impl_$.catChunk(this.buf,tink_chunk_ByteChunk.of(haxe_io_Bytes.ofString(String.fromCodePoint(char))));
		if(this.buf.getLength() >= this.delim.getLength()) {
			var bcursor = this.buf.getCursor();
			var delta = this.buf.getLength() - this.delim.getLength();
			bcursor.moveTo(bcursor.currentPos + delta);
			var dcursor = this.delim.getCursor();
			var _g = 0;
			var _g1 = this.delim.getLength();
			while(_g < _g1) {
				var i = _g++;
				if(bcursor.currentByte != dcursor.currentByte) {
					return tink_io_ParseStep.Progressed;
				} else {
					bcursor.next();
					dcursor.next();
				}
			}
			var out = tink_io_ParseStep.Done(haxe_ds_Option.Some(this.buf.slice(0,bcursor.currentPos - this.delim.getLength())));
			this.buf = tink__$Chunk_Chunk_$Impl_$.EMPTY;
			return out;
		} else {
			return tink_io_ParseStep.Progressed;
		}
	}
}
tink_io_Splitter.__name__ = "tink.io.Splitter";
tink_io_Splitter.__super__ = tink_io_BytewiseParser;
Object.assign(tink_io_Splitter.prototype, {
	__class__: tink_io_Splitter
	,delim: null
	,buf: null
});
class tink_io_SimpleBytewiseParser extends tink_io_BytewiseParser {
	constructor(f) {
		super();
		this._read = f;
	}
	read(char) {
		return this._read(char);
	}
}
tink_io_SimpleBytewiseParser.__name__ = "tink.io.SimpleBytewiseParser";
tink_io_SimpleBytewiseParser.__super__ = tink_io_BytewiseParser;
Object.assign(tink_io_SimpleBytewiseParser.prototype, {
	__class__: tink_io_SimpleBytewiseParser
	,_read: null
});
class tink_io_Transformer {
}
tink_io_Transformer.__name__ = "tink.io.Transformer";
Object.assign(tink_io_Transformer.prototype, {
	__class__: tink_io_Transformer
	,transform: null
});
class tink_io_WorkerObject {
}
tink_io_WorkerObject.__name__ = "tink.io.WorkerObject";
Object.assign(tink_io_WorkerObject.prototype, {
	__class__: tink_io_WorkerObject
	,work: null
});
class tink_io__$Worker_EagerWorker {
	constructor() {
	}
	work(task) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(task.get()));
	}
}
tink_io__$Worker_EagerWorker.__name__ = "tink.io._Worker.EagerWorker";
tink_io__$Worker_EagerWorker.__interfaces__ = [tink_io_WorkerObject];
Object.assign(tink_io__$Worker_EagerWorker.prototype, {
	__class__: tink_io__$Worker_EagerWorker
});
class tink_io__$Worker_Worker_$Impl_$ {
	static ensure(this1) {
		if(this1 == null) {
			return tink_io__$Worker_Worker_$Impl_$.get();
		} else {
			return this1;
		}
	}
	static get() {
		return tink_io__$Worker_Worker_$Impl_$.pool[Std.random(tink_io__$Worker_Worker_$Impl_$.pool.length)];
	}
	static work(this1,task) {
		return this1.work(task);
	}
}
tink_io__$Worker_Worker_$Impl_$.__name__ = "tink.io._Worker.Worker_Impl_";
class tink_streams_Generator extends tink_streams_StreamBase {
	constructor(upcoming) {
		if(tink_streams_StreamBase._hx_skip_constructor) {
			super();
			return;
		}
		tink_streams_StreamBase._hx_skip_constructor = true;
		super();
		tink_streams_StreamBase._hx_skip_constructor = false;
		this._hx_constructor(upcoming);
	}
	_hx_constructor(upcoming) {
		super._hx_constructor();
		this.upcoming = upcoming;
	}
	next() {
		return this.upcoming;
	}
	forEach(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.upcoming.handle(function(e) {
				switch(e._hx_index) {
				case 0:
					var then = e.next;
					var v = e.value;
					handler(v).handle(function(s) {
						switch(s._hx_index) {
						case 0:
							cb(tink_streams_Conclusion.Halted(_gthis));
							break;
						case 1:
							cb(tink_streams_Conclusion.Halted(then));
							break;
						case 2:
							then.forEach(handler).handle(cb);
							break;
						case 3:
							var e1 = s.e;
							cb(tink_streams_Conclusion.Clogged(e1,_gthis));
							break;
						}
					});
					break;
				case 1:
					var e2 = e.e;
					cb(tink_streams_Conclusion.Failed(e2));
					break;
				case 2:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		},true);
	}
	static stream(step) {
		return new tink_streams_Generator(tink_core__$Future_Future_$Impl_$.async(step,true));
	}
}
tink_streams_Generator.__name__ = "tink.streams.Generator";
tink_streams_Generator.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_Generator.prototype, {
	__class__: tink_streams_Generator
	,upcoming: null
});
class tink_io_js_BlobSource extends tink_streams_Generator {
	constructor(name,blob,pos,chunkSize) {
		tink_streams_StreamBase._hx_skip_constructor = true;
		super();
		tink_streams_StreamBase._hx_skip_constructor = false;
		this._hx_constructor(name,blob,pos,chunkSize);
	}
	_hx_constructor(name,blob,pos,chunkSize) {
		this.name = name;
		super._hx_constructor(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			if(pos >= blob.size) {
				cb(tink_streams_Step.End);
			} else {
				var end = pos + chunkSize;
				if(end > blob.size) {
					end = blob.size;
				}
				var reader = new FileReader();
				reader.onload = function() {
					var chunk = tink_chunk_ByteChunk.of(haxe_io_Bytes.ofData(reader.result));
					var tmp = tink_streams_Step.Link(chunk,new tink_io_js_BlobSource(name,blob,end,chunkSize));
					cb(tmp);
				};
				reader.onerror = function(e) {
					var tmp1 = tink_streams_Step.Fail(tink_core_TypedError.withData(500,e.message,e,{ fileName : "tink/io/js/BlobSource.hx", lineNumber : 27, className : "tink.io.js.BlobSource", methodName : "new"}));
					cb(tmp1);
				};
				var tmp2 = blob.slice(pos,end);
				reader.readAsArrayBuffer(tmp2);
			}
		},true));
	}
	static wrap(name,blob,chunkSize) {
		return new tink_io_js_BlobSource(name,blob,0,chunkSize);
	}
}
tink_io_js_BlobSource.__name__ = "tink.io.js.BlobSource";
tink_io_js_BlobSource.__super__ = tink_streams_Generator;
Object.assign(tink_io_js_BlobSource.prototype, {
	__class__: tink_io_js_BlobSource
	,name: null
});
class tink_io_nodejs_NodejsSink extends tink_io_SinkBase {
	constructor(target) {
		super();
		this.target = target;
	}
	consume(source,options) {
		var _gthis = this;
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(c) {
			var ret1 = _gthis.target.write(c).map(function(w) {
				switch(w._hx_index) {
				case 0:
					switch(w.data) {
					case false:
						return tink_streams_Handled.BackOff;
					case true:
						return tink_streams_Handled.Resume;
					}
					break;
				case 1:
					var e = w.failure;
					return tink_streams_Handled.Clog(e);
				}
			});
			return ret1.gather();
		}));
		if(options != null && options.end) {
			ret.handle(function(end) {
				_gthis.target.end();
			});
		}
		var ret2 = ret.map(function(c1) {
			return tink_io_PipeResultTools.toResult(c1,tink_core_Noise.Noise);
		});
		return ret2.gather();
	}
	static wrap(name,native) {
		return new tink_io_nodejs_NodejsSink(new tink_io_nodejs_WrappedWritable(name,native));
	}
}
tink_io_nodejs_NodejsSink.__name__ = "tink.io.nodejs.NodejsSink";
tink_io_nodejs_NodejsSink.__super__ = tink_io_SinkBase;
Object.assign(tink_io_nodejs_NodejsSink.prototype, {
	__class__: tink_io_nodejs_NodejsSink
	,target: null
});
class tink_io_nodejs_NodejsSource extends tink_streams_Generator {
	constructor(target) {
		super(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			target.read().handle(function(o) {
				var tmp;
				switch(o._hx_index) {
				case 0:
					var _g = o.data;
					if(_g == null) {
						tmp = tink_streams_Step.End;
					} else {
						var chunk = _g;
						tmp = tink_streams_Step.Link(chunk,new tink_io_nodejs_NodejsSource(target));
					}
					break;
				case 1:
					var e = o.failure;
					tmp = tink_streams_Step.Fail(e);
					break;
				}
				cb(tmp);
			});
		},true));
	}
	static wrap(name,native,chunkSize,onEnd) {
		return new tink_io_nodejs_NodejsSource(new tink_io_nodejs_WrappedReadable(name,native,chunkSize,onEnd));
	}
}
tink_io_nodejs_NodejsSource.__name__ = "tink.io.nodejs.NodejsSource";
tink_io_nodejs_NodejsSource.__super__ = tink_streams_Generator;
Object.assign(tink_io_nodejs_NodejsSource.prototype, {
	__class__: tink_io_nodejs_NodejsSource
});
class tink_io_nodejs_WrappedReadable {
	constructor(name,native,chunkSize,onEnd) {
		this.name = name;
		this.native = native;
		this.chunkSize = chunkSize;
		this.end = tink_core__$Future_Future_$Impl_$.async(function(cb) {
			native.once("end",function() {
				cb(tink_core_Outcome.Success(null));
			});
			native.once("error",function(e) {
				var tmp = tink_core_Outcome.Failure(new tink_core_TypedError(null,"" + e.code + " - Failed reading from " + name + " because " + e.message,{ fileName : "tink/io/nodejs/WrappedReadable.hx", lineNumber : 22, className : "tink.io.nodejs.WrappedReadable", methodName : "new"}));
				cb(tmp);
			});
		});
		if(onEnd != null) {
			this.end.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
				process.nextTick(onEnd);
			}));
		}
	}
	read() {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.first(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			var attempt = null;
			attempt = function() {
				try {
					var _g = _gthis.native.read(_gthis.chunkSize);
					if(_g == null) {
						_gthis.native.once("readable",attempt);
					} else {
						var chunk = _g;
						var buf = typeof(chunk) == "string" ? new js_node_buffer_Buffer(chunk) : chunk;
						var attempt1 = tink_core_Outcome.Success(new tink_chunk_nodejs_BufferChunk(buf));
						cb(attempt1);
					}
				} catch( e ) {
					haxe_CallStack.lastException = e;
					var attempt2 = tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error while reading from " + _gthis.name,((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "tink/io/nodejs/WrappedReadable.hx", lineNumber : 47, className : "tink.io.nodejs.WrappedReadable", methodName : "read"}));
					cb(attempt2);
				}
			};
			attempt();
		}),this.end);
	}
}
tink_io_nodejs_WrappedReadable.__name__ = "tink.io.nodejs.WrappedReadable";
Object.assign(tink_io_nodejs_WrappedReadable.prototype, {
	__class__: tink_io_nodejs_WrappedReadable
	,native: null
	,name: null
	,end: null
	,chunkSize: null
});
class tink_io_nodejs_WrappedWritable {
	constructor(name,native) {
		this.name = name;
		this.native = native;
		this.ended = tink_core__$Future_Future_$Impl_$.async(function(cb) {
			native.once("end",function() {
				cb(tink_core_Outcome.Success(false));
			});
			native.once("finish",function() {
				cb(tink_core_Outcome.Success(false));
			});
			native.once("close",function() {
				cb(tink_core_Outcome.Success(false));
			});
			native.on("error",function(e) {
				var tmp = tink_core_Outcome.Failure(new tink_core_TypedError(null,"" + e.code + ": " + e.message,{ fileName : "tink/io/nodejs/WrappedWritable.hx", lineNumber : 22, className : "tink.io.nodejs.WrappedWritable", methodName : "new"}));
				cb(tmp);
			});
		});
	}
	end() {
		var didEnd = false;
		var this1 = this.ended.handle(tink_core__$Callback_Callback_$Impl_$.fromNiladic(function() {
			didEnd = true;
		}));
		if(this1 != null) {
			this1.cancel();
		}
		if(didEnd) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(false)));
		}
		this.native.end();
		return tink_core__$Promise_Promise_$Impl_$.next(this.ended,function(_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(true)));
		});
	}
	write(chunk) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.first(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			if(chunk.getLength() == 0) {
				cb(tink_core_Outcome.Success(true));
				return;
			}
			var buf;
			if(js_node_buffer_Buffer.isBuffer(chunk.buffer)) {
				buf = chunk.buffer;
			} else {
				var b = chunk.toBytes();
				var data = b.b;
				buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,b.length);
			}
			var f = cb;
			var a1 = tink_core_Outcome.Success(true);
			var tmp = function() {
				f(a1);
			};
			_gthis.native.write(buf,tmp);
		}),this.ended);
	}
}
tink_io_nodejs_WrappedWritable.__name__ = "tink.io.nodejs.WrappedWritable";
Object.assign(tink_io_nodejs_WrappedWritable.prototype, {
	__class__: tink_io_nodejs_WrappedWritable
	,ended: null
	,name: null
	,native: null
});
class tink_io_std_InputSource extends tink_streams_Generator {
	constructor(name,target,worker,buf,offset) {
		var next = function(buf1,offset1) {
			return new tink_io_std_InputSource(name,target,worker,buf1,offset1);
		};
		var free = buf.length - offset;
		super(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			tink_io__$Worker_Worker_$Impl_$.work(worker,new tink_core__$Lazy_LazyFunc(function() {
				try {
					var read = target.readBytes(buf,offset,free);
					if(read == 0) {
						return tink_streams_Step.Link(tink__$Chunk_Chunk_$Impl_$.EMPTY,next(buf,offset));
					} else {
						var nextOffset = free - read < 1024 ? 0 : offset + read;
						var nextBuf = nextOffset == 0 ? new haxe_io_Bytes(new ArrayBuffer(buf.length)) : buf;
						return tink_streams_Step.Link(tink_chunk_ByteChunk.of(buf).slice(offset,offset + read),next(nextBuf,nextOffset));
					}
				} catch( e ) {
					haxe_CallStack.lastException = e;
					var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
					if(((e1) instanceof haxe_io_Eof)) {
						var e2 = e1;
						return tink_streams_Step.End;
					} else if(js_Boot.__instanceof(e1,haxe_io_Error)) {
						var e3 = e1;
						if(e3._hx_index == 0) {
							return tink_streams_Step.Link(tink__$Chunk_Chunk_$Impl_$.EMPTY,next(buf,offset));
						} else {
							return tink_streams_Step.Fail(tink_core_TypedError.withData(null,"Failed to read from " + name,e3,{ fileName : "tink/io/std/InputSource.hx", lineNumber : 50, className : "tink.io.std.InputSource", methodName : "new"}));
						}
					} else {
						throw e;
					}
				}
			})).handle(function(step) {
				switch(step._hx_index) {
				case 1:
					var _g = step.e;
					try {
						target.close();
					} catch( e4 ) {
						haxe_CallStack.lastException = e4;
						var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
					}
					break;
				case 2:
					try {
						target.close();
					} catch( e6 ) {
						haxe_CallStack.lastException = e6;
						var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
					}
					break;
				default:
				}
				cb(step);
			});
		},true));
	}
}
tink_io_std_InputSource.__name__ = "tink.io.std.InputSource";
tink_io_std_InputSource.__super__ = tink_streams_Generator;
Object.assign(tink_io_std_InputSource.prototype, {
	__class__: tink_io_std_InputSource
});
class tink_io_std_OutputSink extends tink_io_SinkBase {
	constructor(name,target,worker) {
		super();
		this.name = name;
		this.target = target;
		this.worker = worker;
	}
	consume(source,options) {
		var rest = tink__$Chunk_Chunk_$Impl_$.EMPTY;
		var _gthis = this;
		var ret = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(c) {
			return tink_core__$Future_Future_$Impl_$.async(function(cb) {
				var pos = 0;
				var bytes = c.toBytes();
				var write = null;
				write = function() {
					if(pos == bytes.length) {
						cb(tink_streams_Handled.Resume);
					} else {
						tink_io__$Worker_Worker_$Impl_$.work(_gthis.worker,new tink_core__$Lazy_LazyFunc(function() {
							try {
								return tink_core_Outcome.Success(_gthis.target.writeBytes(bytes,pos,bytes.length - pos));
							} catch( e ) {
								haxe_CallStack.lastException = e;
								var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
								if(((e1) instanceof haxe_io_Eof)) {
									var e2 = e1;
									return tink_core_Outcome.Success(-1);
								} else if(js_Boot.__instanceof(e1,haxe_io_Error)) {
									var e3 = e1;
									if(e3._hx_index == 0) {
										return tink_core_Outcome.Success(0);
									} else {
										return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error writing to " + _gthis.name,e3,{ fileName : "tink/io/std/OutputSink.hx", lineNumber : 40, className : "tink.io.std.OutputSink", methodName : "consume"}));
									}
								} else if(((e1) instanceof tink_core_TypedError)) {
									return tink_core_Outcome.Failure(e1);
								} else {
									return tink_core_Outcome.Failure(tink_core_TypedError.withData(null,"Error writing to " + _gthis.name,e1,{ fileName : "tink/io/std/OutputSink.hx", lineNumber : 46, className : "tink.io.std.OutputSink", methodName : "consume"}));
								}
							}
						})).handle(function(o) {
							switch(o._hx_index) {
							case 0:
								var _g = o.data;
								if(_g == -1) {
									rest = tink_chunk_ByteChunk.of(bytes).slice(pos,bytes.length);
									cb(tink_streams_Handled.Finish);
								} else {
									var v = _g;
									pos += v;
									if(pos == bytes.length) {
										cb(tink_streams_Handled.Resume);
									} else {
										write();
									}
								}
								break;
							case 1:
								var e4 = o.failure;
								cb(tink_streams_Handled.Clog(e4));
								break;
							}
						});
					}
				};
				write();
			});
		}));
		if(options != null && options.end) {
			ret.handle(function(end) {
				try {
					_gthis.target.close();
				} catch( e5 ) {
					haxe_CallStack.lastException = e5;
					var e6 = ((e5) instanceof js__$Boot_HaxeError) ? e5.val : e5;
				}
			});
		}
		var ret1 = ret.map(function(c1) {
			return tink_io_PipeResultTools.toResult(c1,tink_core_Noise.Noise,rest);
		});
		return ret1.gather();
	}
}
tink_io_std_OutputSink.__name__ = "tink.io.std.OutputSink";
tink_io_std_OutputSink.__super__ = tink_io_SinkBase;
Object.assign(tink_io_std_OutputSink.prototype, {
	__class__: tink_io_std_OutputSink
	,name: null
	,target: null
	,worker: null
});
class tink_streams__$IdealStream_IdealStream_$Impl_$ {
	static promiseOfIdealStream(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(p));
	}
	static promiseOfStreamNoise(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(p);
	}
	static collect(this1) {
		var buf = [];
		var ret = this1.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(x) {
			buf.push(x);
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		})).map(function(c) {
			return buf;
		});
		return ret.gather();
	}
}
tink_streams__$IdealStream_IdealStream_$Impl_$.__name__ = "tink.streams._IdealStream.IdealStream_Impl_";
class tink_streams_IdealStreamBase extends tink_streams_StreamBase {
	constructor() {
		super();
	}
	idealize(rescue) {
		return this;
	}
}
tink_streams_IdealStreamBase.__name__ = "tink.streams.IdealStreamBase";
tink_streams_IdealStreamBase.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_IdealStreamBase.prototype, {
	__class__: tink_streams_IdealStreamBase
});
class tink_streams__$RealStream_RealStream_$Impl_$ {
	static promiseOfIdealStream(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(p));
	}
	static promiseOfStreamNoise(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(p);
	}
	static promiseOfRealStream(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(p));
	}
	static promiseOfStreamError(p) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(p);
	}
	static collect(this1) {
		var buf = [];
		var ret = this1.forEach(tink_streams__$Stream_Handler_$Impl_$.ofSafe(function(x) {
			buf.push(x);
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Handled.Resume));
		})).map(function(c) {
			switch(c._hx_index) {
			case 0:
				var _g1 = c.rest;
				throw new js__$Boot_HaxeError("unreachable");
			case 2:
				var e = c.error;
				return tink_core_Outcome.Failure(e);
			case 3:
				return tink_core_Outcome.Success(buf);
			}
		});
		return ret.gather();
	}
}
tink_streams__$RealStream_RealStream_$Impl_$.__name__ = "tink.streams._RealStream.RealStream_Impl_";
class tink_streams__$Stream_Stream_$Impl_$ {
	static get_depleted(this1) {
		return this1.get_depleted();
	}
	static dirty(this1) {
		return this1;
	}
	static single(i) {
		return new tink_streams_Single(new tink_core__$Lazy_LazyConst(i));
	}
	static ofIterator(i) {
		var next = null;
		next = function(step) {
			step(i.hasNext() ? tink_streams_Step.Link(i.next(),tink_streams_Generator.stream(next)) : tink_streams_Step.End);
		};
		return tink_streams_Generator.stream(next);
	}
	static flatten(f) {
		return new tink_streams_FutureStream(f);
	}
	static promiseIdeal(f) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(f));
	}
	static promiseReal(f) {
		return tink_streams__$Stream_Stream_$Impl_$.promise(tink_core__$Promise_Promise_$Impl_$.ofSpecific(f));
	}
	static promise(f) {
		var ret = f.map(function(o) {
			switch(o._hx_index) {
			case 0:
				var s = o.data;
				return tink_streams__$Stream_Stream_$Impl_$.dirty(s);
			case 1:
				var e = o.failure;
				return tink_streams__$Stream_Stream_$Impl_$.ofError(e);
			}
		});
		return tink_streams__$Stream_Stream_$Impl_$.flatten(ret.gather());
	}
	static ofError(e) {
		return new tink_streams__$Stream_ErrorStream(e);
	}
}
tink_streams__$Stream_Stream_$Impl_$.__name__ = "tink.streams._Stream.Stream_Impl_";
tink_streams__$Stream_Stream_$Impl_$.__properties__ = {get_depleted: "get_depleted"};
var tink_streams_RegroupStatus = $hxEnums["tink.streams.RegroupStatus"] = { __ename__ : "tink.streams.RegroupStatus", __constructs__ : ["Flowing","Errored","Ended"]
	,Flowing: {_hx_index:0,__enum__:"tink.streams.RegroupStatus",toString:$estr}
	,Errored: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.RegroupStatus",toString:$estr}; },$_.__params__ = ["e"],$_)
	,Ended: {_hx_index:2,__enum__:"tink.streams.RegroupStatus",toString:$estr}
};
var tink_streams_RegroupResult = $hxEnums["tink.streams.RegroupResult"] = { __ename__ : "tink.streams.RegroupResult", __constructs__ : ["Converted","Terminated","Untouched","Errored"]
	,Converted: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Terminated: ($_=function(data) { return {_hx_index:1,data:data,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Untouched: {_hx_index:2,__enum__:"tink.streams.RegroupResult",toString:$estr}
	,Errored: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.RegroupResult",toString:$estr}; },$_.__params__ = ["e"],$_)
};
class tink_streams__$Stream_Regrouper_$Impl_$ {
	static ofIgnorance(f) {
		return { apply : function(i,_) {
			return f(i);
		}};
	}
	static ofIgnoranceSync(f) {
		return { apply : function(i,_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
		}};
	}
	static ofFunc(f) {
		return { apply : f};
	}
	static ofFuncSync(f) {
		return { apply : function(i,s) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i,s)));
		}};
	}
}
tink_streams__$Stream_Regrouper_$Impl_$.__name__ = "tink.streams._Stream.Regrouper_Impl_";
class tink_streams__$Stream_CompoundStream extends tink_streams_StreamBase {
	constructor(parts) {
		super();
		this.parts = parts;
	}
	get_depleted() {
		switch(this.parts.length) {
		case 0:
			return true;
		case 1:
			return this.parts[0].get_depleted();
		default:
			return false;
		}
	}
	next() {
		var _gthis = this;
		if(this.parts.length == 0) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.End));
		} else {
			var ret = this.parts[0].next().flatMap(function(v) {
				switch(v._hx_index) {
				case 0:
					var rest = v.next;
					var v1 = v.value;
					var copy = _gthis.parts.slice();
					copy[0] = rest;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Link(v1,new tink_streams__$Stream_CompoundStream(copy))));
				case 2:
					if(_gthis.parts.length > 1) {
						return _gthis.parts[1].next();
					} else {
						return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
					}
					break;
				default:
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
				}
			});
			return ret.gather();
		}
	}
	decompose(into) {
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.decompose(into);
		}
	}
	forEach(handler) {
		var parts = this.parts;
		var handler1 = handler;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			tink_streams__$Stream_CompoundStream.consumeParts(parts,handler1,cb);
		});
	}
	static consumeParts(parts,handler,cb) {
		if(parts.length == 0) {
			cb(tink_streams_Conclusion.Depleted);
		} else {
			parts[0].forEach(handler).handle(function(o) {
				switch(o._hx_index) {
				case 0:
					var rest = o.rest;
					parts = parts.slice();
					parts[0] = rest;
					var tmp = tink_streams_Conclusion.Halted(new tink_streams__$Stream_CompoundStream(parts));
					cb(tmp);
					break;
				case 1:
					var at = o.at;
					var e = o.error;
					if(at.get_depleted()) {
						parts = parts.slice(1);
					} else {
						parts = parts.slice();
						parts[0] = at;
					}
					var tmp1 = tink_streams_Conclusion.Clogged(e,new tink_streams__$Stream_CompoundStream(parts));
					cb(tmp1);
					break;
				case 2:
					var e1 = o.error;
					cb(tink_streams_Conclusion.Failed(e1));
					break;
				case 3:
					tink_streams__$Stream_CompoundStream.consumeParts(parts.slice(1),handler,cb);
					break;
				}
			});
		}
	}
	static of(streams) {
		var ret = [];
		var _g = 0;
		while(_g < streams.length) {
			var s = streams[_g];
			++_g;
			s.decompose(ret);
		}
		if(ret.length == 0) {
			return tink_streams_Empty.inst;
		} else {
			return new tink_streams__$Stream_CompoundStream(ret);
		}
	}
}
tink_streams__$Stream_CompoundStream.__name__ = "tink.streams._Stream.CompoundStream";
tink_streams__$Stream_CompoundStream.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams__$Stream_CompoundStream.prototype, {
	__class__: tink_streams__$Stream_CompoundStream
	,parts: null
});
class tink_streams__$Stream_RegroupStream extends tink_streams__$Stream_CompoundStream {
	constructor(source,f,prev) {
		if(prev == null) {
			prev = tink_streams_Empty.inst;
		}
		var ret = null;
		var terminated = false;
		var buf = [];
		var ret1 = source.forEach(tink_streams__$Stream_Handler_$Impl_$.ofUnknown(function(item) {
			buf.push(item);
			var ret2 = f.apply(buf,tink_streams_RegroupStatus.Flowing).map(function(o) {
				switch(o._hx_index) {
				case 0:
					var v = o.data;
					ret = v;
					return tink_streams_Handled.Finish;
				case 1:
					var v1 = o.data;
					var l = new tink_core__$Lazy_LazyFunc(tink_streams_Empty.make);
					if(v1._hx_index == 0) {
						var v2 = v1.v;
						ret = v2;
					} else {
						ret = l.get();
					}
					terminated = true;
					return tink_streams_Handled.Finish;
				case 2:
					return tink_streams_Handled.Resume;
				case 3:
					var e = o.e;
					return tink_streams_Handled.Clog(e);
				}
			});
			return ret2.gather();
		})).map(function(o1) {
			switch(o1._hx_index) {
			case 0:
				if(terminated) {
					return ret;
				} else {
					var rest = o1.rest;
					return new tink_streams__$Stream_RegroupStream(rest,f,ret);
				}
				break;
			case 1:
				var rest1 = o1.at;
				var e1 = o1.error;
				return new tink_streams__$Stream_CloggedStream(tink_streams__$Stream_Stream_$Impl_$.ofError(e1),rest1);
			case 2:
				var e2 = o1.error;
				return tink_streams__$Stream_Stream_$Impl_$.ofError(e2);
			case 3:
				if(buf.length == 0) {
					return tink_streams_Empty.inst;
				} else {
					var ret3 = f.apply(buf,tink_streams_RegroupStatus.Ended).map(function(o2) {
						switch(o2._hx_index) {
						case 0:
							var v3 = o2.data;
							return v3;
						case 1:
							var v4 = o2.data;
							var l1 = new tink_core__$Lazy_LazyFunc(tink_streams_Empty.make);
							if(v4._hx_index == 0) {
								var v5 = v4.v;
								return v5;
							} else {
								return l1.get();
							}
							break;
						case 2:
							return tink_streams_Empty.inst;
						case 3:
							var e3 = o2.e;
							return tink_streams__$Stream_Stream_$Impl_$.ofError(e3);
						}
					});
					return tink_streams__$Stream_Stream_$Impl_$.flatten(ret3.gather());
				}
				break;
			}
		});
		var next = tink_streams__$Stream_Stream_$Impl_$.flatten(ret1.gather());
		super([prev,next]);
	}
}
tink_streams__$Stream_RegroupStream.__name__ = "tink.streams._Stream.RegroupStream";
tink_streams__$Stream_RegroupStream.__super__ = tink_streams__$Stream_CompoundStream;
Object.assign(tink_streams__$Stream_RegroupStream.prototype, {
	__class__: tink_streams__$Stream_RegroupStream
});
var tink_streams_Handled = $hxEnums["tink.streams.Handled"] = { __ename__ : "tink.streams.Handled", __constructs__ : ["BackOff","Finish","Resume","Clog"]
	,BackOff: {_hx_index:0,__enum__:"tink.streams.Handled",toString:$estr}
	,Finish: {_hx_index:1,__enum__:"tink.streams.Handled",toString:$estr}
	,Resume: {_hx_index:2,__enum__:"tink.streams.Handled",toString:$estr}
	,Clog: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"tink.streams.Handled",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Conclusion = $hxEnums["tink.streams.Conclusion"] = { __ename__ : "tink.streams.Conclusion", __constructs__ : ["Halted","Clogged","Failed","Depleted"]
	,Halted: ($_=function(rest) { return {_hx_index:0,rest:rest,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["rest"],$_)
	,Clogged: ($_=function(error,at) { return {_hx_index:1,error:error,at:at,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:2,error:error,__enum__:"tink.streams.Conclusion",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Depleted: {_hx_index:3,__enum__:"tink.streams.Conclusion",toString:$estr}
};
var tink_streams_ReductionStep = $hxEnums["tink.streams.ReductionStep"] = { __ename__ : "tink.streams.ReductionStep", __constructs__ : ["Progress","Crash"]
	,Progress: ($_=function(result) { return {_hx_index:0,result:result,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["result"],$_)
	,Crash: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.ReductionStep",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var tink_streams_Reduction = $hxEnums["tink.streams.Reduction"] = { __ename__ : "tink.streams.Reduction", __constructs__ : ["Crashed","Failed","Reduced"]
	,Crashed: ($_=function(error,at) { return {_hx_index:0,error:error,at:at,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error","at"],$_)
	,Failed: ($_=function(error) { return {_hx_index:1,error:error,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["error"],$_)
	,Reduced: ($_=function(result) { return {_hx_index:2,result:result,__enum__:"tink.streams.Reduction",toString:$estr}; },$_.__params__ = ["result"],$_)
};
class tink_streams__$Stream_CloggedStream extends tink_streams_StreamBase {
	constructor(rest,error) {
		super();
		this.rest = rest;
		this.error = error;
	}
	next() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Fail(this.error)));
	}
	forEach(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Clogged(this.error,this.rest)));
	}
}
tink_streams__$Stream_CloggedStream.__name__ = "tink.streams._Stream.CloggedStream";
tink_streams__$Stream_CloggedStream.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams__$Stream_CloggedStream.prototype, {
	__class__: tink_streams__$Stream_CloggedStream
	,rest: null
	,error: null
});
class tink_streams__$Stream_ErrorStream extends tink_streams_StreamBase {
	constructor(error) {
		super();
		this.error = error;
	}
	next() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Fail(this.error)));
	}
	forEach(handler) {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Conclusion.Failed(this.error)));
	}
}
tink_streams__$Stream_ErrorStream.__name__ = "tink.streams._Stream.ErrorStream";
tink_streams__$Stream_ErrorStream.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams__$Stream_ErrorStream.prototype, {
	__class__: tink_streams__$Stream_ErrorStream
	,error: null
});
class tink_streams__$Stream_Mapping_$Impl_$ {
	static _new(o) {
		var this1 = o;
		return this1;
	}
	static ofNext(n) {
		var this1 = { apply : function(i,_) {
			var this2 = tink_core__$Promise_Promise_$Impl_$.next(n(i[0]),function(o) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(o)))));
			});
			var f = tink_core__$Promise_Recover_$Impl_$.ofSync(tink_streams_RegroupResult.Errored);
			var ret = this2.flatMap(function(o1) {
				switch(o1._hx_index) {
				case 0:
					var d = o1.data;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
				case 1:
					var e = o1.failure;
					return f(e);
				}
			});
			return ret.gather();
		}};
		return this1;
	}
	static ofAsync(f) {
		var this1 = { apply : function(i,_) {
			var ret = f(i[0]).map(function(o) {
				return tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(o));
			});
			return ret.gather();
		}};
		return this1;
	}
	static ofSync(f) {
		var this1 = { apply : function(i,_) {
			var v;
			var _g = f(i[0]);
			switch(_g._hx_index) {
			case 0:
				var v1 = _g.data;
				v = tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(v1));
				break;
			case 1:
				var e = _g.failure;
				v = tink_streams_RegroupResult.Errored(e);
				break;
			}
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
		}};
		return this1;
	}
	static ofPlain(f) {
		var this1 = { apply : function(i,_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_RegroupResult.Converted(tink_streams__$Stream_Stream_$Impl_$.single(f(i[0])))));
		}};
		return this1;
	}
}
tink_streams__$Stream_Mapping_$Impl_$.__name__ = "tink.streams._Stream.Mapping_Impl_";
class tink_streams__$Stream_Filter_$Impl_$ {
	static _new(o) {
		var this1 = o;
		return this1;
	}
	static ofNext(n) {
		var this1 = { apply : function(i,_) {
			var this2 = tink_core__$Promise_Promise_$Impl_$.next(n(i[0]),function(matched) {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_streams_RegroupResult.Converted(matched ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst))));
			});
			var f = tink_core__$Promise_Recover_$Impl_$.ofSync(tink_streams_RegroupResult.Errored);
			var ret = this2.flatMap(function(o) {
				switch(o._hx_index) {
				case 0:
					var d = o.data;
					return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(d));
				case 1:
					var e = o.failure;
					return f(e);
				}
			});
			return ret.gather();
		}};
		return this1;
	}
	static ofAsync(f) {
		var this1 = { apply : function(i,_) {
			var ret = f(i[0]).map(function(matched) {
				return tink_streams_RegroupResult.Converted(matched ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst);
			});
			return ret.gather();
		}};
		return this1;
	}
	static ofSync(f) {
		var this1 = { apply : function(i,_) {
			var v;
			var _g = f(i[0]);
			switch(_g._hx_index) {
			case 0:
				var v1 = _g.data;
				v = tink_streams_RegroupResult.Converted(v1 ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst);
				break;
			case 1:
				var e = _g.failure;
				v = tink_streams_RegroupResult.Errored(e);
				break;
			}
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
		}};
		return this1;
	}
	static ofPlain(f) {
		var this1 = { apply : function(i,_) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_RegroupResult.Converted(f(i[0]) ? tink_streams__$Stream_Stream_$Impl_$.single(i[0]) : tink_streams_Empty.inst)));
		}};
		return this1;
	}
}
tink_streams__$Stream_Filter_$Impl_$.__name__ = "tink.streams._Stream.Filter_Impl_";
class tink_streams_IdealizeStream extends tink_streams_IdealStreamBase {
	constructor(target,rescue) {
		super();
		this.target = target;
		this.rescue = rescue;
	}
	get_depleted() {
		return this.target.get_depleted();
	}
	next() {
		var _gthis = this;
		var ret = this.target.next().flatMap(function(v) {
			if(v._hx_index == 1) {
				var e = v.e;
				return _gthis.rescue(e).idealize(_gthis.rescue).next();
			} else {
				return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(v));
			}
		});
		return ret.gather();
	}
	forEach(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.target.forEach(handler).handle(function(end) {
				switch(end._hx_index) {
				case 0:
					var rest = end.rest;
					var tmp = tink_streams_Conclusion.Halted(rest.idealize(_gthis.rescue));
					cb(tmp);
					break;
				case 1:
					var at = end.at;
					var e = end.error;
					var tmp1 = tink_streams_Conclusion.Clogged(e,at.idealize(_gthis.rescue));
					cb(tmp1);
					break;
				case 2:
					var e1 = end.error;
					_gthis.rescue(e1).idealize(_gthis.rescue).forEach(handler).handle(cb);
					break;
				case 3:
					cb(tink_streams_Conclusion.Depleted);
					break;
				}
			});
		});
	}
}
tink_streams_IdealizeStream.__name__ = "tink.streams.IdealizeStream";
tink_streams_IdealizeStream.__super__ = tink_streams_IdealStreamBase;
Object.assign(tink_streams_IdealizeStream.prototype, {
	__class__: tink_streams_IdealizeStream
	,target: null
	,rescue: null
});
class tink_streams_Single extends tink_streams_StreamBase {
	constructor(value) {
		super();
		this.value = value;
	}
	next() {
		return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_Step.Link(this.value.get(),tink_streams_Empty.inst)));
	}
	forEach(handle) {
		var _gthis = this;
		var ret = handle(this.value.get()).map(function(step) {
			switch(step._hx_index) {
			case 0:
				return tink_streams_Conclusion.Halted(_gthis);
			case 1:
				return tink_streams_Conclusion.Halted(tink_streams_Empty.inst);
			case 2:
				return tink_streams_Conclusion.Depleted;
			case 3:
				var e = step.e;
				return tink_streams_Conclusion.Clogged(e,_gthis);
			}
		});
		return ret.gather();
	}
}
tink_streams_Single.__name__ = "tink.streams.Single";
tink_streams_Single.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_Single.prototype, {
	__class__: tink_streams_Single
	,value: null
});
class tink_streams__$Stream_Handler_$Impl_$ {
	static _new(f) {
		var this1 = f;
		return this1;
	}
	static apply(this1,item) {
		return this1(item);
	}
	static ofSafeSync(f) {
		var this1 = function(i) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
		};
		return this1;
	}
	static ofUnknownSync(f) {
		var this1 = function(i) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(i)));
		};
		return this1;
	}
	static ofSafe(f) {
		var this1 = f;
		return this1;
	}
	static ofUnknown(f) {
		var this1 = f;
		return this1;
	}
}
tink_streams__$Stream_Handler_$Impl_$.__name__ = "tink.streams._Stream.Handler_Impl_";
class tink_streams__$Stream_Reducer_$Impl_$ {
	static _new(f) {
		var this1 = f;
		return this1;
	}
	static apply(this1,res,item) {
		return this1(res,item);
	}
	static ofSafeSync(f) {
		var this1 = function(res,cur) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
		};
		return this1;
	}
	static ofUnknownSync(f) {
		var this1 = function(res,cur) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(f(res,cur)));
		};
		return this1;
	}
	static ofSafe(f) {
		var this1 = f;
		return this1;
	}
	static ofPlainSync(f) {
		var this1 = function(res,cur) {
			return new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_streams_ReductionStep.Progress(f(res,cur))));
		};
		return this1;
	}
	static ofUnknown(f) {
		var this1 = f;
		return this1;
	}
	static ofPromiseBased(f) {
		var this1 = function(res,cur) {
			var ret = f(res,cur).map(function(s) {
				switch(s._hx_index) {
				case 0:
					var r = s.data;
					return tink_streams_ReductionStep.Progress(r);
				case 1:
					var e = s.failure;
					return tink_streams_ReductionStep.Crash(e);
				}
			});
			return ret.gather();
		};
		return this1;
	}
}
tink_streams__$Stream_Reducer_$Impl_$.__name__ = "tink.streams._Stream.Reducer_Impl_";
class tink_streams_FutureStream extends tink_streams_StreamBase {
	constructor(f) {
		super();
		this.f = f;
	}
	next() {
		var ret = this.f.flatMap(function(s) {
			return s.next();
		});
		return ret.gather();
	}
	forEach(handler) {
		var _gthis = this;
		return tink_core__$Future_Future_$Impl_$.async(function(cb) {
			_gthis.f.handle(function(s) {
				s.forEach(handler).handle(cb);
			});
		});
	}
}
tink_streams_FutureStream.__name__ = "tink.streams.FutureStream";
tink_streams_FutureStream.__super__ = tink_streams_StreamBase;
Object.assign(tink_streams_FutureStream.prototype, {
	__class__: tink_streams_FutureStream
	,f: null
});
class tink_streams_BlendStream extends tink_streams_Generator {
	constructor(a,b) {
		var first = null;
		var wait = function(s) {
			var ret = s.next().map(function(o) {
				if(first == null) {
					first = s;
				}
				return o;
			});
			return ret.gather();
		};
		var n1 = wait(a);
		var n2 = wait(b);
		super(tink_core__$Future_Future_$Impl_$.async(function(cb) {
			tink_core__$Future_Future_$Impl_$.first(n1,n2).handle(function(o1) {
				switch(o1._hx_index) {
				case 0:
					var rest = o1.next;
					var item = o1.value;
					var tmp = tink_streams_Step.Link(item,new tink_streams_BlendStream(rest,first == a ? b : a));
					cb(tmp);
					break;
				case 1:
					var e = o1.e;
					cb(tink_streams_Step.Fail(e));
					break;
				case 2:
					(first == a ? n2 : n1).handle(cb);
					break;
				}
			});
		}));
	}
}
tink_streams_BlendStream.__name__ = "tink.streams.BlendStream";
tink_streams_BlendStream.__super__ = tink_streams_Generator;
Object.assign(tink_streams_BlendStream.prototype, {
	__class__: tink_streams_BlendStream
});
var tink_streams_Step = $hxEnums["tink.streams.Step"] = { __ename__ : "tink.streams.Step", __constructs__ : ["Link","Fail","End"]
	,Link: ($_=function(value,next) { return {_hx_index:0,value:value,next:next,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["value","next"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Step",toString:$estr}; },$_.__params__ = ["e"],$_)
	,End: {_hx_index:2,__enum__:"tink.streams.Step",toString:$estr}
};
class tink_streams_SignalStream extends tink_streams_Generator {
	constructor(signal) {
		var ret = tink_core__$Signal_Signal_$Impl_$.nextTime(signal).map(function(o) {
			switch(o._hx_index) {
			case 0:
				var data = o.data;
				return tink_streams_Step.Link(data,new tink_streams_SignalStream(signal));
			case 1:
				var e = o.e;
				return tink_streams_Step.Fail(e);
			case 2:
				return tink_streams_Step.End;
			}
		});
		super(ret.gather());
	}
}
tink_streams_SignalStream.__name__ = "tink.streams.SignalStream";
tink_streams_SignalStream.__super__ = tink_streams_Generator;
Object.assign(tink_streams_SignalStream.prototype, {
	__class__: tink_streams_SignalStream
});
var tink_streams_Yield = $hxEnums["tink.streams.Yield"] = { __ename__ : "tink.streams.Yield", __constructs__ : ["Data","Fail","End"]
	,Data: ($_=function(data) { return {_hx_index:0,data:data,__enum__:"tink.streams.Yield",toString:$estr}; },$_.__params__ = ["data"],$_)
	,Fail: ($_=function(e) { return {_hx_index:1,e:e,__enum__:"tink.streams.Yield",toString:$estr}; },$_.__params__ = ["e"],$_)
	,End: {_hx_index:2,__enum__:"tink.streams.Yield",toString:$estr}
};
class utest_Assert {
	static processResult(cond,getMessage,pos) {
		if(utest_Assert.results == null) {
			throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if(cond) {
			utest_Assert.results.add(utest_Assertation.Success(pos));
		} else {
			utest_Assert.results.add(utest_Assertation.Failure(getMessage(),pos));
		}
	}
	static isTrue(cond,msg,pos) {
		if(utest_Assert.results == null) {
			throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if(cond) {
			utest_Assert.results.add(utest_Assertation.Success(pos));
		} else {
			utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected true",pos));
		}
	}
	static isFalse(value,msg,pos) {
		if(utest_Assert.results == null) {
			throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if(value == false) {
			utest_Assert.results.add(utest_Assertation.Success(pos));
		} else {
			utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected false",pos));
		}
	}
	static isNull(value,msg,pos) {
		if(utest_Assert.results == null) {
			throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if(value == null) {
			utest_Assert.results.add(utest_Assertation.Success(pos));
		} else {
			utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected null but it is " + utest_Assert.q(value),pos));
		}
	}
	static notNull(value,msg,pos) {
		if(utest_Assert.results == null) {
			throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if(value != null) {
			utest_Assert.results.add(utest_Assertation.Success(pos));
		} else {
			utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected not null",pos));
		}
	}
	static is(value,type,msg,pos) {
		if(utest_Assert.results == null) {
			throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if(js_Boot.__instanceof(value,type)) {
			utest_Assert.results.add(utest_Assertation.Success(pos));
		} else {
			utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected type " + utest_Assert.typeToString(type) + " but it is " + utest_Assert.typeToString(value),pos));
		}
	}
	static notEquals(expected,value,msg,pos) {
		if(utest_Assert.results == null) {
			throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if(expected != value) {
			utest_Assert.results.add(utest_Assertation.Success(pos));
		} else {
			utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " and test value " + utest_Assert.q(value) + " should be different",pos));
		}
	}
	static equals(expected,value,msg,pos) {
		if(utest_Assert.results == null) {
			throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if(expected == value) {
			utest_Assert.results.add(utest_Assertation.Success(pos));
		} else {
			utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value),pos));
		}
	}
	static match(pattern,value,msg,pos) {
		var cond = pattern.match(value);
		if(utest_Assert.results == null) {
			throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if(cond) {
			utest_Assert.results.add(utest_Assertation.Success(pos));
		} else {
			utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "the value " + utest_Assert.q(value) + " does not match the provided pattern",pos));
		}
	}
	static floatEquals(expected,value,approx,msg,pos) {
		var cond = utest_Assert._floatEquals(expected,value,approx);
		if(utest_Assert.results == null) {
			throw new js__$Boot_HaxeError("Assert at " + pos.fileName + ":" + pos.lineNumber + " out of context. Most likely you are trying to assert after a test timeout.");
		}
		if(cond) {
			utest_Assert.results.add(utest_Assertation.Success(pos));
		} else {
			utest_Assert.results.add(utest_Assertation.Failure(msg != null ? msg : "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value),pos));
		}
	}
	static _floatEquals(expected,value,approx) {
		if(isNaN(expected)) {
			return isNaN(value);
		} else if(isNaN(value)) {
			return false;
		} else if(!isFinite(expected) && !isFinite(value)) {
			return expected > 0 == value > 0;
		}
		if(null == approx) {
			approx = 1e-5;
		}
		return Math.abs(value - expected) <= approx;
	}
	static getTypeName(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			return "`null`";
		case 1:
			return "Int";
		case 2:
			return "Float";
		case 3:
			return "Bool";
		case 4:
			return "Object";
		case 5:
			return "function";
		case 6:
			var c = _g.c;
			return c.__name__;
		case 7:
			var e = _g.e;
			return e.__ename__;
		case 8:
			return "`Unknown`";
		}
	}
	static isIterable(v,isAnonym) {
		var fields;
		if(isAnonym) {
			fields = Reflect.fields(v);
		} else {
			var o = v;
			fields = Type.getInstanceFields(o == null ? null : js_Boot.getClass(o));
		}
		if(!Lambda.has(fields,"iterator")) {
			return false;
		}
		return Reflect.isFunction(Reflect.field(v,"iterator"));
	}
	static isIterator(v,isAnonym) {
		var fields;
		if(isAnonym) {
			fields = Reflect.fields(v);
		} else {
			var o = v;
			fields = Type.getInstanceFields(o == null ? null : js_Boot.getClass(o));
		}
		if(!Lambda.has(fields,"next") || !Lambda.has(fields,"hasNext")) {
			return false;
		}
		if(Reflect.isFunction(Reflect.field(v,"next"))) {
			return Reflect.isFunction(Reflect.field(v,"hasNext"));
		} else {
			return false;
		}
	}
	static sameAs(expected,value,status,approx) {
		var texpected = utest_Assert.getTypeName(expected);
		var tvalue = utest_Assert.getTypeName(value);
		status.expectedValue = expected;
		status.actualValue = value;
		if(texpected != tvalue && !(texpected == "Int" && tvalue == "Float" || texpected == "Float" && tvalue == "Int")) {
			status.error = "expected type " + texpected + " but it is " + tvalue + (status.path == "" ? "" : " for field " + status.path);
			return false;
		}
		var _g = Type.typeof(expected);
		switch(_g._hx_index) {
		case 1:case 2:
			if(!utest_Assert._floatEquals(expected,value,approx)) {
				status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			return true;
		case 0:case 3:
			if(expected != value) {
				status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			return true;
		case 4:
			if(status.recursive || status.path == "") {
				var tfields = Reflect.fields(value);
				var fields = Reflect.fields(expected);
				var path = status.path;
				var _g1 = 0;
				while(_g1 < fields.length) {
					var field = fields[_g1];
					++_g1;
					HxOverrides.remove(tfields,field);
					status.path = path == "" ? field : path + "." + field;
					if(!Object.prototype.hasOwnProperty.call(value,field)) {
						status.error = "expected field " + status.path + " does not exist in " + utest_Assert.q(value);
						return false;
					}
					var e = Reflect.field(expected,field);
					if(Reflect.isFunction(e)) {
						continue;
					}
					var v = Reflect.field(value,field);
					if(!utest_Assert.sameAs(e,v,status,approx)) {
						return false;
					}
				}
				if(tfields.length > 0) {
					status.error = "the tested object has extra field(s) (" + tfields.join(", ") + ") not included in the expected ones";
					return false;
				}
			}
			if(utest_Assert.isIterator(expected,true)) {
				if(!utest_Assert.isIterator(value,true)) {
					status.error = "expected Iterable but it is not " + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				if(status.recursive || status.path == "") {
					var evalues = Lambda.array({ iterator : function() {
						return expected;
					}});
					var vvalues = Lambda.array({ iterator : function() {
						return value;
					}});
					if(evalues.length != vvalues.length) {
						status.error = "expected " + evalues.length + " values in Iterator but they are " + vvalues.length + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
					var path1 = status.path;
					var _g2 = 0;
					var _g11 = evalues.length;
					while(_g2 < _g11) {
						var i = _g2++;
						status.path = path1 == "" ? "iterator[" + i + "]" : path1 + "[" + i + "]";
						if(!utest_Assert.sameAs(evalues[i],vvalues[i],status,approx)) {
							status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
							return false;
						}
					}
				}
				return true;
			}
			if(utest_Assert.isIterable(expected,true)) {
				if(!utest_Assert.isIterable(value,true)) {
					status.error = "expected Iterator but it is not " + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				if(status.recursive || status.path == "") {
					var evalues1 = Lambda.array(expected);
					var vvalues1 = Lambda.array(value);
					if(evalues1.length != vvalues1.length) {
						status.error = "expected " + evalues1.length + " values in Iterable but they are " + vvalues1.length + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
					var path2 = status.path;
					var _g3 = 0;
					var _g12 = evalues1.length;
					while(_g3 < _g12) {
						var i1 = _g3++;
						status.path = path2 == "" ? "iterable[" + i1 + "]" : path2 + "[" + i1 + "]";
						if(!utest_Assert.sameAs(evalues1[i1],vvalues1[i1],status,approx)) {
							return false;
						}
					}
				}
				return true;
			}
			return true;
		case 5:
			if(!Reflect.compareMethods(expected,value)) {
				status.error = "expected same function reference" + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			return true;
		case 6:
			var c = _g.c;
			var cexpected = c.__name__;
			var o = value;
			var c1 = o == null ? null : js_Boot.getClass(o);
			var cvalue = c1.__name__;
			if(cexpected != cvalue) {
				status.error = "expected instance of " + utest_Assert.q(cexpected) + " but it is " + utest_Assert.q(cvalue) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			if(typeof(expected) == "string") {
				if(expected == value) {
					return true;
				} else {
					status.error = "expected string '" + Std.string(expected) + "' but it is '" + Std.string(value) + "'";
					return false;
				}
			}
			if(((expected) instanceof Array) && expected.__enum__ == null) {
				if(status.recursive || status.path == "") {
					if(expected.length != value.length) {
						status.error = "expected " + Std.string(expected.length) + " elements but they are " + Std.string(value.length) + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
					var path3 = status.path;
					var _g4 = 0;
					var _g13 = expected.length;
					while(_g4 < _g13) {
						var i2 = _g4++;
						status.path = path3 == "" ? "array[" + i2 + "]" : path3 + "[" + i2 + "]";
						if(!utest_Assert.sameAs(expected[i2],value[i2],status,approx)) {
							status.error = "expected array element at [" + i2 + "] to have " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
							return false;
						}
					}
				}
				return true;
			}
			if(((expected) instanceof Date)) {
				if(expected.getTime() != value.getTime()) {
					status.error = "expected " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				return true;
			}
			if(((expected) instanceof haxe_io_Bytes)) {
				if(status.recursive || status.path == "") {
					var ebytes = expected;
					var vbytes = value;
					if(ebytes.length != vbytes.length) {
						return false;
					}
					var _g5 = 0;
					var _g14 = ebytes.length;
					while(_g5 < _g14) {
						var i3 = _g5++;
						if(ebytes.b[i3] != vbytes.b[i3]) {
							status.error = "expected byte " + ebytes.b[i3] + " but it is " + vbytes.b[i3] + (status.path == "" ? "" : " for field " + status.path);
							return false;
						}
					}
				}
				return true;
			}
			if(js_Boot.__instanceof(expected,haxe_IMap)) {
				if(status.recursive || status.path == "") {
					var map = js_Boot.__cast(expected , haxe_IMap);
					var vmap = js_Boot.__cast(value , haxe_IMap);
					var _g6 = [];
					var k = map.keys();
					while(k.hasNext()) {
						var k1 = k.next();
						_g6.push(k1);
					}
					var keys = _g6;
					var _g15 = [];
					var k2 = vmap.keys();
					while(k2.hasNext()) {
						var k3 = k2.next();
						_g15.push(k3);
					}
					var vkeys = _g15;
					if(keys.length != vkeys.length) {
						status.error = "expected " + keys.length + " keys but they are " + vkeys.length + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
					var path4 = status.path;
					var _g21 = 0;
					while(_g21 < keys.length) {
						var key = keys[_g21];
						++_g21;
						status.path = path4 == "" ? "hash[" + Std.string(key) + "]" : path4 + "[" + Std.string(key) + "]";
						if(!utest_Assert.sameAs(map.get(key),vmap.get(key),status,approx)) {
							status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
							return false;
						}
					}
				}
				return true;
			}
			if(utest_Assert.isIterator(expected,false)) {
				if(status.recursive || status.path == "") {
					var evalues2 = Lambda.array({ iterator : function() {
						return expected;
					}});
					var vvalues2 = Lambda.array({ iterator : function() {
						return value;
					}});
					if(evalues2.length != vvalues2.length) {
						status.error = "expected " + evalues2.length + " values in Iterator but they are " + vvalues2.length + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
					var path5 = status.path;
					var _g7 = 0;
					var _g16 = evalues2.length;
					while(_g7 < _g16) {
						var i4 = _g7++;
						status.path = path5 == "" ? "iterator[" + i4 + "]" : path5 + "[" + i4 + "]";
						if(!utest_Assert.sameAs(evalues2[i4],vvalues2[i4],status,approx)) {
							status.error = "expected " + utest_Assert.q(status.expectedValue) + " but it is " + utest_Assert.q(status.actualValue) + (status.path == "" ? "" : " for field " + status.path);
							return false;
						}
					}
				}
				return true;
			}
			if(utest_Assert.isIterable(expected,false)) {
				if(status.recursive || status.path == "") {
					var evalues3 = Lambda.array(expected);
					var vvalues3 = Lambda.array(value);
					if(evalues3.length != vvalues3.length) {
						status.error = "expected " + evalues3.length + " values in Iterable but they are " + vvalues3.length + (status.path == "" ? "" : " for field " + status.path);
						return false;
					}
					var path6 = status.path;
					var _g8 = 0;
					var _g17 = evalues3.length;
					while(_g8 < _g17) {
						var i5 = _g8++;
						status.path = path6 == "" ? "iterable[" + i5 + "]" : path6 + "[" + i5 + "]";
						if(!utest_Assert.sameAs(evalues3[i5],vvalues3[i5],status,approx)) {
							return false;
						}
					}
				}
				return true;
			}
			if(status.recursive || status.path == "") {
				var o1 = expected;
				var fields1 = Type.getInstanceFields(o1 == null ? null : js_Boot.getClass(o1));
				var path7 = status.path;
				var _g9 = 0;
				while(_g9 < fields1.length) {
					var field1 = fields1[_g9];
					++_g9;
					status.path = path7 == "" ? field1 : path7 + "." + field1;
					var e1 = Reflect.field(expected,field1);
					if(Reflect.isFunction(e1)) {
						continue;
					}
					var v1 = Reflect.field(value,field1);
					if(!utest_Assert.sameAs(e1,v1,status,approx)) {
						return false;
					}
				}
			}
			return true;
		case 7:
			var e2 = _g.e;
			var eexpected = e2.__ename__;
			var e3 = Type.getEnum(value);
			var evalue = e3.__ename__;
			if(eexpected != evalue) {
				status.error = "expected enumeration of " + utest_Assert.q(eexpected) + " but it is " + utest_Assert.q(evalue) + (status.path == "" ? "" : " for field " + status.path);
				return false;
			}
			if(status.recursive || status.path == "") {
				if(expected._hx_index != value._hx_index) {
					var e4 = expected;
					var tmp = "expected enum constructor " + utest_Assert.q($hxEnums[e4.__enum__].__constructs__[e4._hx_index]) + " but it is ";
					var e5 = value;
					status.error = tmp + utest_Assert.q($hxEnums[e5.__enum__].__constructs__[e5._hx_index]) + (status.path == "" ? "" : " for field " + status.path);
					return false;
				}
				var eparams = Type.enumParameters(expected);
				var vparams = Type.enumParameters(value);
				var path8 = status.path;
				var _g10 = 0;
				var _g18 = eparams.length;
				while(_g10 < _g18) {
					var i6 = _g10++;
					status.path = path8 == "" ? "enum[" + i6 + "]" : path8 + "[" + i6 + "]";
					if(!utest_Assert.sameAs(eparams[i6],vparams[i6],status,approx)) {
						status.error = "expected enum param " + utest_Assert.q(expected) + " but it is " + utest_Assert.q(value) + (status.path == "" ? "" : " for field " + status.path) + " with " + status.error;
						return false;
					}
				}
			}
			return true;
		case 8:
			throw new js__$Boot_HaxeError("Unable to compare two unknown types");
		}
	}
	static q(v) {
		if(typeof(v) == "string") {
			return "\"" + StringTools.replace(v,"\"","\\\"") + "\"";
		} else {
			return Std.string(v);
		}
	}
	static same(expected,value,recursive,msg,approx,pos) {
		if(null == approx) {
			approx = 1e-5;
		}
		var status = { recursive : null == recursive ? true : recursive, path : "", error : null, expectedValue : expected, actualValue : value};
		if(utest_Assert.sameAs(expected,value,status,approx)) {
			utest_Assert.pass(msg,pos);
		} else {
			utest_Assert.fail(msg == null ? status.error : msg,pos);
		}
	}
	static raises(method,type,msgNotThrown,msgWrongType,pos) {
		var name = type != null ? type.__name__ : "Dynamic";
		try {
			method();
			if(null == msgNotThrown) {
				msgNotThrown = "exception of type " + name + " not raised";
			}
			utest_Assert.fail(msgNotThrown,pos);
		} catch( ex ) {
			haxe_CallStack.lastException = ex;
			var ex1 = ((ex) instanceof js__$Boot_HaxeError) ? ex.val : ex;
			if(null == type) {
				utest_Assert.pass(null,pos);
			} else {
				if(null == msgWrongType) {
					msgWrongType = "expected throw of type " + name + " but it is " + Std.string(ex1);
				}
				utest_Assert.isTrue(js_Boot.__instanceof(ex1,type),msgWrongType,pos);
			}
		}
	}
	static allows(possibilities,value,msg,pos) {
		if(Lambda.has(possibilities,value)) {
			utest_Assert.isTrue(true,msg,pos);
		} else {
			utest_Assert.fail(msg == null ? "value " + utest_Assert.q(value) + " not found in the expected possibilities " + Std.string(possibilities) : msg,pos);
		}
	}
	static contains(match,values,msg,pos) {
		if(Lambda.has(values,match)) {
			utest_Assert.isTrue(true,msg,pos);
		} else {
			utest_Assert.fail(msg == null ? "values " + utest_Assert.q(values) + " do not contain " + Std.string(match) : msg,pos);
		}
	}
	static notContains(match,values,msg,pos) {
		if(!Lambda.has(values,match)) {
			utest_Assert.isTrue(true,msg,pos);
		} else {
			utest_Assert.fail(msg == null ? "values " + utest_Assert.q(values) + " do contain " + Std.string(match) : msg,pos);
		}
	}
	static stringContains(match,value,msg,pos) {
		if(value != null && value.indexOf(match) >= 0) {
			utest_Assert.isTrue(true,msg,pos);
		} else {
			utest_Assert.fail(msg == null ? "value " + utest_Assert.q(value) + " does not contain " + utest_Assert.q(match) : msg,pos);
		}
	}
	static stringSequence(sequence,value,msg,pos) {
		if(null == value) {
			utest_Assert.fail(msg == null ? "null argument value" : msg,pos);
			return;
		}
		var p = 0;
		var _g = 0;
		while(_g < sequence.length) {
			var s = sequence[_g];
			++_g;
			var p2 = value.indexOf(s,p);
			if(p2 < 0) {
				if(msg == null) {
					msg = "expected '" + s + "' after ";
					if(p > 0) {
						var cut = HxOverrides.substr(value,0,p);
						if(cut.length > 30) {
							cut = "..." + HxOverrides.substr(cut,-27,null);
						}
						msg += " '" + cut + "'";
					} else {
						msg += " begin";
					}
				}
				utest_Assert.fail(msg,pos);
				return;
			}
			p = p2 + s.length;
		}
		utest_Assert.isTrue(true,msg,pos);
	}
	static pass(msg,pos) {
		if(msg == null) {
			msg = "pass expected";
		}
		utest_Assert.isTrue(true,msg,pos);
	}
	static fail(msg,pos) {
		if(msg == null) {
			msg = "failure expected";
		}
		utest_Assert.isTrue(false,msg,pos);
	}
	static warn(msg) {
		utest_Assert.results.add(utest_Assertation.Warning(msg));
	}
	static createAsync(f,timeout) {
		return function() {
		};
	}
	static createEvent(f,timeout) {
		return function(e) {
		};
	}
	static typeToString(t) {
		try {
			var o = t;
			var _t = o == null ? null : js_Boot.getClass(o);
			if(_t != null) {
				t = _t;
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		}
		try {
			return t.__name__;
		} catch( e2 ) {
			haxe_CallStack.lastException = e2;
			var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
		}
		try {
			var _t1 = Type.getEnum(t);
			if(_t1 != null) {
				t = _t1;
			}
		} catch( e4 ) {
			haxe_CallStack.lastException = e4;
			var e5 = ((e4) instanceof js__$Boot_HaxeError) ? e4.val : e4;
		}
		try {
			return t.__ename__;
		} catch( e6 ) {
			haxe_CallStack.lastException = e6;
			var e7 = ((e6) instanceof js__$Boot_HaxeError) ? e6.val : e6;
		}
		try {
			return Std.string(Type.typeof(t));
		} catch( e8 ) {
			haxe_CallStack.lastException = e8;
			var e9 = ((e8) instanceof js__$Boot_HaxeError) ? e8.val : e8;
		}
		try {
			return Std.string(t);
		} catch( e10 ) {
			haxe_CallStack.lastException = e10;
			var e11 = ((e10) instanceof js__$Boot_HaxeError) ? e10.val : e10;
		}
		return "<unable to retrieve type name>";
	}
}
utest_Assert.__name__ = "utest.Assert";
var utest_Assertation = $hxEnums["utest.Assertation"] = { __ename__ : "utest.Assertation", __constructs__ : ["Success","Failure","Error","SetupError","TeardownError","TimeoutError","AsyncError","Warning","Ignore"]
	,Success: ($_=function(pos) { return {_hx_index:0,pos:pos,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["pos"],$_)
	,Failure: ($_=function(msg,pos) { return {_hx_index:1,msg:msg,pos:pos,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["msg","pos"],$_)
	,Error: ($_=function(e,stack) { return {_hx_index:2,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,SetupError: ($_=function(e,stack) { return {_hx_index:3,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,TeardownError: ($_=function(e,stack) { return {_hx_index:4,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,TimeoutError: ($_=function(missedAsyncs,stack) { return {_hx_index:5,missedAsyncs:missedAsyncs,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["missedAsyncs","stack"],$_)
	,AsyncError: ($_=function(e,stack) { return {_hx_index:6,e:e,stack:stack,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["e","stack"],$_)
	,Warning: ($_=function(msg) { return {_hx_index:7,msg:msg,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["msg"],$_)
	,Ignore: ($_=function(reason) { return {_hx_index:8,reason:reason,__enum__:"utest.Assertation",toString:$estr}; },$_.__params__ = ["reason"],$_)
};
class utest_Async {
	constructor(timeoutMs) {
		if(timeoutMs == null) {
			timeoutMs = 250;
		}
		this.callbacks = [];
		this.timedOut = false;
		this.resolved = false;
		this.startTime = Date.now() / 1000;
		this.timer = haxe_Timer.delay($bind(this,this.setTimedOutState),timeoutMs);
	}
	done(pos) {
		if(this.resolved) {
			if(this.timedOut) {
				throw new js__$Boot_HaxeError("Cannot done() at " + pos.fileName + ":" + pos.lineNumber + " because async is timed out.");
			} else {
				throw new js__$Boot_HaxeError("Cannot done() at " + pos.fileName + ":" + pos.lineNumber + " because async is done already.");
			}
		}
		this.resolved = true;
		var _g = 0;
		var _g1 = this.callbacks;
		while(_g < _g1.length) {
			var cb = _g1[_g];
			++_g;
			cb();
		}
	}
	setTimeout(timeoutMs,pos) {
		if(this.resolved) {
			throw new js__$Boot_HaxeError("Cannot setTimeout(" + timeoutMs + ") at " + pos.fileName + ":" + pos.lineNumber + " because async is done.");
		}
		if(this.timedOut) {
			throw new js__$Boot_HaxeError("Cannot setTimeout(" + timeoutMs + ") at " + pos.fileName + ":" + pos.lineNumber + " because async is timed out.");
		}
		this.timer.stop();
		var delay = timeoutMs - Math.round(1000 * (Date.now() / 1000 - this.startTime));
		this.timer = haxe_Timer.delay($bind(this,this.setTimedOutState),delay);
	}
	then(cb) {
		if(this.resolved) {
			cb();
		} else {
			this.callbacks.push(cb);
		}
	}
	setTimedOutState() {
		if(this.resolved) {
			return;
		}
		this.timedOut = true;
		this.done({ fileName : "utest/Async.hx", lineNumber : 78, className : "utest.Async", methodName : "setTimedOutState"});
	}
	static getResolved() {
		if(utest_Async.resolvedInstance == null) {
			utest_Async.resolvedInstance = new utest_Async();
			utest_Async.resolvedInstance.done({ fileName : "utest/Async.hx", lineNumber : 28, className : "utest.Async", methodName : "getResolved"});
		}
		return utest_Async.resolvedInstance;
	}
}
utest_Async.__name__ = "utest.Async";
Object.assign(utest_Async.prototype, {
	__class__: utest_Async
	,resolved: null
	,timedOut: null
	,callbacks: null
	,startTime: null
	,timer: null
});
var utest__$Dispatcher_EventException = $hxEnums["utest._Dispatcher.EventException"] = { __ename__ : "utest._Dispatcher.EventException", __constructs__ : ["StopPropagation"]
	,StopPropagation: {_hx_index:0,__enum__:"utest._Dispatcher.EventException",toString:$estr}
};
class utest_Dispatcher {
	constructor() {
		this.handlers = [];
	}
	add(h) {
		this.handlers.push(h);
		return h;
	}
	remove(h) {
		var _g = 0;
		var _g1 = this.handlers.length;
		while(_g < _g1) {
			var i = _g++;
			if(Reflect.compareMethods(this.handlers[i],h)) {
				return this.handlers.splice(i,1)[0];
			}
		}
		return null;
	}
	clear() {
		this.handlers = [];
	}
	dispatch(e) {
		try {
			var list = this.handlers.slice();
			var _g = 0;
			while(_g < list.length) {
				var l = list[_g];
				++_g;
				l(e);
			}
			return true;
		} catch( exc ) {
			haxe_CallStack.lastException = exc;
			var exc1 = ((exc) instanceof js__$Boot_HaxeError) ? exc.val : exc;
			if(js_Boot.__instanceof(exc1,utest__$Dispatcher_EventException)) {
				var exc2 = exc1;
				return false;
			} else {
				throw exc;
			}
		}
	}
	has() {
		return this.handlers.length > 0;
	}
	static stop() {
		throw new js__$Boot_HaxeError(utest__$Dispatcher_EventException.StopPropagation);
	}
}
utest_Dispatcher.__name__ = "utest.Dispatcher";
Object.assign(utest_Dispatcher.prototype, {
	__class__: utest_Dispatcher
	,handlers: null
});
class utest_Notifier {
	constructor() {
		this.handlers = [];
	}
	add(h) {
		this.handlers.push(h);
		return h;
	}
	remove(h) {
		var _g = 0;
		var _g1 = this.handlers.length;
		while(_g < _g1) {
			var i = _g++;
			if(Reflect.compareMethods(this.handlers[i],h)) {
				return this.handlers.splice(i,1)[0];
			}
		}
		return null;
	}
	clear() {
		this.handlers = [];
	}
	dispatch() {
		try {
			var list = this.handlers.slice();
			var _g = 0;
			while(_g < list.length) {
				var l = list[_g];
				++_g;
				l();
			}
			return true;
		} catch( exc ) {
			haxe_CallStack.lastException = exc;
			var exc1 = ((exc) instanceof js__$Boot_HaxeError) ? exc.val : exc;
			if(js_Boot.__instanceof(exc1,utest__$Dispatcher_EventException)) {
				var exc2 = exc1;
				return false;
			} else {
				throw exc;
			}
		}
	}
	has() {
		return this.handlers.length > 0;
	}
	static stop() {
		throw new js__$Boot_HaxeError(utest__$Dispatcher_EventException.StopPropagation);
	}
}
utest_Notifier.__name__ = "utest.Notifier";
Object.assign(utest_Notifier.prototype, {
	__class__: utest_Notifier
	,handlers: null
});
class utest_TestHandler {
	constructor(fixture) {
		this.wasBound = false;
		this.finished = false;
		if(fixture == null) {
			throw new js__$Boot_HaxeError("fixture argument is null");
		}
		this.fixture = fixture;
		this.results = new haxe_ds_List();
		this.asyncStack = new haxe_ds_List();
		this.onTested = new utest_Dispatcher();
		this.onTimeout = new utest_Dispatcher();
		this.onComplete = new utest_Dispatcher();
		this.onPrecheck = new utest_Dispatcher();
		if(fixture.ignoringInfo != null) {
			this.results.add(utest_Assertation.Ignore(fixture.ignoringInfo));
		}
	}
	execute() {
		if(this.fixture.ignoringInfo != null) {
			this.executeFinally();
			return;
		}
		var isSync = true;
		var expectingAsync = true;
		var _gthis = this;
		var run = function() {
			if(isSync) {
				expectingAsync = false;
				return;
			}
			_gthis.executeFixtureMethod();
			_gthis.executeFinally();
		};
		try {
			this.executeMethod(this.fixture.setup);
			this.executeAsyncMethod(this.fixture.setupAsync,run);
			if(!expectingAsync) {
				this.executeFixtureMethod();
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.SetupError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack()));
		}
		isSync = false;
		if(!expectingAsync) {
			this.executeFinally();
		}
	}
	executeFixtureMethod() {
		try {
			this.executeMethod(this.fixture.method);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.Error(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack()));
		}
	}
	executeFinally() {
		this.onPrecheck.dispatch(this);
		this.checkTested();
	}
	checkTested() {
		if(this.expiration == null || this.asyncStack.length == 0) {
			this.tested();
		} else if(Date.now() / 1000 > this.expiration) {
			this.timeout();
		} else {
			haxe_Timer.delay($bind(this,this.checkTested),10);
		}
	}
	setTimeout(timeout) {
		var newExpire = Date.now() / 1000 + timeout / 1000;
		this.expiration = this.expiration == null ? newExpire : newExpire > this.expiration ? newExpire : this.expiration;
	}
	bindHandler() {
		if(this.wasBound) {
			return;
		}
		utest_Assert.results = this.results;
		utest_Assert.createAsync = $bind(this,this.addAsync);
		utest_Assert.createEvent = $bind(this,this.addEvent);
		this.wasBound = true;
	}
	unbindHandler() {
		if(!this.wasBound) {
			return;
		}
		utest_Assert.results = null;
		utest_Assert.createAsync = function(f,t) {
			return function() {
			};
		};
		utest_Assert.createEvent = function(f1,t1) {
			return function(e) {
			};
		};
		this.wasBound = false;
	}
	addAsync(f,timeout) {
		if(timeout == null) {
			timeout = 250;
		}
		if(null == f) {
			f = function() {
			};
		}
		this.asyncStack.add(f);
		var handler = this;
		this.setTimeout(timeout);
		return function() {
			if(!handler.asyncStack.remove(f)) {
				handler.results.add(utest_Assertation.AsyncError("async function already executed",[]));
				return;
			}
			try {
				handler.bindHandler();
				f();
			} catch( e ) {
				haxe_CallStack.lastException = e;
				handler.results.add(utest_Assertation.AsyncError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack(0)));
			}
		};
	}
	addEvent(f,timeout) {
		if(timeout == null) {
			timeout = 250;
		}
		this.asyncStack.add(f);
		var handler = this;
		this.setTimeout(timeout);
		return function(e) {
			if(!handler.asyncStack.remove(f)) {
				handler.results.add(utest_Assertation.AsyncError("event already executed",[]));
				return;
			}
			try {
				handler.bindHandler();
				f(e);
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
				handler.results.add(utest_Assertation.AsyncError(((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1,utest_TestHandler.exceptionStack(0)));
			}
		};
	}
	executeMethod(name) {
		if(name == null) {
			return;
		}
		this.bindHandler();
		Reflect.field(this.fixture.target,name).apply(this.fixture.target,[]);
	}
	executeAsyncMethod(name,done) {
		if(name == null) {
			done();
			return;
		}
		this.bindHandler();
		Reflect.field(this.fixture.target,name).apply(this.fixture.target,[done]);
	}
	tested() {
		if(this.results.length == 0) {
			this.results.add(utest_Assertation.Warning("no assertions"));
		}
		this.onTested.dispatch(this);
		this.completed();
	}
	timeout() {
		this.results.add(utest_Assertation.TimeoutError(this.asyncStack.length,[]));
		this.onTimeout.dispatch(this);
		this.completed();
	}
	completed() {
		if(this.fixture.ignoringInfo != null) {
			this.completedFinally();
			return;
		}
		var isSync = true;
		var expectingAsync = true;
		var _gthis = this;
		var complete = function() {
			if(isSync) {
				expectingAsync = false;
				return;
			}
			_gthis.completedFinally();
		};
		try {
			this.executeMethod(this.fixture.teardown);
			this.executeAsyncMethod(this.fixture.teardownAsync,complete);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.TeardownError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,utest_TestHandler.exceptionStack(2)));
		}
		isSync = false;
		if(!expectingAsync) {
			this.completedFinally();
		}
	}
	completedFinally() {
		this.finished = true;
		this.unbindHandler();
		this.onComplete.dispatch(this);
	}
	static exceptionStack(pops) {
		if(pops == null) {
			pops = 2;
		}
		var stack = haxe_CallStack.exceptionStack();
		while(pops-- > 0) stack.pop();
		return stack;
	}
}
utest_TestHandler.__name__ = "utest.TestHandler";
Object.assign(utest_TestHandler.prototype, {
	__class__: utest_TestHandler
	,results: null
	,fixture: null
	,finished: null
	,asyncStack: null
	,onTested: null
	,onTimeout: null
	,onComplete: null
	,onPrecheck: null
	,precheck: null
	,wasBound: null
	,expiration: null
});
class utest_ITestHandler extends utest_TestHandler {
	constructor(fixture) {
		super(fixture);
		if(!fixture.isITest) {
			throw new js__$Boot_HaxeError("Invalid fixture type for utest.ITestHandler");
		}
		this.testCase = js_Boot.__cast(fixture.target , utest_ITest);
		this.test = fixture.test;
		if(this.test == null) {
			throw new js__$Boot_HaxeError("Fixture is missing test data");
		}
	}
	execute() {
		if(this.fixture.ignoringInfo != null) {
			this.executeFinally();
			return;
		}
		this.bindHandler();
		this.runSetup();
	}
	runSetup() {
		try {
			this.setupAsync = this.fixture.setupMethod();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.SetupError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack()));
			this.completedFinally();
			return;
		}
		this.setupAsync.then($bind(this,this.checkSetup));
	}
	checkSetup() {
		if(this.setupAsync.timedOut) {
			this.results.add(utest_Assertation.SetupError("Setup timeout",[]));
			this.completedFinally();
		} else {
			this.runTest();
		}
	}
	runTest() {
		try {
			this.testAsync = this.test.execute();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.Error(((e) instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack()));
			this.runTeardown();
			return;
		}
		this.testAsync.then($bind(this,this.checkTest));
	}
	checkTest() {
		this.onPrecheck.dispatch(this);
		if(this.testAsync.timedOut) {
			this.results.add(utest_Assertation.TimeoutError(1,[]));
			this.onTimeout.dispatch(this);
		} else if(this.testAsync.resolved) {
			if(this.results.length == 0) {
				this.results.add(utest_Assertation.Warning("no assertions"));
			}
			this.onTested.dispatch(this);
		} else {
			throw new js__$Boot_HaxeError("Unexpected test state");
		}
		this.runTeardown();
	}
	runTeardown() {
		try {
			this.teardownAsync = this.fixture.teardownMethod();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.results.add(utest_Assertation.TeardownError(((e) instanceof js__$Boot_HaxeError) ? e.val : e,haxe_CallStack.exceptionStack()));
			this.completedFinally();
			return;
		}
		this.teardownAsync.then($bind(this,this.checkTeardown));
	}
	checkTeardown() {
		if(this.teardownAsync.timedOut) {
			this.results.add(utest_Assertation.TeardownError("Teardown timeout",[]));
		}
		this.completedFinally();
	}
	bindHandler() {
		if(this.wasBound) {
			return;
		}
		utest_Assert.results = this.results;
		var msg = " is not allowed in tests extending utest.ITest. Add `async:utest.Async` argument to the test method instead.";
		utest_Assert.createAsync = function(f,t) {
			throw new js__$Boot_HaxeError("Assert.createAsync() " + msg);
		};
		utest_Assert.createEvent = function(f1,t1) {
			throw new js__$Boot_HaxeError("Assert.createEvent() " + msg);
		};
		this.wasBound = true;
	}
}
utest_ITestHandler.__name__ = "utest.ITestHandler";
utest_ITestHandler.__super__ = utest_TestHandler;
Object.assign(utest_ITestHandler.prototype, {
	__class__: utest_ITestHandler
	,testCase: null
	,test: null
	,setupAsync: null
	,testAsync: null
	,teardownAsync: null
});
class utest__$IgnoredFixture_IgnoredFixture_$Impl_$ {
	static NotIgnored() {
		var this1 = null;
		return this1;
	}
	static Ignored(reason) {
		var this1 = reason != null ? reason : "";
		return this1;
	}
	static _new(reason) {
		var this1 = reason;
		return this1;
	}
	static get_isIgnored(this1) {
		return this1 != null;
	}
	static get_ignoreReason(this1) {
		return this1;
	}
}
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.__name__ = "utest._IgnoredFixture.IgnoredFixture_Impl_";
utest__$IgnoredFixture_IgnoredFixture_$Impl_$.__properties__ = {get_ignoreReason: "get_ignoreReason",get_isIgnored: "get_isIgnored"};
class utest_Runner {
	constructor() {
		this.executedFixtures = 0;
		this.pos = 0;
		this.complete = false;
		this.globalPattern = null;
		this.iTestFixtures = new haxe_ds_ObjectMap();
		this.fixtures = [];
		this.onProgress = new utest_Dispatcher();
		this.onStart = new utest_Dispatcher();
		this.onComplete = new utest_Dispatcher();
		this.onPrecheck = new utest_Dispatcher();
		this.onTestStart = new utest_Dispatcher();
		this.onTestComplete = new utest_Dispatcher();
		this.length = 0;
		var envPattern = null;
		if(envPattern != null) {
			this.globalPattern = new EReg(envPattern,"");
		}
	}
	addCase(test,setup,teardown,prefix,pattern,setupAsync,teardownAsync) {
		if(teardownAsync == null) {
			teardownAsync = "teardownAsync";
		}
		if(setupAsync == null) {
			setupAsync = "setupAsync";
		}
		if(prefix == null) {
			prefix = "test";
		}
		if(teardown == null) {
			teardown = "teardown";
		}
		if(setup == null) {
			setup = "setup";
		}
		if(js_Boot.__instanceof(test,utest_ITest)) {
			this.addITest(test,pattern);
		} else {
			this.addCaseOld(test,setup,teardown,prefix,pattern,setupAsync,teardownAsync);
		}
	}
	addITest(testCase,pattern) {
		if(this.iTestFixtures.h.__keys__[testCase.__id__] != null) {
			throw new js__$Boot_HaxeError("Cannot add the same test twice.");
		}
		var fixtures = [];
		var init = testCase.__initializeUtest__();
		var _g = 0;
		var _g1 = init.tests;
		while(_g < _g1.length) {
			var test = _g1[_g];
			++_g;
			if(!this.isTestFixtureName(test.name,["test","spec"],pattern,this.globalPattern)) {
				continue;
			}
			var fixture = utest_TestFixture.ofData(testCase,test,init.accessories);
			this.addFixture(fixture);
			fixtures.push(fixture);
		}
		this.iTestFixtures.set(testCase,{ setupClass : utest_utils_AccessoriesUtils.getSetupClass(init.accessories), fixtures : fixtures, teardownClass : utest_utils_AccessoriesUtils.getTeardownClass(init.accessories)});
	}
	addCaseOld(test,setup,teardown,prefix,pattern,setupAsync,teardownAsync) {
		if(teardownAsync == null) {
			teardownAsync = "teardownAsync";
		}
		if(setupAsync == null) {
			setupAsync = "setupAsync";
		}
		if(prefix == null) {
			prefix = "test";
		}
		if(teardown == null) {
			teardown = "teardown";
		}
		if(setup == null) {
			setup = "setup";
		}
		if(!Reflect.isObject(test)) {
			throw new js__$Boot_HaxeError("can't add a null object as a test case");
		}
		if(!this.isMethod(test,setup)) {
			setup = null;
		}
		if(!this.isMethod(test,setupAsync)) {
			setupAsync = null;
		}
		if(!this.isMethod(test,teardown)) {
			teardown = null;
		}
		if(!this.isMethod(test,teardownAsync)) {
			teardownAsync = null;
		}
		var o = test;
		var fields = Type.getInstanceFields(o == null ? null : js_Boot.getClass(o));
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(!this.isMethod(test,field)) {
				continue;
			}
			if(!this.isTestFixtureName(field,[prefix],pattern,this.globalPattern)) {
				continue;
			}
			this.addFixture(new utest_TestFixture(test,field,setup,teardown,setupAsync,teardownAsync));
		}
	}
	isTestFixtureName(name,prefixes,pattern,globalPattern) {
		if(pattern == null && globalPattern == null) {
			var _g = 0;
			while(_g < prefixes.length) {
				var prefix = prefixes[_g];
				++_g;
				if(StringTools.startsWith(name,prefix)) {
					return true;
				}
			}
			return false;
		}
		if(pattern == null) {
			pattern = globalPattern;
		}
		return pattern.match(name);
	}
	addFixture(fixture) {
		this.fixtures.push(fixture);
		this.length++;
	}
	getFixture(index) {
		return this.fixtures[index];
	}
	isMethod(test,name) {
		try {
			return Reflect.isFunction(Reflect.field(test,name));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
			return false;
		}
	}
	run() {
		this.onStart.dispatch(this);
		var iTestRunner = new utest__$Runner_ITestRunner(this);
		iTestRunner.run();
		this.waitForCompletion();
	}
	waitForCompletion() {
		if(!this.complete) {
			haxe_Timer.delay($bind(this,this.waitForCompletion),100);
		}
	}
	runNext(finishedHandler) {
		var _g = this.pos;
		var _g1 = this.fixtures.length;
		while(_g < _g1) {
			var i = _g++;
			var fixture = this.fixtures[this.pos++];
			if(fixture.isITest) {
				continue;
			}
			var handler = this.runFixture(fixture);
			if(!handler.finished) {
				handler.onComplete.add($bind(this,this.runNext));
				return;
			}
		}
		this.complete = true;
		this.onComplete.dispatch(this);
	}
	runFixture(fixture) {
		var handler = fixture.isITest ? new utest_ITestHandler(fixture) : new utest_TestHandler(fixture);
		handler.onComplete.add($bind(this,this.testComplete));
		handler.onPrecheck.add(($_=this.onPrecheck,$bind($_,$_.dispatch)));
		this.onTestStart.dispatch(handler);
		handler.execute();
		return handler;
	}
	testComplete(h) {
		++this.executedFixtures;
		this.onTestComplete.dispatch(h);
		this.onProgress.dispatch({ result : utest_TestResult.ofHandler(h), done : this.executedFixtures, totals : this.length});
	}
}
utest_Runner.__name__ = "utest.Runner";
Object.assign(utest_Runner.prototype, {
	__class__: utest_Runner
	,fixtures: null
	,iTestFixtures: null
	,onProgress: null
	,onStart: null
	,onComplete: null
	,onPrecheck: null
	,onTestStart: null
	,onTestComplete: null
	,length: null
	,globalPattern: null
	,complete: null
	,pos: null
	,executedFixtures: null
});
class utest__$Runner_ITestRunner {
	constructor(runner) {
		this.runner = runner;
	}
	run() {
		this.cases = this.runner.iTestFixtures.keys();
		this.runCases();
	}
	runCases() {
		while(this.cases.hasNext()) {
			this.currentCase = this.cases.next();
			var data = this.runner.iTestFixtures.h[this.currentCase.__id__];
			this.currentCaseFixtures = data.fixtures;
			this.teardownClass = data.teardownClass;
			try {
				this.setupAsync = data.setupClass();
			} catch( e ) {
				haxe_CallStack.lastException = e;
				this.setupFailed(utest_Assertation.SetupError("setupClass failed: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e),haxe_CallStack.exceptionStack()));
				return;
			}
			if(this.setupAsync.resolved) {
				if(!this.runFixtures()) {
					return;
				}
			} else {
				this.setupAsync.then($bind(this,this.checkSetup));
				return;
			}
		}
		this.runner.runNext();
	}
	checkSetup() {
		if(this.setupAsync.timedOut) {
			this.setupFailed(utest_Assertation.SetupError("setupClass timeout",[]));
		} else {
			this.runFixtures();
		}
	}
	setupFailed(assertation) {
		this.runner.executedFixtures += this.currentCaseFixtures.length;
		this.runner.onProgress.dispatch({ totals : this.runner.length, result : utest_TestResult.ofFailedSetupClass(this.currentCase,assertation), done : this.runner.executedFixtures});
		this.runCases();
	}
	runFixtures(finishedHandler) {
		while(this.currentCaseFixtures.length > 0) {
			var handler = this.runner.runFixture(this.currentCaseFixtures.pop());
			if(!handler.finished) {
				handler.onComplete.add($bind(this,this.runFixtures));
				return false;
			}
		}
		try {
			this.teardownAsync = this.teardownClass();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			this.teardownFailed(utest_Assertation.TeardownError("tearDownClass failed: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e),haxe_CallStack.exceptionStack()));
		}
		if(this.teardownAsync.resolved && finishedHandler == null) {
			return true;
		}
		this.teardownAsync.then($bind(this,this.checkTeardown));
		return false;
	}
	checkTeardown() {
		if(this.teardownAsync.timedOut) {
			this.teardownFailed(utest_Assertation.TeardownError("teardownClass timeout",[]));
		}
		this.runCases();
	}
	teardownFailed(assertation) {
		this.runner.onProgress.dispatch({ totals : this.runner.length, result : utest_TestResult.ofFailedTeardownClass(this.currentCase,assertation), done : this.runner.executedFixtures});
	}
}
utest__$Runner_ITestRunner.__name__ = "utest._Runner.ITestRunner";
Object.assign(utest__$Runner_ITestRunner.prototype, {
	__class__: utest__$Runner_ITestRunner
	,runner: null
	,cases: null
	,currentCase: null
	,currentCaseFixtures: null
	,teardownClass: null
	,setupAsync: null
	,teardownAsync: null
});
class utest_AccessoryName {
}
utest_AccessoryName.__name__ = "utest.AccessoryName";
class utest_TestFixture {
	constructor(target,method,setup,teardown,setupAsync,teardownAsync) {
		this.isITest = false;
		this.target = target;
		this.method = method;
		this.setup = setup;
		this.setupAsync = setupAsync;
		this.teardown = teardown;
		this.teardownAsync = teardownAsync;
		this.ignoringInfo = this.getIgnored();
	}
	checkMethod(name,arg) {
		var field = Reflect.field(this.target,name);
		if(field == null) {
			throw new js__$Boot_HaxeError(arg + " function " + name + " is not a field of target");
		}
		if(!Reflect.isFunction(field)) {
			throw new js__$Boot_HaxeError(arg + " function " + name + " is not a function");
		}
	}
	getIgnored() {
		var o = this.target;
		var metas = haxe_rtti_Meta.getFields(o == null ? null : js_Boot.getClass(o));
		var metasForTestMetas = Reflect.getProperty(metas,this.method);
		if(metasForTestMetas == null || !Object.prototype.hasOwnProperty.call(metasForTestMetas,"Ignored")) {
			return utest__$IgnoredFixture_IgnoredFixture_$Impl_$.NotIgnored();
		}
		var ignoredArgs = Reflect.getProperty(metasForTestMetas,"Ignored");
		if(ignoredArgs == null || ignoredArgs.length == 0 || ignoredArgs[0] == null) {
			return utest__$IgnoredFixture_IgnoredFixture_$Impl_$.Ignored();
		}
		var ignoredReason = Std.string(ignoredArgs[0]);
		return utest__$IgnoredFixture_IgnoredFixture_$Impl_$.Ignored(ignoredReason);
	}
	static ofData(target,test,accessories) {
		var fixture = new utest_TestFixture(target,test.name);
		fixture.isITest = true;
		fixture.test = test;
		fixture.setupMethod = utest_utils_AccessoriesUtils.getSetup(accessories);
		fixture.teardownMethod = utest_utils_AccessoriesUtils.getTeardown(accessories);
		return fixture;
	}
}
utest_TestFixture.__name__ = "utest.TestFixture";
Object.assign(utest_TestFixture.prototype, {
	__class__: utest_TestFixture
	,target: null
	,method: null
	,setup: null
	,setupAsync: null
	,teardown: null
	,teardownAsync: null
	,ignoringInfo: null
	,isITest: null
	,test: null
	,setupMethod: null
	,teardownMethod: null
});
class utest_TestResult {
	constructor() {
	}
	allOk() {
		var _g_head = this.assertations.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var l = val;
			if(l._hx_index == 0) {
				var _g = l.pos;
				break;
			} else {
				return false;
			}
		}
		return true;
	}
	static ofHandler(handler) {
		var r = new utest_TestResult();
		var o = handler.fixture.target;
		var c = o == null ? null : js_Boot.getClass(o);
		var path = c.__name__.split(".");
		r.cls = path.pop();
		r.pack = path.join(".");
		r.method = handler.fixture.method;
		r.setup = handler.fixture.setup;
		r.setupAsync = handler.fixture.setupAsync;
		r.teardown = handler.fixture.teardown;
		r.teardownAsync = handler.fixture.teardownAsync;
		r.assertations = handler.results;
		return r;
	}
	static ofFailedSetupClass(testCase,assertation) {
		var r = new utest_TestResult();
		var c = testCase == null ? null : js_Boot.getClass(testCase);
		var path = c.__name__.split(".");
		r.cls = path.pop();
		r.pack = path.join(".");
		r.method = "setup";
		r.assertations = new haxe_ds_List();
		r.assertations.add(assertation);
		return r;
	}
	static ofFailedTeardownClass(testCase,assertation) {
		var r = new utest_TestResult();
		var c = testCase == null ? null : js_Boot.getClass(testCase);
		var path = c.__name__.split(".");
		r.cls = path.pop();
		r.pack = path.join(".");
		r.method = "setup";
		r.assertations = new haxe_ds_List();
		r.assertations.add(assertation);
		return r;
	}
}
utest_TestResult.__name__ = "utest.TestResult";
Object.assign(utest_TestResult.prototype, {
	__class__: utest_TestResult
	,pack: null
	,cls: null
	,method: null
	,setup: null
	,setupAsync: null
	,teardown: null
	,teardownAsync: null
	,assertations: null
});
class utest_ui_Report {
	static create(runner,displaySuccessResults,headerDisplayMode) {
		var report = new utest_ui_text_PrintReport(runner);
		if(null == displaySuccessResults) {
			report.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.ShowSuccessResultsWithNoErrors;
		} else {
			report.displaySuccessResults = displaySuccessResults;
		}
		if(null == headerDisplayMode) {
			report.displayHeader = utest_ui_common_HeaderDisplayMode.ShowHeaderWithResults;
		} else {
			report.displayHeader = headerDisplayMode;
		}
		return report;
	}
}
utest_ui_Report.__name__ = "utest.ui.Report";
class utest_ui_common_ClassResult {
	constructor(className,setupName,teardownName) {
		this.fixtures = new haxe_ds_StringMap();
		this.className = className;
		this.setupName = setupName;
		this.hasSetup = setupName != null;
		this.teardownName = teardownName;
		this.hasTeardown = teardownName != null;
		this.methods = 0;
		this.stats = new utest_ui_common_ResultStats();
	}
	add(result) {
		var key = result.methodName;
		var _this = this.fixtures;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			throw new js__$Boot_HaxeError("invalid duplicated fixture: " + this.className + "." + result.methodName);
		}
		this.stats.wire(result.stats);
		this.methods++;
		var key1 = result.methodName;
		var _this1 = this.fixtures;
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,result);
		} else {
			_this1.h[key1] = result;
		}
	}
	get(method) {
		var _this = this.fixtures;
		if(__map_reserved[method] != null) {
			return _this.getReserved(method);
		} else {
			return _this.h[method];
		}
	}
	exists(method) {
		var _this = this.fixtures;
		if(__map_reserved[method] != null) {
			return _this.existsReserved(method);
		} else {
			return _this.h.hasOwnProperty(method);
		}
	}
	methodNames(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		var name = this.fixtures.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			names.push(name1);
		}
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.get(a).stats;
				var bs = me.get(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a1,b1) {
				return Reflect.compare(a1,b1);
			});
		}
		return names;
	}
}
utest_ui_common_ClassResult.__name__ = "utest.ui.common.ClassResult";
Object.assign(utest_ui_common_ClassResult.prototype, {
	__class__: utest_ui_common_ClassResult
	,fixtures: null
	,className: null
	,setupName: null
	,teardownName: null
	,hasSetup: null
	,hasTeardown: null
	,methods: null
	,stats: null
});
class utest_ui_common_FixtureResult {
	constructor(methodName) {
		this.methodName = methodName;
		this.list = new haxe_ds_List();
		this.hasTestError = false;
		this.hasSetupError = false;
		this.hasTeardownError = false;
		this.hasTimeoutError = false;
		this.hasAsyncError = false;
		this.stats = new utest_ui_common_ResultStats();
	}
	iterator() {
		return new haxe_ds__$List_ListIterator(this.list.h);
	}
	add(assertation) {
		this.list.add(assertation);
		switch(assertation._hx_index) {
		case 0:
			var _g9 = assertation.pos;
			this.stats.addSuccesses(1);
			break;
		case 1:
			var _g3 = assertation.pos;
			var _g2 = assertation.msg;
			this.stats.addFailures(1);
			break;
		case 2:
			var _g8 = assertation.stack;
			var _g7 = assertation.e;
			this.stats.addErrors(1);
			break;
		case 3:
			var _g14 = assertation.stack;
			var _g13 = assertation.e;
			this.stats.addErrors(1);
			this.hasSetupError = true;
			break;
		case 4:
			var _g5 = assertation.stack;
			var _g4 = assertation.e;
			this.stats.addErrors(1);
			this.hasTeardownError = true;
			break;
		case 5:
			var _g1 = assertation.stack;
			var _g = assertation.missedAsyncs;
			this.stats.addErrors(1);
			this.hasTimeoutError = true;
			break;
		case 6:
			var _g12 = assertation.stack;
			var _g11 = assertation.e;
			this.stats.addErrors(1);
			this.hasAsyncError = true;
			break;
		case 7:
			var _g10 = assertation.msg;
			this.stats.addWarnings(1);
			break;
		case 8:
			var _g6 = assertation.reason;
			this.stats.addIgnores(1);
			break;
		}
	}
}
utest_ui_common_FixtureResult.__name__ = "utest.ui.common.FixtureResult";
Object.assign(utest_ui_common_FixtureResult.prototype, {
	__class__: utest_ui_common_FixtureResult
	,methodName: null
	,hasTestError: null
	,hasSetupError: null
	,hasTeardownError: null
	,hasTimeoutError: null
	,hasAsyncError: null
	,stats: null
	,list: null
});
var utest_ui_common_HeaderDisplayMode = $hxEnums["utest.ui.common.HeaderDisplayMode"] = { __ename__ : "utest.ui.common.HeaderDisplayMode", __constructs__ : ["AlwaysShowHeader","NeverShowHeader","ShowHeaderWithResults"]
	,AlwaysShowHeader: {_hx_index:0,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
	,NeverShowHeader: {_hx_index:1,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
	,ShowHeaderWithResults: {_hx_index:2,__enum__:"utest.ui.common.HeaderDisplayMode",toString:$estr}
};
var utest_ui_common_SuccessResultsDisplayMode = $hxEnums["utest.ui.common.SuccessResultsDisplayMode"] = { __ename__ : "utest.ui.common.SuccessResultsDisplayMode", __constructs__ : ["AlwaysShowSuccessResults","NeverShowSuccessResults","ShowSuccessResultsWithNoErrors"]
	,AlwaysShowSuccessResults: {_hx_index:0,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
	,NeverShowSuccessResults: {_hx_index:1,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
	,ShowSuccessResultsWithNoErrors: {_hx_index:2,__enum__:"utest.ui.common.SuccessResultsDisplayMode",toString:$estr}
};
class utest_ui_common_IReport {
}
utest_ui_common_IReport.__name__ = "utest.ui.common.IReport";
Object.assign(utest_ui_common_IReport.prototype, {
	__class__: utest_ui_common_IReport
	,displaySuccessResults: null
	,displayHeader: null
	,setHandler: null
});
class utest_ui_common_PackageResult {
	constructor(packageName) {
		this.isEmpty = true;
		this.packageName = packageName;
		this.classes = new haxe_ds_StringMap();
		this.packages = new haxe_ds_StringMap();
		this.stats = new utest_ui_common_ResultStats();
	}
	addResult(result,flattenPackage) {
		this.isEmpty = false;
		var pack = this.getOrCreatePackage(result.pack,flattenPackage,this);
		var cls = this.getOrCreateClass(pack,result.cls,result.setup,result.teardown);
		var fix = this.createFixture(result.method,result.assertations);
		cls.add(fix);
	}
	addClass(result) {
		this.isEmpty = false;
		var key = result.className;
		var _this = this.classes;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,result);
		} else {
			_this.h[key] = result;
		}
		this.stats.wire(result.stats);
	}
	addPackage(result) {
		this.isEmpty = false;
		var key = result.packageName;
		var _this = this.packages;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,result);
		} else {
			_this.h[key] = result;
		}
		this.stats.wire(result.stats);
	}
	existsPackage(name) {
		var _this = this.packages;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	existsClass(name) {
		var _this = this.classes;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	getPackage(name) {
		if(this.packageName == null && name == "") {
			return this;
		}
		var _this = this.packages;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	getClass(name) {
		var _this = this.classes;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	classNames(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		var name = this.classes.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			names.push(name1);
		}
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.getClass(a).stats;
				var bs = me.getClass(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a1,b1) {
				return Reflect.compare(a1,b1);
			});
		}
		return names;
	}
	packageNames(errorsHavePriority) {
		if(errorsHavePriority == null) {
			errorsHavePriority = true;
		}
		var names = [];
		if(this.packageName == null) {
			names.push("");
		}
		var name = this.packages.keys();
		while(name.hasNext()) {
			var name1 = name.next();
			names.push(name1);
		}
		if(errorsHavePriority) {
			var me = this;
			names.sort(function(a,b) {
				var as = me.getPackage(a).stats;
				var bs = me.getPackage(b).stats;
				if(as.hasErrors) {
					if(!bs.hasErrors) {
						return -1;
					} else if(as.errors == bs.errors) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.errors,bs.errors);
					}
				} else if(bs.hasErrors) {
					return 1;
				} else if(as.hasFailures) {
					if(!bs.hasFailures) {
						return -1;
					} else if(as.failures == bs.failures) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.failures,bs.failures);
					}
				} else if(bs.hasFailures) {
					return 1;
				} else if(as.hasWarnings) {
					if(!bs.hasWarnings) {
						return -1;
					} else if(as.warnings == bs.warnings) {
						return Reflect.compare(a,b);
					} else {
						return Reflect.compare(as.warnings,bs.warnings);
					}
				} else if(bs.hasWarnings) {
					return 1;
				} else {
					return Reflect.compare(a,b);
				}
			});
		} else {
			names.sort(function(a1,b1) {
				return Reflect.compare(a1,b1);
			});
		}
		return names;
	}
	createFixture(method,assertations) {
		var f = new utest_ui_common_FixtureResult(method);
		var assertation = $getIterator(assertations);
		while(assertation.hasNext()) {
			var assertation1 = assertation.next();
			f.add(assertation1);
		}
		return f;
	}
	getOrCreateClass(pack,cls,setup,teardown) {
		if(pack.existsClass(cls)) {
			return pack.getClass(cls);
		}
		var c = new utest_ui_common_ClassResult(cls,setup,teardown);
		pack.addClass(c);
		return c;
	}
	getOrCreatePackage(pack,flat,ref) {
		if(pack == null || pack == "") {
			return ref;
		}
		if(flat) {
			if(ref.existsPackage(pack)) {
				return ref.getPackage(pack);
			}
			var p = new utest_ui_common_PackageResult(pack);
			ref.addPackage(p);
			return p;
		} else {
			var parts = pack.split(".");
			var _g = 0;
			while(_g < parts.length) {
				var part = parts[_g];
				++_g;
				ref = this.getOrCreatePackage(part,true,ref);
			}
			return ref;
		}
	}
}
utest_ui_common_PackageResult.__name__ = "utest.ui.common.PackageResult";
Object.assign(utest_ui_common_PackageResult.prototype, {
	__class__: utest_ui_common_PackageResult
	,packageName: null
	,isEmpty: null
	,classes: null
	,packages: null
	,stats: null
});
class utest_ui_common_ReportTools {
	static hasHeader(report,stats) {
		switch(report.displayHeader._hx_index) {
		case 0:
			return true;
		case 1:
			return false;
		case 2:
			if(!stats.isOk) {
				return true;
			}
			switch(report.displaySuccessResults._hx_index) {
			case 1:
				return false;
			case 0:case 2:
				return true;
			}
			break;
		}
	}
	static skipResult(report,stats,isOk) {
		if(!stats.isOk) {
			return false;
		}
		switch(report.displaySuccessResults._hx_index) {
		case 0:
			return false;
		case 1:
			return true;
		case 2:
			return !isOk;
		}
	}
	static hasOutput(report,stats) {
		if(!stats.isOk) {
			return true;
		}
		return utest_ui_common_ReportTools.hasHeader(report,stats);
	}
}
utest_ui_common_ReportTools.__name__ = "utest.ui.common.ReportTools";
class utest_ui_common_ResultAggregator {
	constructor(runner,flattenPackage) {
		if(flattenPackage == null) {
			flattenPackage = false;
		}
		if(runner == null) {
			throw new js__$Boot_HaxeError("runner argument is null");
		}
		this.flattenPackage = flattenPackage;
		this.runner = runner;
		runner.onStart.add($bind(this,this.start));
		runner.onProgress.add($bind(this,this.progress));
		runner.onComplete.add($bind(this,this.complete));
		this.onStart = new utest_Notifier();
		this.onComplete = new utest_Dispatcher();
		this.onProgress = new utest_Dispatcher();
	}
	start(runner) {
		this.checkNonITest();
		this.root = new utest_ui_common_PackageResult(null);
		this.onStart.dispatch();
	}
	checkNonITest() {
		var first = null;
		var total = 0;
		var _g = 0;
		var _g1 = this.runner.length;
		while(_g < _g1) {
			var i = _g++;
			var fixture = this.runner.getFixture(i);
			if(!fixture.isITest) {
				++total;
				if(first == null) {
					var o = fixture.target;
					var c = o == null ? null : js_Boot.getClass(o);
					first = c.__name__;
				}
			}
		}
		if(total > 0) {
			var baseMsg = "implement utest.ITest. Non-ITest tests are deprecated. Implement utest.ITest or extend utest.Test.";
			var msg;
			switch(total) {
			case 1:
				msg = "" + first + " doesn't " + baseMsg;
				break;
			case 2:
				msg = "" + first + " and 1 other don't " + baseMsg;
				break;
			default:
				msg = "" + first + " and " + total + " others don't " + baseMsg;
			}
			haxe_Log.trace(msg,{ fileName : "utest/ui/common/ResultAggregator.hx", lineNumber : 54, className : "utest.ui.common.ResultAggregator", methodName : "checkNonITest"});
		}
	}
	getOrCreatePackage(pack,flat,ref) {
		if(ref == null) {
			ref = this.root;
		}
		if(pack == null || pack == "") {
			return ref;
		}
		if(flat) {
			if(ref.existsPackage(pack)) {
				return ref.getPackage(pack);
			}
			var p = new utest_ui_common_PackageResult(pack);
			ref.addPackage(p);
			return p;
		} else {
			var parts = pack.split(".");
			var _g = 0;
			while(_g < parts.length) {
				var part = parts[_g];
				++_g;
				ref = this.getOrCreatePackage(part,true,ref);
			}
			return ref;
		}
	}
	getOrCreateClass(pack,cls,setup,teardown) {
		if(pack.existsClass(cls)) {
			return pack.getClass(cls);
		}
		var c = new utest_ui_common_ClassResult(cls,setup,teardown);
		pack.addClass(c);
		return c;
	}
	createFixture(result) {
		var f = new utest_ui_common_FixtureResult(result.method);
		var _g_head = result.assertations.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var assertation = val;
			f.add(assertation);
		}
		return f;
	}
	progress(e) {
		this.root.addResult(e.result,this.flattenPackage);
		this.onProgress.dispatch(e);
	}
	complete(runner) {
		if(this.root.isEmpty) {
			this.root.addResult(this.createNoTestsResult(),false);
		}
		this.onComplete.dispatch(this.root);
	}
	createNoTestsResult() {
		var result = new utest_TestResult();
		result.pack = "";
		result.cls = "";
		result.method = "";
		result.assertations = new haxe_ds_List();
		var pos = { fileName : "", lineNumber : 1, className : "utest.Runner", methodName : "run"};
		result.assertations.add(utest_Assertation.Failure("No tests executed.",pos));
		return result;
	}
}
utest_ui_common_ResultAggregator.__name__ = "utest.ui.common.ResultAggregator";
Object.assign(utest_ui_common_ResultAggregator.prototype, {
	__class__: utest_ui_common_ResultAggregator
	,runner: null
	,flattenPackage: null
	,root: null
	,onStart: null
	,onComplete: null
	,onProgress: null
});
class utest_ui_common_ResultStats {
	constructor() {
		this.assertations = 0;
		this.successes = 0;
		this.failures = 0;
		this.errors = 0;
		this.warnings = 0;
		this.ignores = 0;
		this.isOk = true;
		this.hasFailures = false;
		this.hasErrors = false;
		this.hasWarnings = false;
		this.hasIgnores = false;
		this.onAddSuccesses = new utest_Dispatcher();
		this.onAddFailures = new utest_Dispatcher();
		this.onAddErrors = new utest_Dispatcher();
		this.onAddWarnings = new utest_Dispatcher();
		this.onAddIgnores = new utest_Dispatcher();
	}
	addSuccesses(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.successes += v;
		this.onAddSuccesses.dispatch(v);
	}
	addFailures(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.failures += v;
		this.hasFailures = this.failures > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddFailures.dispatch(v);
	}
	addErrors(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.errors += v;
		this.hasErrors = this.errors > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddErrors.dispatch(v);
	}
	addIgnores(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.ignores += v;
		this.hasIgnores = this.ignores > 0;
		this.onAddIgnores.dispatch(v);
	}
	addWarnings(v) {
		if(v == 0) {
			return;
		}
		this.assertations += v;
		this.warnings += v;
		this.hasWarnings = this.warnings > 0;
		this.isOk = !(this.hasFailures || this.hasErrors || this.hasWarnings);
		this.onAddWarnings.dispatch(v);
	}
	sum(other) {
		this.addSuccesses(other.successes);
		this.addFailures(other.failures);
		this.addErrors(other.errors);
		this.addWarnings(other.warnings);
		this.addIgnores(other.ignores);
	}
	subtract(other) {
		this.addSuccesses(-other.successes);
		this.addFailures(-other.failures);
		this.addErrors(-other.errors);
		this.addWarnings(-other.warnings);
		this.addIgnores(-other.ignores);
	}
	wire(dependant) {
		dependant.onAddSuccesses.add($bind(this,this.addSuccesses));
		dependant.onAddFailures.add($bind(this,this.addFailures));
		dependant.onAddErrors.add($bind(this,this.addErrors));
		dependant.onAddWarnings.add($bind(this,this.addWarnings));
		dependant.onAddIgnores.add($bind(this,this.addIgnores));
		this.sum(dependant);
	}
	unwire(dependant) {
		dependant.onAddSuccesses.remove($bind(this,this.addSuccesses));
		dependant.onAddFailures.remove($bind(this,this.addFailures));
		dependant.onAddErrors.remove($bind(this,this.addErrors));
		dependant.onAddWarnings.remove($bind(this,this.addWarnings));
		dependant.onAddIgnores.remove($bind(this,this.addIgnores));
		this.subtract(dependant);
	}
}
utest_ui_common_ResultStats.__name__ = "utest.ui.common.ResultStats";
Object.assign(utest_ui_common_ResultStats.prototype, {
	__class__: utest_ui_common_ResultStats
	,assertations: null
	,successes: null
	,failures: null
	,errors: null
	,warnings: null
	,ignores: null
	,onAddSuccesses: null
	,onAddFailures: null
	,onAddErrors: null
	,onAddWarnings: null
	,onAddIgnores: null
	,isOk: null
	,hasFailures: null
	,hasErrors: null
	,hasWarnings: null
	,hasIgnores: null
});
class utest_ui_text_PlainTextReport {
	constructor(runner,outputHandler) {
		if(utest_ui_text_PlainTextReport._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(runner,outputHandler);
	}
	_hx_constructor(runner,outputHandler) {
		this.aggregator = new utest_ui_common_ResultAggregator(runner,true);
		runner.onStart.add($bind(this,this.start));
		this.aggregator.onComplete.add($bind(this,this.complete));
		if(null != outputHandler) {
			this.setHandler(outputHandler);
		}
		this.displaySuccessResults = utest_ui_common_SuccessResultsDisplayMode.AlwaysShowSuccessResults;
		this.displayHeader = utest_ui_common_HeaderDisplayMode.AlwaysShowHeader;
	}
	setHandler(handler) {
		this.handler = handler;
	}
	start(e) {
		this.startTime = this.getTime();
	}
	getTime() {
		return Date.now() / 1000;
	}
	indents(c) {
		var s = "";
		while(--c >= 0) s += this.indent;
		return s;
	}
	dumpStack(stack) {
		if(stack.length == 0) {
			return "";
		}
		var parts = haxe_CallStack.toString(stack).split("\n");
		var r = [];
		var _g = 0;
		while(_g < parts.length) {
			var part = parts[_g];
			++_g;
			if(part.indexOf(" utest.") >= 0) {
				continue;
			}
			r.push(part);
		}
		return r.join(this.newline);
	}
	addHeader(buf,result) {
		if(!utest_ui_common_ReportTools.hasHeader(this,result.stats)) {
			return;
		}
		var end = this.getTime();
		var time = ((end - this.startTime) * 1000 | 0) / 1000;
		buf.b += Std.string("\nassertations: " + result.stats.assertations + this.newline);
		buf.b += Std.string("successes: " + result.stats.successes + this.newline);
		buf.b += Std.string("errors: " + result.stats.errors + this.newline);
		buf.b += Std.string("failures: " + result.stats.failures + this.newline);
		buf.b += Std.string("warnings: " + result.stats.warnings + this.newline);
		buf.b += Std.string("execution time: " + time + this.newline);
		buf.b += Std.string(this.newline);
		buf.b += Std.string("results: " + (result.stats.isOk ? "ALL TESTS OK (success: true)" : "SOME TESTS FAILURES (success: false)"));
		buf.b += Std.string(this.newline);
	}
	getResults() {
		var buf = new StringBuf();
		this.addHeader(buf,this.result);
		var _g = 0;
		var _g1 = this.result.packageNames();
		while(_g < _g1.length) {
			var pname = _g1[_g];
			++_g;
			var pack = this.result.getPackage(pname);
			if(utest_ui_common_ReportTools.skipResult(this,pack.stats,this.result.stats.isOk)) {
				continue;
			}
			var _g2 = 0;
			var _g11 = pack.classNames();
			while(_g2 < _g11.length) {
				var cname = _g11[_g2];
				++_g2;
				var cls = pack.getClass(cname);
				if(utest_ui_common_ReportTools.skipResult(this,cls.stats,this.result.stats.isOk)) {
					continue;
				}
				buf.b += Std.string((pname == "" ? "" : pname + ".") + cname + this.newline);
				var _g3 = 0;
				var _g12 = cls.methodNames();
				while(_g3 < _g12.length) {
					var mname = _g12[_g3];
					++_g3;
					var fix = cls.get(mname);
					if(utest_ui_common_ReportTools.skipResult(this,fix.stats,this.result.stats.isOk)) {
						continue;
					}
					var x = this.indents(1) + mname + ": ";
					buf.b += Std.string(x);
					if(fix.stats.isOk) {
						buf.b += "OK ";
					} else if(fix.stats.hasErrors) {
						buf.b += "ERROR ";
					} else if(fix.stats.hasFailures) {
						buf.b += "FAILURE ";
					} else if(fix.stats.hasWarnings) {
						buf.b += "WARNING ";
					}
					var messages = "";
					var _g4 = fix.iterator();
					while(_g4.head != null) {
						var val = _g4.head.item;
						_g4.head = _g4.head.next;
						var assertation = val;
						switch(assertation._hx_index) {
						case 0:
							var _g9 = assertation.pos;
							buf.b += ".";
							break;
						case 1:
							var pos = assertation.pos;
							var msg = assertation.msg;
							buf.b += "F";
							messages += this.indents(2) + "line: " + pos.lineNumber + ", " + msg + this.newline;
							break;
						case 2:
							var s = assertation.stack;
							var e = assertation.e;
							buf.b += "E";
							messages += this.indents(2) + Std.string(e) + this.dumpStack(s) + this.newline;
							break;
						case 3:
							var s1 = assertation.stack;
							var e1 = assertation.e;
							buf.b += "S";
							messages += this.indents(2) + Std.string(e1) + this.dumpStack(s1) + this.newline;
							break;
						case 4:
							var s2 = assertation.stack;
							var e2 = assertation.e;
							buf.b += "T";
							messages += this.indents(2) + Std.string(e2) + this.dumpStack(s2) + this.newline;
							break;
						case 5:
							var s3 = assertation.stack;
							var missedAsyncs = assertation.missedAsyncs;
							buf.b += "O";
							messages += this.indents(2) + "missed async calls: " + missedAsyncs + this.dumpStack(s3) + this.newline;
							break;
						case 6:
							var s4 = assertation.stack;
							var e3 = assertation.e;
							buf.b += "A";
							messages += this.indents(2) + Std.string(e3) + this.dumpStack(s4) + this.newline;
							break;
						case 7:
							var msg1 = assertation.msg;
							buf.b += "W";
							messages += this.indents(2) + msg1 + this.newline;
							break;
						case 8:
							var reason = assertation.reason;
							buf.b += "I";
							if(reason != null && reason != "") {
								messages += this.indents(2) + ("With reason: " + reason) + this.newline;
							}
							break;
						}
					}
					buf.b += Std.string(this.newline);
					buf.b += messages == null ? "null" : "" + messages;
				}
			}
		}
		return buf.b;
	}
	complete(result) {
		this.result = result;
		if(this.handler != null) {
			this.handler(this);
		}
		if(typeof phantom != "undefined") {
			phantom.exit(result.stats.isOk ? 0 : 1);
		}
		if(typeof process != "undefined") {
			process.exit(result.stats.isOk ? 0 : 1);
		}
	}
}
utest_ui_text_PlainTextReport.__name__ = "utest.ui.text.PlainTextReport";
utest_ui_text_PlainTextReport.__interfaces__ = [utest_ui_common_IReport];
Object.assign(utest_ui_text_PlainTextReport.prototype, {
	__class__: utest_ui_text_PlainTextReport
	,displaySuccessResults: null
	,displayHeader: null
	,handler: null
	,aggregator: null
	,newline: null
	,indent: null
	,startTime: null
	,result: null
});
class utest_ui_text_PrintReport extends utest_ui_text_PlainTextReport {
	constructor(runner) {
		utest_ui_text_PlainTextReport._hx_skip_constructor = true;
		super();
		utest_ui_text_PlainTextReport._hx_skip_constructor = false;
		this._hx_constructor(runner);
	}
	_hx_constructor(runner) {
		super._hx_constructor(runner,$bind(this,this._handler));
		this.newline = "\n";
		this.indent = "  ";
	}
	_handler(report) {
		this._trace(report.getResults());
	}
	_trace(s) {
		s = StringTools.replace(s,"  ",this.indent);
		s = StringTools.replace(s,"\n",this.newline);
		haxe_Log.trace(s,{ fileName : "utest/ui/text/PrintReport.hx", lineNumber : 52, className : "utest.ui.text.PrintReport", methodName : "_trace"});
	}
}
utest_ui_text_PrintReport.__name__ = "utest.ui.text.PrintReport";
utest_ui_text_PrintReport.__super__ = utest_ui_text_PlainTextReport;
Object.assign(utest_ui_text_PrintReport.prototype, {
	__class__: utest_ui_text_PrintReport
});
class utest_utils_AccessoriesUtils {
	static getSetupClass(accessories) {
		if(accessories.setupClass == null) {
			return utest_Async.getResolved;
		} else {
			return accessories.setupClass;
		}
	}
	static getSetup(accessories) {
		if(accessories.setup == null) {
			return utest_Async.getResolved;
		} else {
			return accessories.setup;
		}
	}
	static getTeardown(accessories) {
		if(accessories.teardown == null) {
			return utest_Async.getResolved;
		} else {
			return accessories.teardown;
		}
	}
	static getTeardownClass(accessories) {
		if(accessories.teardownClass == null) {
			return utest_Async.getResolved;
		} else {
			return accessories.teardownClass;
		}
	}
}
utest_utils_AccessoriesUtils.__name__ = "utest.utils.AccessoriesUtils";
class utest_utils_AsyncUtils {
	static orResolved(async) {
		if(async == null) {
			return utest_Async.getResolved();
		} else {
			return async;
		}
	}
}
utest_utils_AsyncUtils.__name__ = "utest.utils.AsyncUtils";
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if(typeof $global.$haxeUID == "undefined") $global.$haxeUID = 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
haxe_Template.splitter = new EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()","");
haxe_Template.expr_splitter = new EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)","");
haxe_Template.expr_trim = new EReg("^[ ]*([^ ]+)[ ]*$","");
haxe_Template.expr_int = new EReg("^[0-9]+$","");
haxe_Template.expr_float = new EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$","");
haxe_Template.globals = { };
haxe_Template.hxKeepArrayIterator = HxOverrides.iter([]);
markdown_BlockSyntax.RE_EMPTY = new EReg("^([ \\t]*)$","");
markdown_BlockSyntax.RE_SETEXT = new EReg("^((=+)|(-+))$","");
markdown_BlockSyntax.RE_HEADER = new EReg("^(#{1,6})(.*?)( +#* *)?$","");
markdown_BlockSyntax.RE_TASK = new EReg("(\\[[x ]\\])","");
markdown_BlockSyntax.RE_BLOCKQUOTE = new EReg("^[ ]{0,3}>[ ]?(.*)$","");
markdown_BlockSyntax.RE_INDENT = new EReg("^(?:    |\t)(.*)$","");
markdown_BlockSyntax.RE_CODE = new EReg("^```(\\w*)\\s*$","");
markdown_BlockSyntax.RE_HR = new EReg("^[ ]{0,3}((-+[ ]{0,2}){3,}|(_+[ ]{0,2}){3,}|(\\*+[ ]{0,2}){3,})$","");
markdown_BlockSyntax.RE_HTML = new EReg("^<[ ]*\\w+[ >]","");
markdown_BlockSyntax.RE_UL = new EReg("^[ ]{0,3}[*+-][ \\t]+(.*)$","");
markdown_BlockSyntax.RE_OL = new EReg("^[ ]{0,3}\\d+\\.[ \\t]+(.*)$","");
markdown_TableSyntax.TABLE_PATTERN = new EReg("^(.+?:?\\|:?)+(.+)$","");
markdown_TableSyntax.CELL_PATTERN = new EReg("(\\|)?([^\\|]+)(\\|)?","g");
markdown_HtmlRenderer.BLOCK_TAGS = new EReg("blockquote|h1|h2|h3|h4|h5|h6|hr|p|pre","");
markdown_HtmlRenderer.attributeOrder = ["src","alt"];
markdown_LinkSyntax.linkPattern = "\\](?:(" + "\\s?\\[([^\\]]*)\\]" + "|" + "\\s?\\(([^ )]+)(?:[ ]*\"([^\"]+)\"|)\\)" + ")|)";
markdown_ImgSyntax.linkPattern = "\\](?:(" + "\\s?\\[([^\\]]*)\\]" + "|" + "\\s?\\(([^ )]+)(?:[ ]*\"([^\"]+)\"|)\\)" + ")|)";
markdown_InlineParser.defaultSyntaxes = [new markdown_AutolinkSyntaxWithoutBrackets(),new markdown_TextSyntax(" {2,}\n","<br />\n"),new markdown_TextSyntax("\\s*[A-Za-z0-9]+"),new markdown_AutolinkSyntax(),new markdown_LinkSyntax(),new markdown_ImgSyntax(),new markdown_TextSyntax(" \\* "),new markdown_TextSyntax(" _ "),new markdown_TextSyntax("&[#a-zA-Z0-9]*;"),new markdown_TextSyntax("&","&amp;"),new markdown_TextSyntax("<(?:!--[ ]*|/)?\\w+.*?>"),new markdown_TextSyntax("<","&lt;"),new markdown_TagSyntax("\\*\\*","strong"),new markdown_TagSyntax("__","strong"),new markdown_TagSyntax("\\*","em"),new markdown_TagSyntax("\\b_","em","_\\b"),new markdown_CodeSyntax("``\\s?((?:.|\\n)*?)\\s?``"),new markdown_CodeSyntax("`([^`]*)`")];
tests_TestTemplate.sources = "testsources";
tests_TestTemplate.outDir = "testout";
tink__$Chunk_EmptyChunk.EMPTY = new haxe_io_Bytes(new ArrayBuffer(0));
tink__$Chunk_Chunk_$Impl_$.EMPTY = new tink__$Chunk_EmptyChunk();
tink_chunk_nodejs_BufferChunk.alloc = "allocUnsafe" in Buffer ? js_node_buffer_Buffer.allocUnsafe : function(size) {
	return new js_node_buffer_Buffer(size);
};
tink_core__$Callback_Callback_$Impl_$.depth = 0;
tink_core__$Callback_Callback_$Impl_$.MAX_DEPTH = 500;
tink_core__$Future_NeverFuture.inst = new tink_core__$Future_NeverFuture();
tink_core__$Future_Future_$Impl_$.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(null));
tink_core__$Future_Future_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Noise.Noise));
tink_core__$Future_Future_$Impl_$.NEVER = tink_core__$Future_NeverFuture.inst;
tink_core_FutureTrigger._hx_skip_constructor = false;
tink_core__$Lazy_Lazy_$Impl_$.NULL = new tink_core__$Lazy_LazyConst(null);
tink_core__$Promise_Promise_$Impl_$.NULL = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(null)));
tink_core__$Promise_Promise_$Impl_$.NOISE = new tink_core__$Future_SyncFuture(new tink_core__$Lazy_LazyConst(tink_core_Outcome.Success(tink_core_Noise.Noise)));
tink_core__$Promise_Promise_$Impl_$.NEVER = (function($this) {
	var $r;
	var ret = tink_core__$Future_Future_$Impl_$.NEVER.map(tink_core_Outcome.Success);
	$r = ret.gather();
	return $r;
}(this));
tink_io__$Sink_Blackhole.inst = new tink_io__$Sink_Blackhole();
tink_io__$Sink_SinkYielding_$Impl_$.BLACKHOLE = tink_io__$Sink_Blackhole.inst;
tink_streams_StreamBase._hx_skip_constructor = false;
tink_streams_Empty.inst = new tink_streams_Empty();
tink_io__$Source_Source_$Impl_$.EMPTY = tink_streams_Empty.inst;
tink_io__$Worker_Worker_$Impl_$.EAGER = new tink_io__$Worker_EagerWorker();
tink_io__$Worker_Worker_$Impl_$.pool = [tink_io__$Worker_Worker_$Impl_$.EAGER];
utest_TestHandler.POLLING_TIME = 10;
utest_AccessoryName.SETUP_NAME = "setup";
utest_AccessoryName.SETUP_CLASS_NAME = "setupClass";
utest_AccessoryName.TEARDOWN_NAME = "teardown";
utest_AccessoryName.TEARDOWN_CLASS_NAME = "teardownClass";
utest_ui_text_PlainTextReport._hx_skip_constructor = false;
tests_RunAll.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=test.js.map